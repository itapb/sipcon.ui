<div id="scrollableGridContentStyled" style="overflow-y: auto;  padding: 8px; background-color: #f0f0f0;">
    <MudGrid Spacing="2">
        <MudItem xs="12" sm="9">
            <MudStack>
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center">
                    <MudStack Row="true" Spacing="2">
                        <MudFab StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" Label="Guardar" OnClick="SaveClick" ></MudFab>
                        <MudButton OnClick="CloseClick">Cerrar</MudButton>
                    </MudStack>
                </MudPaper>
                <MudPaper Elevation="2" Style="height: 100%;">
                    <MudDataGrid @ref="GuideDetailsMudDataGrid" T="Models.GuideDetails" ServerData="ServerReload" Filterable="false" FixedHeader Height="calc(100vh - 262px)" Loading="Loading" @bind-CurrentPage="PartCurrentPage">
                        <ToolBarContent>
                            <MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd" Size="Size.Medium" OnClick="ClickAddGuideDetails" Color="Color.Info" Disabled="@(!IsCreatedGuide)"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.PlaylistRemove" Size="Size.Medium" OnClick="ClickRemoveGuideDetails" Color="Color.Info" Disabled="@(!IsCreatedGuide)"></MudIconButton>
                            <MudSpacer />
                            <MudIconButton Icon="@Icons.Material.Filled.Upload" Size="Size.Medium" OnClick="ClickImportGuideDetails" Color="Color.Info" Disabled="@(!IsCreatedGuide)"></MudIconButton>
                        </ToolBarContent>
                        <Columns>   
                            <PropertyColumn Property="x => x.PackageCode" Title="BULTO" />
                            <PropertyColumn Property="x => x.PartInnercode" Title="CODIGO" />
                            <PropertyColumn Property="x => x.PartDescription" Title="DESCRIPCION" />
                            <PropertyColumn Property="x => x.Quantity" Title="CANTIDAD" />
                            
                        </Columns>
                    </MudDataGrid>
                </MudPaper>
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="3">
            <MudStack Style="height: 100%; ">
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center flex-grow-1">
                    <MudForm @ref="form">
                        <MudGrid Spacing="2">
                            <MudItem xs="12"><MudText Typo="Typo.h6" Color="Color.Info">Datos Generales:</MudText></MudItem>
                            @if (MasterGuide == null)
                            {
                                <MudItem xs="12"><MudTextField T="string" ReadOnly="true" Value="@("Cargando..")" Variant="Variant.Text" /></MudItem>
                            }
                            else
                            {
                                <MudItem xs="12">
                                    <MudTextField ReadOnly="true" @bind-Value="MasterGuide.CustomerName" Adornment="Adornment.Start" AdornmentText="Cliente :" Variant="Variant.Text" Class="align-right-input"></MudTextField>
                                </MudItem>
                                <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterGuide.Id" Adornment="Adornment.Start" AdornmentText="Nro Doc :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                                <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterGuide.CreatedDate" Adornment="Adornment.Start" AdornmentText="Fecha :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                                <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterGuide.DeliveredDate" Adornment="Adornment.Start" AdornmentText="Entregado :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                                <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterGuide.ProviderName" Adornment="Adornment.Start" AdornmentText="Proveedor :" Variant="Variant.Text" Class="align-right-input" /></MudItem>                                
                                <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterGuide.Number" Label="Numero" Variant="Variant.Text" /></MudItem>
                            }

                        </MudGrid>
                    </MudForm>
                </MudPaper>
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center flex-grow-1">
                    <MudGrid Spacing="2">
                        <MudItem xs="12"><MudText Typo="Typo.h6" Color="Color.Info">Totales:</MudText></MudItem>
                        <MudItem xs="12"><MudTextField ReadOnly="true" Adornment="Adornment.Start" @bind-Value="UnitValue" AdornmentText="Unidad :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                        <MudItem xs="12"><MudTextField ReadOnly="true" Adornment="Adornment.Start" @bind-Value="BultoValue" AdornmentText="BULTOS :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                        <MudItem xs="12"><MudTextField ReadOnly="true" Adornment="Adornment.Start" @bind-Value="PesoValue" AdornmentText="PESO :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                    </MudGrid>
                </MudPaper>
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center flex-grow-0">
                    <MudStack Row="true" Spacing="2" Justify="Justify.FlexEnd" StretchItems="StretchItems.Start">
                        <MudFab StartIcon="@Icons.Material.Filled.CheckCircleOutline" Color="Color.Info" Size="Size.Small" Label="Generar" OnClick="GenerateClick" Disabled="@(!IsCreatedGuide)" />
                    </MudStack>
                </MudPaper>
            </MudStack>
        </MudItem>
    </MudGrid>
</div>

<style>
    .align-right-input input {
        text-align: right;
    }
</style>
@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Parameter] public int? Value { get; set; }
    [Parameter] public EventCallback<int?> ValueChanged { get; set; }
    DialogOptions options = new DialogOptions { MaxWidth = MaxWidth.Large, BackdropClick = false, NoHeader = true };

   
    int PartCurrentPage = 0;
    bool IsCreatedGuide = false; 
   
    
  

    private int? GuideId
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                ValueChanged.InvokeAsync(Value);
            }
        }
    }
    private int UnitValue = 0;
    private int BultoValue = 0;
    private double PesoValue = 0;


    private bool IsAllCheckBoxSelected = false;
    bool Loading = false;
    private Pages.Mobile.Models.Guide? MasterGuide;
    private MudDataGrid<Models.GuideDetails>? GuideDetailsMudDataGrid = new();
    private MudForm? form;
  

    private void getTotals(IEnumerable<Models.GuideDetails> data)
    {       
        UnitValue = data.Sum(x => x.Quantity) ?? 0;
        BultoValue = data.GroupBy(x => x.PackageId).Count();
        PesoValue = 0;
    }
    Func<Models.GuideDetails, object> GetSortKeySelector(string sortByPropertyName) => sortByPropertyName switch
    {
        nameof(Models.GuideDetails.PackageCode) => o => o.PackageCode ?? "",
        nameof(Models.GuideDetails.PartInnercode) => o => o.PartInnercode ?? "",
        nameof(Models.GuideDetails.PartDescription) => o => o.PartDescription ?? "",
        nameof(Models.GuideDetails.Quantity) => o => o.Quantity ?? 0,
        _ => null! //o => o.Id ?? 0 // Criterio de ordenación por defecto

    };

    private async Task<GridData<Models.GuideDetails>> ServerReload(GridState<Models.GuideDetails> state)
    {
        IsAllCheckBoxSelected = false;
        Loading = true;
        var totalItems = 0;
        var mOffset = state.Page * state.PageSize;
        IEnumerable<Models.GuideDetails> data;
        HttpResponseMessage response = await Http.GetAsync($"api/GetGuideWithContext?userId={Useful.userId}&supplierId={Useful.supplierId}&guideId={GuideId}");
        if (response.IsSuccessStatusCode)
        {
            var content2 = await response.Content.ReadFromJsonAsync<WebApiResponse<MasterGuideDetails>>();
            totalItems = content2!.total ?? 0;
            var masterGuideDetails = content2!.data ?? new MasterGuideDetails();
            MasterGuide = masterGuideDetails.Guide;
            data = masterGuideDetails.GuideDetails!;
            IsCreatedGuide = (MasterGuide!.StatusName!.ToUpper() == "CREADO");          
           
            getTotals(data);
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }
        if (state.SortDefinitions.FirstOrDefault() is SortDefinition<Models.GuideDetails> sortDefinition)
        {
            data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, GetSortKeySelector(sortDefinition.SortBy));
        }
        Loading = false;
        StateHasChanged();
        return new GridData<Models.GuideDetails> { TotalItems = totalItems, Items = data };
    }

    private void CloseClick() => GuideId = null;

    private async Task ClickAddGuideDetails(MouseEventArgs ev)
    {
        await Task.CompletedTask;
    }

    private async Task ClickRemoveGuideDetails(MouseEventArgs ev)
    {
        await Task.CompletedTask;
    }

    private async Task SaveClick(MouseEventArgs args)
    {
        await Task.CompletedTask;
    }
    private async Task GenerateClick(MouseEventArgs args)
    {
        await Task.CompletedTask;
    }

    private async Task DeleteMovementDetailAction(List<Models.Action>? actions)
    {
        await Task.CompletedTask;
    }
    private async Task ClickImportGuideDetails(MouseEventArgs args)
    {
        await Task.CompletedTask;
    }  

}