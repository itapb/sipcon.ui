@page "/maintenancedetail"
@page "/maintenancedetail/{IdMaintenance}"


@using Sipcon.WebApp.Client.Services
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Sipcon.WebApp.Client.Utils
@using Sipcon.WebApp.Client.Enum
@using FluentValidation
@using System.Globalization

@inject IMaintenanceService MaintenanceService
@inject IPolicyService PolicyService
@inject UtilModuleActions ModuleActionsService
@inject IAttachmentService AttachmentService
@inject ICommentService CommentService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime


<PageTitle>Mantenimiento</PageTitle>

<MudContainer>

    <MudStack Row="true">
        <CustomBreadcrumbs mItems="_itemsNavigate"></CustomBreadcrumbs>
        <MudSpacer />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.KeyboardReturn" Color="Color.Info" Href="maintenance" />
    </MudStack>

    <MudGrid>
        <MudItem xs="12" sm="12">

             <MudGrid Spacing="1" Justify="Justify.Center">
                @* ///Vehicle *@
                <MudItem xs="12" sm="4">
                    <MudCard Elevation="2">

                        <MudCardHeader Style="padding-bottom: 0px;">
                            <CardHeaderContent>

                                <MudGrid Spacing="0" Justify="Justify.Center">
                                    <MudItem xs="12" sm="8">
                                        <div class="d-flex justify-left">
                                            <MudStack Row="true">
                                                <MudIcon Icon="@Icons.Material.Filled.CarRental" Color="Color.Default" Style="font-size: 2rem;"></MudIcon>
                                                <MudText Typo="Typo.subtitle2">Vehiculo</MudText>

                                            </MudStack>
                                        </div>
                                    </MudItem>

                                    <MudItem xs="12" sm="4">



                                    </MudItem>
                                </MudGrid>


                            </CardHeaderContent>

                        </MudCardHeader>
                        <MudCardContent Style="padding-top: 0px;">
                            <MudHidden @bind-Value="@_model.VehicleId" />

                            <MudTextField Typo="Typo.caption" @bind-Value="@_model.Vin"
                                          Label="Vin"
                                          Variant="Variant.Text"
                                          Margin="Margin.None"
                                          ReadOnly="true"
                                           />


                            <MudStack Row="true">

                                <MudTextField Typo="Typo.caption" T="string" Text="@_model.Plate"
                                              Label="Placa"
                                              Variant="Variant.Text"
                                              Margin="Margin.None"
                                              ReadOnly="true"
                                               />

                                <MudTextField Typo="Typo.caption" T="string" Text="@_model.Year"
                                              Label="Año"
                                              Variant="Variant.Text"
                                              Margin="Margin.None"
                                              ReadOnly="true"
                                               />

                                <MudTextField Typo="Typo.caption" T="string" Text="@_modelPolicy.Color"
                                              Label="Color"
                                              Variant="Variant.Text"
                                              Margin="Margin.None"
                                              ReadOnly="true"
                                               />



                            </MudStack>

                            <MudTextField Typo="Typo.caption" T="string" Text="@_model.DealerServiceName"
                                          Label="Concesionario"
                                          Variant="Variant.Text"
                                          Margin="Margin.None"
                                          ReadOnly="true"
                                           />

                            <MudTextField Typo="Typo.caption" T="string" Text="@_model.ModelName"
                                          Label="Modelo"
                                          Variant="Variant.Text"
                                          Margin="Margin.None"
                                          ReadOnly="true"
                                           />


                        </MudCardContent>

                    </MudCard>
                </MudItem>

                @* ///Customer *@
                <MudItem xs="12" sm="4">
                    <MudCard Elevation="2">
                        <MudCardHeader Style="padding-bottom: 0px;">
                            <CardHeaderContent>

                                <MudGrid Spacing="0" Justify="Justify.Center">
                                    <MudItem xs="12" sm="6">
                                        <div class="d-flex justify-left">
                                            <MudStack Row="true">
                                                <MudIcon Icon="@Icons.Material.Filled.ManageAccounts" Color="Color.Default" Style="font-size: 2rem;"></MudIcon>
                                                <MudText Typo="Typo.subtitle2">Cliente</MudText>

                                            </MudStack>
                                        </div>
                                    </MudItem>

                                    <MudItem xs="12" sm="6">
                                        <div class="d-flex justify-end">
                                            <MudStack Row="true">

                                            </MudStack>
                                        </div>
                                    </MudItem>
                                </MudGrid>

                            </CardHeaderContent>

                        </MudCardHeader>
                        <MudCardContent Style="padding-top: 0px;">
                            <MudHidden @bind-Value="_modelPolicy.CustomerId" />


                            <MudTextField Typo="Typo.caption" T="string" Text="@_modelPolicy.Vat"
                                          Label="RIF"
                                          Variant="Variant.Text"
                                          Margin="Margin.None"
                                          ReadOnly="true"
                                           />

                            <MudStack Row="true">
                                <MudTextField Typo="Typo.caption" T="string" Text="@(_modelPolicy.LastName + " " + _modelPolicy.FirstName)"
                                              Label="Apellidos y Nombres"
                                              Variant="Variant.Text"
                                              Margin="Margin.None"
                                              ReadOnly="true"
                                               />
                            </MudStack>



                            <MudTextField Typo="Typo.caption" T="string" Text="@_modelPolicy.Phone"
                                          Label="Tel&eacute;fono"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Phone"
                                          Variant="Variant.Text"
                                          Margin="Margin.None"
                                          ReadOnly="true"
                                           />


                            <MudTextField Typo="Typo.caption" T="string" Text="@_modelPolicy.Email"
                                          Label="Email"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.MailOutline"
                                          Variant="Variant.Text"
                                          Margin="Margin.None"
                                          ReadOnly="true"
                                           />

                        </MudCardContent>

                    </MudCard>
                </MudItem>

                @* Datos Poliza *@
                <MudItem xs="12" sm="4">

                    <MudCard Elevation="2" Style="min-height:237px;">
                        <MudCardHeader>
                            <CardHeaderContent>

                                <MudGrid Spacing="0" Justify="Justify.Center">
                                    <MudItem xs="12" sm="8">


                                        <div class="d-flex justify-left">

                                            <MudStack Row="true">
                                                <MudIcon Icon="@Icons.Material.Filled.Policy" Color="Color.Default" Style="font-size: 1.8rem;"></MudIcon>
                                                <MudText Typo="Typo.subtitle2">Poliza</MudText>

                                            </MudStack>
                                        </div>
                                    </MudItem>

                                    <MudItem xs="12" sm="4">


                                    </MudItem>
                                </MudGrid>

                            </CardHeaderContent>
                            <CardHeaderActions>
                                @if (_modelPolicy.Id != 0)
                                {
                                    string style = "";

                                    if (_modelPolicy.EstatusName.ToUpper() == "CREADO")
                                        style += "";
                                    else if (_modelPolicy.EstatusName.ToUpper() == "ACTIVADO")
                                    {
                                        style += "color:#fff";
                                        style += ";background-color:#0099F3";
                                    }
                                    else if (_modelPolicy.EstatusName.ToUpper() == "APROBADO")
                                    {
                                        style += "color:#fff";
                                        style += ";background-color:#0099F3";
                                    }
                                    else if (_modelPolicy.EstatusName.ToUpper() == "PROCESADO")
                                    {
                                        style += "color:#fff";
                                        style += ";background-color:#757575";
                                    }
                                    else
                                    {
                                        style += "color:#fff";
                                        style += ";background-color:#FF7043";
                                    }
                                    style += ";font-weight:bold;font-size:10px";
                                    style += ";font-style:italic";


                                    <MudChip T="string" Style="@style" Label="true" >@_modelPolicy.EstatusName</MudChip>
                                }

                            </CardHeaderActions>

                        </MudCardHeader>
                        <MudCardContent Style="padding-top: 0px;">
                            <MudHidden @bind-Value="_model.Id" />
                            <MudHidden @bind-Value="IdMaintenance" />

                            <MudFlexBreak />

                            <div class="d-flex align-end justify-space-between mud-width-full">
                                <div class="d-flex flex-column">
                                    <MudText Typo="Typo.caption"><b>Nro. Poliza: </b> <MudText Typo="Typo.caption" Color="Color.Info">@(_modelPolicy.Id != 0 ? " #" + _model.NumberPolicy : "")</MudText></MudText>
                                    <MudDivider />
                                    @* <MudText Typo="Typo.caption"><b>Activacion: </b> @(_modelPolicy.ActivationDate is null ? "" : _modelPolicy.ActivationDate.Value.ToString("dd-MMM-yyyy"))</MudText>
                                    <MudText Typo="Typo.caption"><b>Bloqueada: </b> @(_modelPolicy.LockDate is null ? "" : _modelPolicy.LockDate.Value.ToString("dd-MMM-yyyy")) </MudText>
                                    <MudText Typo="Typo.caption"><b>Expiracion: </b> @(_modelPolicy.ExpirationDate is null ? "" : _modelPolicy.ExpirationDate.Value.ToString("dd-MMM-yyyy"))</MudText> *@
                                </div>

                            </div>

                            <div id="scroll_section_policydetail" class="ma-0" style="height:137px;overflow: auto;">
                                <MudContainer Class="dialog-background-surface py-1 pt-0 pa-1">
                                    <MudTimeline TimelinePosition="TimelinePosition.Start">
                              
                                        @foreach (var item in _policyDetail)
                                        {
                                            <MudTimelineItem TimelineAlign="TimelineAlign.End" Color="@(item.Valid == "PENDIENTE" ? Color.Info : Color.Default)" Size="Size.Small">
                                                <MudText Typo="Typo.body2" Style="font-size: 11px;">@item.Valid  <b>@(item.FromKm?.ToString("N0") + "-" + item.UpToKm?.ToString("N0") + " kms.") </b> </MudText>
                                                <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="font-size: 11px;">@("Km: " + item.KM?.ToString("N0") + "  -  " + item.Date?.ToString("dd MMM yyyy"))</MudText>
                                            </MudTimelineItem>
                                        }

                                    </MudTimeline>
                                </MudContainer>
                                <MudScrollToTop TopOffset="100"
                                                Selector="#scroll_section_policydetail"
                                                VisibleCssClass="visible absolute"
                                                HiddenCssClass="invisible">

                                </MudScrollToTop>
                            </div>
                        </MudCardContent>

                    </MudCard>

                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="7">

             <MudGrid Spacing="1" Justify="Justify.Center">

                @* Datos Servicio *@
                <MudItem xs="12" sm="12">
                    <MudCard Elevation="0">
                        <MudCardHeader Style="padding-bottom: 0px;">
                            <CardHeaderContent>
                                <MudStack Row="true">
                                    @* <MudIcon Icon="@Icons.Material.Outlined.CarRepair" Color="Color.Default" Style="font-size: 1.8rem;"></MudIcon> *@
                                    <MudText Typo="Typo.subtitle2">Datos Mantenimiento </MudText>

                                </MudStack>
                            </CardHeaderContent>

                        </MudCardHeader>

                        <MudCardContent Style="padding-top: 0px;">

                            <MudStack Row="true">
                                <MudIcon Icon="@Icons.Material.Filled.Speed" Color="Color.Info" Style="font-size: 2rem;"></MudIcon>


                                <MudNumericField Typo="Typo.caption" @bind-Value="_model.Km"
                                                 Style="line-height: 0.8rem;"
                                                 Label="Kilometraje"
                                                 Variant="Variant.Text"
                                                 Margin="Margin.None"
                                                 HideSpinButtons="true"
                                                 Format="N0" Culture="@CultureInfo.GetCultureInfo("de-DE")"
                                                 ReadOnly="true"
                                                  />

                                <MudDatePicker @bind-Date="_model.ServiceDate"
                                               Style="font-size: 14px;line-height: 0.8rem;"
                                               Label="Fecha Asistencia"
                                               Variant="Variant.Text"
                                               PickerVariant="PickerVariant.Inline"
                                               Margin="Margin.None"
                                               Modal="false"
                                               ShowToolbar="false"
                                               DateFormat="dd/MM/yyyy"
                                               Mask="@maskDate"
                                               ReadOnly="true"
                                                />

                                <MudNumericField Typo="Typo.caption" @bind-Value="_model.OrderNumber"
                                                 Label="Nro.Orden"
                                                 Style="line-height: 0.8rem;"
                                                 Variant="Variant.Text"
                                                 Margin="Margin.Dense"
                                                 HideSpinButtons="true"
                                                 Culture="@CultureInfo.GetCultureInfo("de-DE")"
                                                 ReadOnly="true"
                                                  />


                            </MudStack>
                                                       
                             <MudStack Row="true">
                                <MudDatePicker @bind-Date="_model.InvoiceDate"
                                               Style="font-size: 14px;line-height: 0.8rem;"
                                               Label="Fecha Factura"
                                               Variant="Variant.Text"
                                               PickerVariant="PickerVariant.Inline"
                                               Margin="Margin.None"
                                               Modal="false"
                                               ShowToolbar="false"
                                               DateFormat="dd/MM/yyyy"
                                               Mask="@maskDate"
                                               ReadOnly="true"
                                                />

                                <MudNumericField Typo="Typo.caption" @bind-Value="_model.InvoiceNumber"
                                                 Label="Nro.Factura"
                                                 Style="line-height: 0.8rem;"
                                                 Variant="Variant.Text"
                                                 Margin="Margin.Dense"
                                                 HideSpinButtons="true"
                                                 ReadOnly="true"
                                                  />
                             </MudStack> 

                            <MudDivider />

                            <MudTextField Typo="Typo.caption" @bind-Value="_model.DealerReport"
                                          Label="Reporte Concesionario"
                                                Lines="3"
                                                MaxLength="500"
                                                Variant="Variant.Text"
                                                Margin="Margin.None"
                                                ReadOnly="true"
                                                 />

                                 <MudTextField Typo="Typo.caption" @bind-Value="_model.SupplierReport"
                                                Label="Reporte Concesionario"
                                                Lines="3"
                                                MaxLength="500"
                                                Variant="Variant.Text"
                                                Margin="Margin.None"
                                                ReadOnly="true"
                                                 /> 

                                

                            

                        </MudCardContent>
                    </MudCard>
                </MudItem>

            </MudGrid>

        </MudItem>

        <MudItem xs="12" sm="5">
            <MudCard Elevation="0">
                <MudCardHeader Style="padding-bottom: 0px;">
                    <CardHeaderContent>
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Outlined.FileUpload" Color="Color.Default" Style="font-size: 1.8rem;"></MudIcon> 
                            <MudText Typo="Typo.subtitle2">Archivos Adjuntos </MudText>
                           
                        </MudStack>
                    </CardHeaderContent>

                </MudCardHeader>

                <MudCardContent Style="padding-top: 0px;">

                    <div id="unique_id_scroll_section" class="ma-0" style="height:230px;overflow: auto;">

                        <MudContainer Class="dialog-background-surface py-1 pt-0 pa-1">
                            <MudDivider />

                            @foreach (var item in _attachment)
                            {
                                <MudStack Row="true">
                                    <div class="rounded mud-paper-outlined d-flex align-center pa-1 ma-2">
                                        <MudIcon Icon="@Icons.Custom.FileFormats.FileDocument" Color="Color.Inherit" Class="mr-2" />
                                        @item.FileName
                                    </div>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Class="mt-2" Style="height: 29px;width: 29px;" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick="() => ClickDeleteAttachment(item.Id)" />
                                    <MudIconButton Icon="@Icons.Material.Outlined.FileDownload" Class="mt-2" Style="height: 29px;width: 29px;" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick="() => ClickExportAttachment(item.Id, item.FileName)" />
                                </MudStack>
                            }
                        </MudContainer>
                        <MudScrollToTop TopOffset="100"
                                        Selector="#unique_id_scroll_section"
                                        VisibleCssClass="visible absolute"
                                        HiddenCssClass="invisible">

                        </MudScrollToTop>
                    </div>


                    <MudFileUpload T="IBrowserFile" Accept=".pdf,.png,.pneg,.jpg,.jpeg" FilesChanged="ClickUploadFiles">
                        <ActivatorContent>
                            <MudDivider />

                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Info"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       FullWidth="true">
                                Upload Files
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>

                </MudCardContent>
            </MudCard>

        </MudItem>

        <MudItem xs="12" sm="8">
            <MudCard Elevation="0">
                <MudCardHeader Style="padding-bottom: 0px;">
                    <CardHeaderContent>
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Outlined.Message" Color="Color.Default" Style="font-size: 1.8rem;"></MudIcon>
                            <MudText Typo="Typo.subtitle2">Comentarios </MudText>

                        </MudStack>
                    </CardHeaderContent>

                </MudCardHeader>

                <MudCardContent Style="padding-top: 0px;">

                    <MudPaper Class="pa-4 mt-4">
                        <MudStack Row="true">
                            <MudTextField Typo="Typo.caption" @bind-Value="@_strComment"
                                          Label="Mensaje"
                                          Style="line-height: 8px;"
                                          Variant="Variant.Outlined"
                                          Margin="Margin.None"
                                          Required="true" />

                            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send"
                                       Style="height: 41px;margin-top: 9px;"
                                       Color="Color.Info"
                                       Size="Size.Small"
                                       OnClick="() => ClickAddComment()">Enviar</MudButton>
                        </MudStack>
                    </MudPaper>

                   
                    <div id="scroll_section_messages" class="ma-0" style="height:430px;overflow: auto;">

                        <MudContainer Class="dialog-background-surface py-1 pt-0 pa-1">
                            <MudDivider />

                            @if (_comment.Count > 0)
                            {

                                string index = _comment.OrderByDescending(x => x.DateComment).ToList().First().UserName.Substring(0, 1); 
                                string style = "padding-top: 20px;";
                                foreach (var item in _comment.OrderByDescending(x => x.DateComment).ToList())
                                {

                                    var position = index == item.UserName.Substring(0, 1) ? ChatBubblePosition.Start : ChatBubblePosition.End;

                                   
                                    <div class="d-flex align-start ma-2" style="@style">
                                        <MudChat ChatPosition="@position">
                                            <MudChatHeader Name="@(item.UserName + item.UserLastName)" Time="@item.DateComment.ToString("dd, MMM yyyy")" />
                                            <MudAvatar Color="Color.Secondary">@item.UserName.Substring(0, 1)</MudAvatar>
                                            <MudChatBubble Style="min-width:420px">@item.Content</MudChatBubble>
                                           @*  <MudChatFooter Text="Delivered" /> *@
                                        </MudChat>
                                    </div>

                                }
                            }
                        </MudContainer>
                        <MudScrollToTop TopOffset="100"
                                        Selector="#scroll_section_messages"
                                        VisibleCssClass="visible absolute"
                                        HiddenCssClass="invisible">

                        </MudScrollToTop>
                    </div>

                </MudCardContent>
            </MudCard>

        </MudItem>
    </MudGrid>
</MudContainer>

<MudDialog @bind-Visible="_nestedVisible">
    <TitleContent>
        <MudStack Row="true">
            <MudIcon Icon="@Icons.Material.Filled.CarRental" Color="@(_success? Color.Default: Color.Error)" Style="font-size: 2rem;"></MudIcon>
            <MudText Typo="Typo.h6">Vehiculo</MudText>
        </MudStack>
    </TitleContent>
    <DialogContent>

        <MudStack Row="true">
            <MudText Class="nested"><p>@_nestedErrorMessage!</p> </MudText>
        </MudStack>

    </DialogContent>
    <DialogActions>

        <MudButton Color="Color.Info" OnClick="CloseNested" Variant="Variant.Filled" Class="px-10">Ok</MudButton>

    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public string IdMaintenance { get; set; } = string.Empty;

    private Maintenance _model { get; set; } = new Maintenance();

    private Policy _modelPolicy { get; set; } = new Policy();
    private List<PolicyDetail> _policyDetail { get; set; } = new List<PolicyDetail>();
    private List<Attachment> _attachment { get; set; } = new List<Attachment>();
    private List<Comment> _comment { get; set; } = new List<Comment>();

    private string _moduleName = "SERVICIOS-MANTENIMIENTO";
    private int _iduser = 1; // Cambia esto por el ID del usuario que estás utilizando
    private int _idDealer = 5103;
    private string _nestedErrorMessage = string.Empty;
    private bool _nestedVisible;
    string _strComment = string.Empty;
    bool _success = false;


    IMask maskDate = new DateMask("dd/MM/yyyy");

    private List<BreadcrumbItem> _itemsNavigate =
                [
        new("Home", href: null, icon: Icons.Material.Filled.Home),
        new("Mantenimiento",  href: "maintenancedetail", disabled: false, icon: Icons.Material.Filled.CarCrash),
    ];


    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
        //TODO upload the files to the server
    }


    protected override async Task OnInitializedAsync()
    {

        await GetMaintenance();

        await Task.Delay(100);

        StateHasChanged();
        await Task.CompletedTask;

    }


    private async Task GetMaintenance()
    {

        var serviceResponse = await MaintenanceService.GetMaintenance(_iduser, _idDealer, Convert.ToInt32(IdMaintenance));
        if (serviceResponse.Processed)
        {
            _model = serviceResponse.Data ?? new Maintenance();
            await GetPolicyBy();

            await GetAttachments();

            await GetComments();
            
            await Task.Delay(50);
            StateHasChanged();
        }
        else
        {
            _model = new Maintenance();
            Console.WriteLine(serviceResponse.Message);
        }

    }

    private async Task GetPolicyBy()
    {

        _modelPolicy = new Policy();
        _policyDetail = new List<PolicyDetail>();
        var serviceResponse = await PolicyService.GetPolicyBy(_model.Vin, _iduser, SearchByEnum.VIN);
        if (serviceResponse.Processed)
        {
            _modelPolicy = serviceResponse.Data ?? new Policy();


            var serviceResponseDetail = await PolicyService.GetLogPolicyDetails(_modelPolicy.Id);
            if (serviceResponseDetail.Processed)
            {
                _policyDetail = serviceResponseDetail.Data ?? new List<PolicyDetail>();
            }

        }

        await Task.CompletedTask;


        await Task.Delay(50);
        StateHasChanged();
    }

    private async Task GetAttachments()
    {
        var serviceResponse = await AttachmentService.GetAttachments(_model.Id, _moduleName);
        if (serviceResponse.Processed)
        {
            _attachment = serviceResponse.Data ?? new List<Attachment>();

            await Task.Delay(50);
            StateHasChanged();
        }

        await Task.CompletedTask;
    }

    private async Task GetComments()
    {
        var serviceResponse = await CommentService.GetComments(_model.Id, _moduleName);
        if (serviceResponse.Processed)
        {
            _comment = serviceResponse.Data ?? new List<Comment>();

            await Task.Delay(50);
            StateHasChanged();
        }

        await Task.CompletedTask;
    }

    private async Task ClickDeleteAttachment(int IdAttachment)
    {
        var option = new DialogOptions
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            BackdropClick = false
        };
        bool? result = await DialogService.ShowMessageBox(
            "Archivos Adjuntos",
            $"Seguro de Eliminar Archivo? ",
            yesText: "Si", noText: "No", "", option);

        if (result == true)
        {

            var serviceResponse = await AttachmentService.DeleteAttachment(IdAttachment, _iduser);
            if (serviceResponse.Processed)
            {
                await GetAttachments();

                await Task.Delay(50);
                StateHasChanged();
            }

            await Task.CompletedTask;
        }
    }

    private async Task ClickExportAttachment(int IdAttachment, string FileName)
    {
        var serviceResponse = await AttachmentService.GetAttachment(IdAttachment, _iduser);
        if (serviceResponse.Processed)
        {
            _success = true;
            _nestedErrorMessage = "";

            var applicationName = string.Empty;
            var fileExtension = Path.GetExtension(FileName).ToLowerInvariant();
            switch (fileExtension)
            {
                case ".jpg":
                case ".jpeg":
                    applicationName = "image/jpeg";
                    break;
                case ".png":
                case ".pneg":
                    applicationName = "image/png";
                    break;
                case ".mp4":
                    applicationName = "video/mp4";
                    break;
                case ".pdf":
                    applicationName = "application/pdf";
                    break;
                default:
                    applicationName = "application/pdf";
                    break;
            }

            var base64File = Convert.ToBase64String(serviceResponse.Data.ToArray());
            var fileUrl = $"data:{applicationName};base64,{base64File}";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, FileName);

        }
        else
        {
            _success = false;
            _nestedErrorMessage = serviceResponse.Message ?? MessageEnum.ExportNotOK.GetStringValue();
            OpenNested();

        }
    }


    private async Task ClickUploadFiles(IBrowserFile file)
    {

        const long maxAllowedSize = 10 * 1024 * 1024; // 10MB
        if (file.Size == 0)
        {
            _success = false;
            _nestedErrorMessage = MessageEnum.ImportError.GetStringValue();
            OpenNested();
        }
        else if (file.Size > maxAllowedSize)
        {
            _success = false;
            _nestedErrorMessage = MessageEnum.ImportErrorMaxByte.GetStringValue();
            OpenNested();
        }
        else
        {
            using var stream = file.OpenReadStream(maxAllowedSize: maxAllowedSize);

            var content = new StreamContent(stream);
            content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

            // Create a multipart form data content
            var formData = new MultipartFormDataContent();
            formData.Add(content, "file", file.Name);


            var serviceResponse = await AttachmentService.CreateAttachment(_model.Id, _moduleName, _iduser, formData);
            if (serviceResponse.Processed)
            {
                _success = true;
                _nestedErrorMessage = MessageEnum.ImportOK.GetStringValue();

                await GetAttachments();

                StateHasChanged();

            }
            else
            {
                _success = false;
                _nestedErrorMessage = serviceResponse.Message ?? MessageEnum.ImportNotOK.GetStringValue();
                OpenNested();

            }
        }
    }

    private async Task ClickAddComment()
    {

        if (_strComment.Length >= 15)
        {
            await SendComment();

        }
        await Task.CompletedTask;

    }

    private async Task SendComment()
    {

        Comment _mensaje = new Comment
        {
            Id = 0,
            IsActive = true,
            Content = _strComment.Trim(),
            RecordId = _model.Id,
            ModuleName = _moduleName, // Cambia esto por el nombre Modulo
        };
        var serviceResponse = await CommentService.CreateComment(_mensaje, _iduser);
        if (serviceResponse.Processed)
        {
            _success = true;
            _nestedErrorMessage = MessageEnum.ImportOK.GetStringValue();

            _strComment = string.Empty;
            await GetComments();
        }
        else
        {
            _success = false;
            _nestedErrorMessage = serviceResponse.Message ?? MessageEnum.SaveNotOK.GetStringValue();
            Console.WriteLine(serviceResponse.Message);
            OpenNested();
        }

        StateHasChanged();
        await Task.CompletedTask;

    }


    private void OpenNested() => _nestedVisible = true;

    private void CloseNested() => _nestedVisible = false;

}
