@using Sipcon.WebApp.Client.Services
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Sipcon.WebApp.Client.Utils
@using Sipcon.WebApp.Client.Enum
@using FluentValidation
@using Microsoft.AspNetCore.Components

@inject IPolicyTypeService PolicyTypeService
@inject IDialogService DialogService
@inject UtilModuleActions ModuleActionsService


<MudForm Model="@_model" @ref="@form" Validation="@(_modelValidator.ValidateValue)" ValidationDelay="0" >
    <MudDialog Class="blur dialog-background" ActionsClass="dialog-background-surface">
        <DialogContent >
            <MudContainer Class="blur dialog-background-title py-2 pt-2 pa-2">

                <MudCard>

                    <MudCardContent>

                        <MudGrid Spacing="0" Justify="Justify.Center">
                            <MudItem xs="12" sm="4">
                                <div class="d-flex justify-left">

                                    <MudSwitch @bind-value="_model.IsActive" Label="Activo" LabelPlacement="Placement.End"
                                               Color="Color.Success" 
                                    UncheckedColor="Color.Default"
                                    Disabled="@(ActionsModal == ActionsEnum.Create ? true : false)" />
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="2">

                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <div class="d-flex justify-right" style="justify-content: end;">

                                    <MudButton OnClick="Cancel">Cancelar</MudButton>
                                    <MudFab StartIcon="@Icons.Material.Filled.Save" Label="Aceptar" OnClick="@(async () => await OnValidSubmit())" Color="Color.Info" Size="Size.Small" />

                                </div>


                            </MudItem>
                        </MudGrid>




                    </MudCardContent>

                </MudCard>

            </MudContainer>
            <MudContainer Class="dialog-background-surface py-2 pt-2 pa-2">
                <MudGrid Spacing="1" Justify="Justify.Center">

                    <MudItem xs="12" sm="4">
                        <MudCard>

                            <MudCardContent Style="padding-top: 0px;">
                                <MudHidden @bind-value="_model.Id" />
                                <MudHidden @bind-value="IdPolicyType" />
                                <div class="d-flex justify-center" >

                                    <MudTooltip Text="Tipo Poliza">
                                        <MudImage Src="images/changan_rojo_1.png" Alt="TipoPoliza" ObjectFit="ObjectFit.ScaleDown" Class="rounded-lg " FallbackSrc="Images/changan_emblema.png" Width="130" Height="159" />
                                    </MudTooltip>
                                </div>

                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="8">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.Policy" Color="Color.Default" Style="font-size: 2rem;"></MudIcon>
                                        <MudText Typo="Typo.h6">Tipo Poliza</MudText>

                                    </MudStack>

                                </CardHeaderContent>
                                <CardHeaderActions>

                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent Style="padding-top: 0px;">


                                <MudSelect @bind-Value="_model.BrandId" Label="Marca" AdornmentColor="Color.Default"
                                Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                For="@(() => _model.BrandId)"
                                Immediate="true">
                                    @foreach (var item in _brandList)
                                    {
                                        <MudSelectItem Value="@item.Value">@item.Text</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudTextField Typo="Typo.caption" @bind-Value="_model.Description" Label="Descripci&oacute;n"
                                Variant="Variant.Text"
                                Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                For="@(() => _model.Description)"
                                Immediate="true" />





                            </MudCardContent>

                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.CarCrash" Color="Color.Default" Style="font-size: 2rem;"></MudIcon>
                                        <MudText Typo="Typo.subtitle2">Cobertura Kilometraje</MudText>
                                    </MudStack>

                                </CardHeaderContent>
                                <CardHeaderActions>

                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent Style="padding-top: 0px;">

                                <MudStack Row="false">

                                    <MudNumericField Typo="Typo.caption" @bind-Value="_model.KM" Label="KM Frecuencia" Variant="Variant.Text"
                                    Max="10000"
                                    HideSpinButtons="true"
                                    Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                    For="@(() => _model.KM)"
                                    Immediate="true" />

                                    <MudNumericField Typo="Typo.caption" @bind-Value="_model.GapKM" Label="KM Tolerancia" Variant="Variant.Text"
                                    Max="500"
                                    HideSpinButtons="true"
                                    Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                    For="@(() => _model.GapKM)"
                                    Immediate="true" />

                                    <MudNumericField Typo="Typo.caption" @bind-Value="_model.TopKM" Label="KM Cobertura" Variant="Variant.Text"
                                    Max="200000"
                                    HideSpinButtons="true"
                                    Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                    For="@(() => _model.TopKM)"
                                    Immediate="true" />

                                </MudStack>

                            </MudCardContent>

                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Color="Color.Default" Style="font-size: 2rem;"></MudIcon>
                                        <MudText Typo="Typo.subtitle2">Cobertura Meses</MudText>
                                    </MudStack>

                                </CardHeaderContent>

                            </MudCardHeader>
                            <MudCardContent Style="padding-top: 0px;">


                                <MudStack Row="false">

                                    <MudNumericField Typo="Typo.caption" @bind-Value="_model.Months" Label="Meses Frecuencia" Variant="Variant.Text"
                                    Max="12"
                                    HideSpinButtons="true" 
                                    Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                    For="@(() => _model.Months)"
                                    Immediate="true" />

                                    <MudNumericField Typo="Typo.caption" @bind-Value="_model.GapMonths" Label="Dias Tolerancia" Variant="Variant.Text"
                                    Max="15"
                                    HideSpinButtons="true"
                                    Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                    For="@(() => _model.GapMonths)"
                                    Immediate="true" />

                                    <MudNumericField Typo="Typo.caption" @bind-Value="_model.TopMonths" Label="Meses Cobertura " Variant="Variant.Text"
                                    Max="120"
                                    HideSpinButtons="true"
                                    Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                    For="@(() => _model.TopMonths)"
                                    Immediate="true" />

                                </MudStack>



                            </MudCardContent>

                        </MudCard>
                    </MudItem>

                </MudGrid>
            </MudContainer>

            <MudDialog @bind-Visible="_nestedModalVisible">
                <TitleContent>
                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Filled.Policy" Color="@(_successModal ? Color.Default : Color.Error)" Style="font-size: 2rem;"></MudIcon>
                        <MudText Typo="Typo.h6">Tipo Poliza</MudText>
                    </MudStack>
                </TitleContent>
                <DialogContent>
                    <MudStack Row="true">
                        <MudText Class="nested"><p>@_errorModalMessage!</p> </MudText>
                    </MudStack>
                </DialogContent>
                <DialogActions>
                    <MudButton Color="Color.Info" OnClick="CloseNestedModal" Variant="Variant.Filled" Class="px-10">Ok</MudButton>
                </DialogActions>
            </MudDialog>

        </DialogContent>

    </MudDialog>
</MudForm>

<style>
    .blur {
    backdrop-filter: blur(10px);
    }

    .dialog-background {
    background-color: transparent;
    }

    .dialog-background-title {
    background: rgb(from var(--mud-palette-info-lighten) r g b / 50%);
    color: var(--mud-palette-white);
    }

    .dialog-background-surface {
    background: rgb(from var(--mud-palette-surface) r g b / 75%);
    }
</style>

@code {


    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public int IdPolicyType { get; set; }

    [Parameter]
    public ActionsEnum ActionsModal { get; set; }

    private MudForm? form;
    private PolicyType _model { get; set; } = new PolicyType();

    private string _errorModalMessage = string.Empty;
    private bool _nestedModalVisible;
    bool _successModal = false;


    private int _iduser = 1; // Cambia esto por el ID del usuario que estás utilizando

    private IEnumerable<SelectOption> _brandList { get; set; } = new List<SelectOption>();
    private IEnumerable<SelectOption> _policyTypeList { get; set; } = new List<SelectOption>();

    PolicyTypeValidator _modelValidator = new PolicyTypeValidator();



    protected override async Task OnInitializedAsync()
    {

        if (ActionsModal == ActionsEnum.Create)
        {
            _model = new PolicyType();
            _brandList = await ModuleActionsService.GetBrandOption(_iduser);
            _policyTypeList = await ModuleActionsService.GetPolicyTypeOption(_iduser);

            await Task.Delay(100);
        }
        else
        {
            await GetPolicyType();

        }

        StateHasChanged();
        await Task.CompletedTask;
    
    }


    private async Task GetPolicyType()
    {
        var serviceResponse = await PolicyTypeService.GetPolicyType(IdPolicyType, _iduser);
        if (serviceResponse.Processed)
        {
            _model = serviceResponse.Data ?? new PolicyType();

            _brandList = await ModuleActionsService.GetBrandOption(_iduser);
            _policyTypeList = await ModuleActionsService.GetPolicyTypeOption(_iduser);

            await Task.Delay(100);
            StateHasChanged();
        }
        else
        {
            _model = new PolicyType();
            _errorModalMessage = MessageEnum.GetError.GetStringValue();
            Console.WriteLine(serviceResponse.Message);
            OpenNested();
        }

        await Task.CompletedTask;

    }

    private async Task OnValidSubmit()
    {
        await form!.Validate();

        if (form.IsValid)
        {
            _errorModalMessage = "";

            var serviceResponse = await PolicyTypeService.UpdatePolicyType(_model, _iduser);
            if (serviceResponse.Processed)
            {
                if (ActionsModal == ActionsEnum.Create)
                {
                    ActionsModal = ActionsEnum.Edit;
                    var _results = serviceResponse.Data ?? new List<ActionResult>();
                    var _result = _results.FirstOrDefault();
                    if (_result is not null)
                    {
                        IdPolicyType = _result.LastId;
                        await GetPolicyType();
                    }
                }
                _errorModalMessage = MessageEnum.SaveOK.GetStringValue();
                _successModal = true;

            }
            else
            {
                _successModal = false;
                _errorModalMessage = MessageEnum.SaveNotOK.GetStringValue();
                Console.WriteLine(serviceResponse.Message);

            }
            OpenNested();
        }

        StateHasChanged();
        await Task.CompletedTask;

    }

    private void Cancel()
    {
        if (_successModal)
            MudDialog.Close(DialogResult.Ok(true));
        else
        {
            MudDialog!.Cancel();
        }
    }

    private void OpenNested() => _nestedModalVisible = true;

    private async Task CloseNestedModal()
    {
        _nestedModalVisible = false;

        await Task.Delay(50);
        MudDialog.Close(DialogResult.Ok(true));
        await Task.CompletedTask;

    }


    /// <summary>
    /// Validacion del formulario 
    /// </summary>
    /// <typeparam name="PolicyType"></typeparam>
    public class PolicyTypeValidator : AbstractValidator<PolicyType>
    {
        public PolicyTypeValidator()
        {

            RuleFor(x => x.Description)
                .NotEmpty().WithMessage("Campo requerido")
                .Length(5, 150).WithMessage("Campo requerido entre 5-150 carácteres");

            RuleFor(x => x.BrandId)
                .NotNull().WithMessage("Campo requerido")
                .GreaterThan(0).WithMessage("seleccione una Marca.");

            RuleFor(x => x.KM)
                .NotNull().WithMessage("Campo requerido")
                .NotEmpty().WithMessage("Campo requerido")
                .InclusiveBetween(1, 10000).WithMessage("Campo requerido entre {1 - 10.000} km");
            // .Custom((value, context) =>
                //   {
                //       if (value >= 1 && value <= 10000)
                //       {
                //           context.AddFailure($"Campo requerido entre {(DateTime.Now.Year - 20).ToString() + "-" + (DateTime.Now.Year + 5)}");
                //       }
                //   });

            RuleFor(x => x.GapKM)
                .NotNull().WithMessage("Campo requerido")
                .NotEmpty().WithMessage("Campo requerido")
                .InclusiveBetween(1, 500).WithMessage("Campo requerido entre {1 - 500} km"); 

            RuleFor(x => x.TopKM)
                .NotNull().WithMessage("Campo requerido")
                .NotEmpty().WithMessage("Campo requerido")
                .InclusiveBetween(1, 200000).WithMessage("Campo requerido entre {1 - 200.000} km");

            RuleFor(x => x.Months)
                .NotNull().WithMessage("Campo requerido")
                .NotEmpty().WithMessage("Campo requerido")
                .InclusiveBetween(1, 12).WithMessage("Campo requerido entre {1 - 12} Meses");

            RuleFor(x => x.GapMonths)
                .NotNull().WithMessage("Campo requerido")
                .NotEmpty().WithMessage("Campo requerido")
                .InclusiveBetween(1, 15).WithMessage("Campo requerido entre {1 - 200.000} dias");

            RuleFor(x => x.TopMonths)
                .NotNull().WithMessage("Campo requerido")
                .NotEmpty().WithMessage("Campo requerido")
                .InclusiveBetween(1, 120).WithMessage("Campo requerido entre {1 - 120} Meses ");


        }


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<PolicyType>.CreateWithOptions((PolicyType)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };

    }

}