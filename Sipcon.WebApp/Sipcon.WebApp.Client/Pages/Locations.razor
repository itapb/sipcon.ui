@page "/locations"
<MudBreadcrumbs Items="ItemsNavigate"></MudBreadcrumbs>
@* <MudText Typo="Typo.h5" GutterBottom="true">Ubicaciones</MudText> *@
@if (LocationId == null){
<InputFile OnChange="OnInputFileChange" accept=".xlsx" style="display:none" />

    <MudDataGrid @ref="LocationMudDataGrid" T="Location" ServerData="ServerReload" Filterable="false" FixedHeader Height="calc(100vh - 260px)" Loading="_loading" @bind-CurrentPage="LocationCurrentPage">
        <ToolBarContent>
            <MudIconButton Icon="@Icons.Material.Filled.AddCard" OnClick="ClickAddLocation" Color="Color.Info"></MudIconButton>
            <MudTextField T="string" Placeholder="Buscar" Adornment="Adornment.Start" ValueChanged="@(s=>OnSearch(s))" Value="searchString" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudSpacer />
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu">
                @foreach (var strmodulo in Modules!)
                {
                    <MudMenuItem Label="@strmodulo.ActionDisplay" Icon="@(strmodulo.ActionDisplay.ToActionIcon())" IconColor="@Color.Info" OnClick="@(() => ClickMenuLocation(strmodulo.ActionName))" />
                }
            </MudMenu>
        </ToolBarContent>
        <Columns>
            <TemplateColumn>
                <HeaderTemplate>
                    <MudCheckBox @bind-Value="IsAllCheckBoxSelected" @bind-Value:after="AfterAsyncAllCheck" />
                </HeaderTemplate>
                <CellTemplate>
                    <MudCheckBox @bind-Value="@context.Item.IsSelected" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Name" title="Nombre" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.ZoneName" title="Zona" />
            <PropertyColumn Property="x => x.WarehouseName" title="Almacen" />
            <TemplateColumn>
                <HeaderTemplate>
                    <MudText>Activo</MudText>
                </HeaderTemplate>
                <CellTemplate>
                    <MudIcon Icon="@(context.Item.IsActive ?? false ? Icons.Material.Filled.VerifiedUser : Icons.Material.Filled.Dangerous)" Color="@(context.Item.IsActive ?? false ? Color.Success : Color.Error)" Size="Size.Medium" />
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="()=> ClickEditLocation(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Location" PageSizeOptions="new int[] {100}" InfoFormat="{first_item}-{last_item} de {all_items}" RowsPerPageString="Registros por Pagina" />
        </PagerContent>
    </MudDataGrid>
} 
else
{
    <LocationForm @bind-Value="LocationId" />
}

@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    private int? LocationId;
    List<BreadcrumbItem> ItemsNavigate = [new("Home", href: "", icon: Icons.Material.Filled.Home), new("Inventario", href: "locations", icon: Icons.Material.Filled.Inventory), new("Ubicaciones", href: "locations", icon: Icons.Material.Filled.LocationOn)];
    string searchString = "";
    string mMessage = "Ubicaciones";   
    private int LocationCurrentPage = 0;
    bool _loading = true;
    bool IsAllCheckBoxSelected = false;      
    private MudDataGrid<Location>? LocationMudDataGrid;
    private List<Module>? Modules;

   
    protected override async Task OnInitializedAsync()
    {
        Modules = await Http.GetFromJsonAsync<List<Module>>($"api/Module/GetAll?moduleName=INVENTARIO-UBICACIONES&userId={Useful.userId}");
    }
    private async Task<GridData<Location>> ServerReload(GridState<Location> state)
    {
        IsAllCheckBoxSelected = false;
        _loading = true;
        var mOffset = state.Page * state.PageSize;
        var totalItems = 0;
        IEnumerable<Location> data;
        HttpResponseMessage response = await Http.GetAsync($"api/Location/GetAll?filter={searchString}&rowFrom={mOffset}&userId={Useful.userId}");

        if (response.IsSuccessStatusCode)
        {            
            var content2 = await response.Content.ReadFromJsonAsync<WebApiResponse<List<Location>>>();
            totalItems = content2!.total ?? 0;           
            data = content2!.data ?? new List<Location>(); ;
        }
        else
        {         
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }
        _loading = false;     

        return new GridData<Location> { TotalItems = totalItems, Items = data };
    }

    private async Task ClickMenuLocation(string? actionName)
    {
        if (actionName == "EXPORT")
        {
            _loading = true;
            var ResultZonas = await Http.GetAsync($"api/Location/Export?filter={searchString}&userId={Useful.userId}");
            if (ResultZonas.IsSuccessStatusCode)
            {
                var fileContent = await ResultZonas.Content.ReadAsByteArrayAsync();
                var base64File = Convert.ToBase64String(fileContent);
                var fileUrl = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{base64File}";
                await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, "Ubicaciones.xlsx");
            }
            _loading = false;
            return;
        }
        else if (actionName == "IMPORT")
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('[type=file]').click()");
            return;
        }
        var SelectedActions = (LocationMudDataGrid != null && ("ACTIVATE,DEACTIVATE".IndexOf(actionName!) > -1)) ?
                            (LocationMudDataGrid.FilteredItems.Where(item => item.IsSelected)
                                                             .Select(item => new Client.Models.Action
                                                                 {
                                                                     UserId = 1,
                                                                     RecordId = item.Id,
                                                                     ModuleId = Modules!.FirstOrDefault()?.Id,
                                                                     actionName = actionName,
                                                                     ActionComment = "",
                                                                     RelatedId = 0
                                                                 }).ToList()
                             ) : null;

        var result_Post_Actions = (SelectedActions is not null && SelectedActions.Count > 0) ? await Http.PostAsync("api/Location/PostActions?userId={Useful.userId}", new StringContent(System.Text.Json.JsonSerializer.Serialize(SelectedActions), null, "application/json")) : null;
        if (result_Post_Actions is not null && result_Post_Actions.IsSuccessStatusCode)
        {
            var resultAction = await result_Post_Actions.Content.ReadFromJsonAsync<WebApiResponse<List<PostResponse>>>();
            if  (resultAction?.data![0].updatedRows > 0)
            {
                await DialogService.ShowDialog("Ubicacion(es) Actualizado(s)!", "Ubicacion", "OK", Color.Info, Icons.Material.Filled.Commit);
                await LocationMudDataGrid!.ReloadServerData();
            }
            

        }
        await Task.CompletedTask;
       
    }

  
    private async Task AfterAsyncAllCheck()
    {
        if (LocationMudDataGrid != null)
            LocationMudDataGrid.FilteredItems.ToList().ForEach(item => item.IsSelected = IsAllCheckBoxSelected);
        await Task.CompletedTask;
    }
    private async Task OnSearch(string text)
    {
        if (text.Length == 0 || text.Length >= 3)
        {
            _loading = true;
            searchString = text;
            await LocationMudDataGrid!.ReloadServerData();
        }
    }
  
   private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 1)
        {
            var file = e.File;
            const long maxAllowedSize = 10 * 1024 * 1024; // 10MB
            if (file.Size == 0)
            {
                await DialogService.ShowDialog("Archivo esta vacio", "Error de Archivo", "OK", Color.Error, Icons.Material.Filled.Error);
            }
            else if (file.Size > maxAllowedSize)
            {
                await DialogService.ShowDialog("Tamaño del archivo excede el limite maximo permitido de 10MB.", "Error de Archivo", "OK", Color.Error, Icons.Material.Filled.Error);
            }
            else
            {
                using var stream = file.OpenReadStream(maxAllowedSize: maxAllowedSize);

                var content = new StreamContent(stream);
                content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

                // Create a multipart form data content
                var formData = new MultipartFormDataContent();
                formData.Add(content, "file", file.Name);
                _loading = true;

                var response = await Http.PostAsync($"api/Location/Import?userId={Useful.userId}", formData);
                if (response.IsSuccessStatusCode)
                {
                    await DialogService.ShowDialog("Archivo cargado con exito!.", "Ubicaciones", "OK", Color.Info, Icons.Material.Filled.Commit);
                    await LocationMudDataGrid!.ReloadServerData();
                }
                else
                {
                    await DialogService.ShowDialog("Carga de archivo fallo!", "Error al cargar", "OK", Color.Error, Icons.Material.Filled.Error);
                    _loading = false;
                }
            }
        }
        await Task.CompletedTask;
    }
    private async Task OpenLocationForm(int? mId) => await DialogService.OpenForm<LocationForm, Location>(mId, LocationMudDataGrid);
    // private async Task ClickAddLocation(MouseEventArgs ev)
    // {
    //     LocationId = 0;
    //     await Task.CompletedTask;
    // }
    // private async Task ClickEditLocation(Location item)
    // {
    //     LocationId = item.Id;
    //     await Task.CompletedTask;
    // }
   
    private async Task ClickAddLocation(MouseEventArgs ev) => await OpenLocationForm(0);
    private async Task ClickEditLocation(Location item) => await OpenLocationForm(item.Id);
}