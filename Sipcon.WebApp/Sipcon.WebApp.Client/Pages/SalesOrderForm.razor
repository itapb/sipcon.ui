<div id="scrollableGridContentStyled" style="overflow-y: auto;  padding: 8px; background-color: #f0f0f0;">
    <MudGrid Spacing="2">
        <MudItem xs="12" sm="9">
            <MudStack>
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center">
                    <MudStack Row="true" Spacing="2">
                        <MudFab StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" Label="Guardar" OnClick="SaveClick" Disabled="@(!IsCreatedSalesOrder)"></MudFab>
                        <MudButton OnClick="CloseClick">Cerrar</MudButton>
                    </MudStack>
                </MudPaper>
                <MudPaper Elevation="2" Style="height: 100%;">
                    <MudDataGrid @ref="SalesOrderDetailsMudDataGrid" T="SaleOrderDetails" ServerData="ServerReload" Filterable="false" FixedHeader Height="calc(100vh - 262px)" Loading="Loading" @bind-CurrentPage="PartCurrentPage">
                        <ToolBarContent>
                            <MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd" Size="Size.Medium" OnClick="ClickAddSalesOrderDetails" Color="Color.Info" Disabled="@(!IsCreatedSalesOrder)"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.PlaylistRemove" Size="Size.Medium" OnClick="ClickRemoveSalesOrderDetails" Color="Color.Info" Disabled="@(!IsCreatedSalesOrder)"></MudIconButton>                          
                        </ToolBarContent>
                        <Columns>
                            <TemplateColumn>
                                <HeaderTemplate>
                                    <MudCheckBox @bind-Value="IsAllCheckBoxSelected" @bind-Value:after="AfterAsyncAllCheck" />
                                </HeaderTemplate>
                                <CellTemplate>
                                    <MudCheckBox @bind-Value="context.Item.IsSelected" />
                                </CellTemplate>
                            </TemplateColumn>
                            <PropertyColumn Property="x => x.PartInnerCode" Title="COD REPUESTO" />
                            <PropertyColumn Property="x => x.PartName" Title="DESCRIPCION" />
                            <PropertyColumn Property="x => x.Price" Title="PRECIO" />
                            <PropertyColumn Property="x => x.Quantity" Title="CANTIDAD" />
                            <TemplateColumn StickyRight="true">
                                <CellTemplate>
                                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="() => ClickEditSalesOrderDetail(context.Item)" Disabled="@(!IsCreatedSalesOrder)" />
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </MudPaper>
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="3">
            <MudStack Style="height: 100%; ">
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center flex-grow-1">
                    <MudForm @ref="form">
                        <MudGrid Spacing="2">
                            <MudItem xs="12"><MudText Typo="Typo.h6" Color="Color.Info">Datos Generales:</MudText></MudItem>
                            @if (MasterSalesOrder == null)
                            {
                                <MudItem xs="12"><MudTextField T="string" ReadOnly="true" Value="@("Cargando..")" Variant="Variant.Text" /></MudItem>
                            }
                            else
                            {
                                <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterSalesOrder.DealerName" Adornment="Adornment.Start" AdornmentText="Concesionario :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                                <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterSalesOrder.SupplierName" Adornment="Adornment.Start" AdornmentText="Planta :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                                <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterSalesOrder.Id" Adornment="Adornment.Start" AdornmentText="Nro Doc :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                                <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterSalesOrder.Created" Adornment="Adornment.Start" AdornmentText="Fecha :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                                <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterSalesOrder.CreatedBy" Adornment="Adornment.Start" AdornmentText="Usuario :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                                <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterSalesOrder.StatusName" Adornment="Adornment.Start" AdornmentText="Estatus :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                                <MudItem xs="12">
                                    <MudSelect T="SaleOrderType" Label="Tipo :" ToStringFunc="@ConvertSaleOrderTypeFunc" Required="true" ValueChanged="OnSaleOrderTypeValueChanged" RequiredError="Campo requerido." Value="SaleOrderTypeSelected" Disabled="@(!IsCreatedSalesOrder)">
                                        @foreach (var saleordertype in SaleOrderTypes!)
                                        {
                                            <MudSelectItem Value="saleordertype" />
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12"><MudTextField ReadOnly="@(!IsCreatedSalesOrder)" @bind-Value="MasterSalesOrder.Reference" Label="Referencia" Variant="Variant.Text" RequiredError="Campo requerido." Required="@(SaleOrderTypeSelected.Id == 1)" /></MudItem>
                                <MudItem xs="12"><MudTextField ReadOnly="@(!IsCreatedSalesOrder)" @bind-Value="MasterSalesOrder.Comment" Label="Comentario" Variant="Variant.Text" /></MudItem>
                            }

                        </MudGrid>
                    </MudForm>
                </MudPaper>
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center flex-grow-1">
                    <MudGrid Spacing="2">
                        <MudItem xs="12"><MudText Typo="Typo.h6" Color="Color.Info">Totales:</MudText></MudItem>
                        <MudItem xs="12"><MudTextField ReadOnly="true" Adornment="Adornment.Start" @bind-Value="UnitValue" AdornmentText="Unidad :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                        <MudItem xs="12"><MudTextField ReadOnly="true" Adornment="Adornment.Start" @bind-Value="ProductValue" AdornmentText="Productos :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                        <MudItem xs="12"><MudTextField ReadOnly="true" Adornment="Adornment.Start" @bind-Value="CostValue" AdornmentText="Precio :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                    </MudGrid>
                </MudPaper>
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center flex-grow-0">
                    <MudStack Row="true" Spacing="2" Justify="Justify.FlexEnd" StretchItems="StretchItems.Start">
                        <MudFab StartIcon="@Icons.Material.Filled.CheckCircleOutline" Color="Color.Info" Size="Size.Small" Label="Generar" OnClick="GenerateClick" Disabled="@(!IsCreatedSalesOrder)" />
                    </MudStack>
                </MudPaper>
            </MudStack>
        </MudItem>
    </MudGrid>
</div>

<style>
    .align-right-input input {
        text-align: right;
    }
</style>
@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Parameter] public int? Value { get; set; }
    [Parameter] public EventCallback<int?> ValueChanged { get; set; }
    [Parameter] public List<SaleOrderType>? SaleOrderTypes { get; set; }
    DialogOptions options = new DialogOptions { MaxWidth = MaxWidth.Large, BackdropClick = false, NoHeader = true };

    string TempReference = "";
    int PartCurrentPage = 0;
    bool IsCreatedSalesOrder = false;


    private int? SalesOrderId
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                ValueChanged.InvokeAsync(Value);
            }
        }
    }
    private int UnitValue = 0;
    private int ProductValue = 0;
    private decimal CostValue = 0;
    private bool IsAllCheckBoxSelected = false;
    bool Loading = false;
    private SaleOrder? MasterSalesOrder;
    private MudDataGrid<SaleOrderDetails>? SalesOrderDetailsMudDataGrid = new();
    private MudForm? form;


    private SaleOrderType? SaleOrderTypeSelected;
    private Func<SaleOrderType?, string> ConvertSaleOrderTypeFunc = saleordertype => saleordertype?.Name!;



    private async Task AfterAsyncAllCheck()
    {
        SalesOrderDetailsMudDataGrid?.FilteredItems.ToList().ForEach(item => item.IsSelected = IsAllCheckBoxSelected);
        await Task.CompletedTask;
    }
    private async Task ClickEditSalesOrderDetail(SaleOrderDetails item)
    {        
        NewSalesOrderDetails AnewSalesOrderrDetail = new NewSalesOrderDetails
        {
            Id = item.Id,
            PartId = item.PartId,                                            
            Quantity = item.Quantity ,
            IsActive = item.IsActive ?? false,
            SaleOrderId = SalesOrderId

        };
        var dialogReference = await DialogService.ShowAsync(typeof(PartToSalesOrderDetails), "", new DialogParameters { ["newSaleOrderDetails"] = AnewSalesOrderrDetail }, options);
        if (!((await dialogReference.Result)!.Canceled))
            await SalesOrderDetailsMudDataGrid!.ReloadServerData();
    }

    private void getTotals(IEnumerable<SaleOrderDetails> data)
    {       
        UnitValue = data.Sum(x => x.Quantity) ?? 0;
        ProductValue = data.Count();
        CostValue = data.Sum(x => x.SubTotal) ?? 0m;
    }
    Func<SaleOrderDetails, object> GetSortKeySelector(string sortByPropertyName) => sortByPropertyName switch
    {
        nameof(SaleOrderDetails.PartInnerCode) => o => o.PartInnerCode ?? "",
        nameof(SaleOrderDetails.PartName) => o => o.PartName ?? "",        
        nameof(SaleOrderDetails.Price) => o => o.Price ?? 0,
        nameof(SaleOrderDetails.Quantity) => o => o.Quantity ?? 0,        
        _ => null! //o => o.Id ?? 0 // Criterio de ordenación por defecto
    };

    private async Task<GridData<SaleOrderDetails>> ServerReload(GridState<SaleOrderDetails> state)
    {
        IsAllCheckBoxSelected = false;
        Loading = true;
        var totalItems = 0;
        var mOffset = state.Page * state.PageSize;
        IEnumerable<SaleOrderDetails> data;
        HttpResponseMessage response = await Http.GetAsync($"api/SaleOrder/GetOneWithContext?userId={Useful.userId}&saleOrderId={SalesOrderId}");
        if (response.IsSuccessStatusCode)
        {
            var content2 = await response.Content.ReadFromJsonAsync<WebApiResponse<MasterSalesOrderDetails>>();
            totalItems = content2!.total ?? 0;
            var masterSalesOrderDetails = content2!.data ?? new MasterSalesOrderDetails();
            MasterSalesOrder = masterSalesOrderDetails.SaleOrder;
            data = masterSalesOrderDetails.Details!;
            IsCreatedSalesOrder = (MasterSalesOrder!.StatusName == "CREADO");    
            TempReference = MasterSalesOrder!.Reference ?? "";
            getTotals(data);

            SaleOrderTypeSelected = SaleOrderTypes?.FirstOrDefault(x => x.Id == masterSalesOrderDetails?.SaleOrder!.TypeId);
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }
        if (state.SortDefinitions.FirstOrDefault() is SortDefinition<SaleOrderDetails> sortDefinition)
        {
            data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, GetSortKeySelector(sortDefinition.SortBy));
        }
        Loading = false;
        StateHasChanged();
        return new GridData<SaleOrderDetails> { TotalItems = totalItems, Items = data };
    }

    private void CloseClick() => SalesOrderId = null;

    private async Task ClickAddSalesOrderDetails(MouseEventArgs ev)
    {
        var dialogReference = await DialogService.ShowAsync(typeof(SalesOrderPartsCatalog), "", new DialogParameters { ["SalesOrderId"] = MasterSalesOrder!.Id }, options);
        if ((await dialogReference.Result) is DialogResult dialogResult && !dialogResult.Canceled)
            await SalesOrderDetailsMudDataGrid!.ReloadServerData();
    }
    record SalesOrderItem(int? Id);
    private async Task ClickRemoveSalesOrderDetails(MouseEventArgs ev)
    {
        var mActions = SalesOrderDetailsMudDataGrid?.FilteredItems.Where(item => item.IsSelected)
                                                     .Select(item => new SalesOrderItem(item.Id)).ToList();
        if (mActions?.Count > 0)
            await DeleteSalesOrderDetailAction(mActions);
    }

    private async Task SaveClick(MouseEventArgs args)
    {
        await form!.Validate();
        if (form.IsValid)
        {
            var strMasterMovement = System.Text.Json.JsonSerializer.Serialize(MasterSalesOrder);
            var result_MasterMovement = await Http.PostAsync($"api/SaleOrder/PostSaleOrder?userId={Useful.userId}", new StringContent($"[{strMasterMovement}]", null, "application/json"));
            if (result_MasterMovement.IsSuccessStatusCode)
            {
                var sucessContent = await result_MasterMovement.Content.ReadFromJsonAsync<WebApiResponse<List<PostResponse>>>();
                if (sucessContent?.data![0] is ({ insertedRows: 1 } or { updatedRows: 1 }))
                {
                    var result = await DialogService.ShowDialog(Useful.OkSavedMessage, "Guardar", "OK", Color.Info, Icons.Material.Filled.Commit);
                    if (!result!.Canceled)
                        SalesOrderId = null;                    
                }
            }
            else if (result_MasterMovement.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                var conflictContent = await result_MasterMovement.Content.ReadFromJsonAsync<WebApiResponse<Object?>>();
                await DialogService.ShowDialog(conflictContent?.message!, "Error", "OK", Color.Error, Icons.Material.Filled.Error);
            }
            else
            {
                var errorMessage = await result_MasterMovement.Content.ReadAsStringAsync();
                throw new Exception(errorMessage);
            }
        }
    }
    private async Task GenerateClick(MouseEventArgs args)
    {
        var SelectedActions = SalesOrderDetailsMudDataGrid?.FilteredItems.Count() > 0 ?
                              new Client.Models.Action
                              {
                                  UserId = Useful.userId,
                                  RecordId = SalesOrderId,
                                  ModuleId = 31,
                                  actionName = "GENERATE",
                                  ActionComment = "",
                                  RelatedId = 0
                              }
                              : null;

        if (SelectedActions is null)
        {
            await DialogService.ShowDialog("No hay detalles para generar pedido.", "Error", "OK", Color.Error, Icons.Material.Filled.Error);
            return;
        }

        await form!.Validate();
        var IsSuccess = false;
        if (form.IsValid)
        {
            var strMasterSalesOrder = System.Text.Json.JsonSerializer.Serialize(SelectedActions);
            var result_MasterMovement = await Http.PostAsync($"api/SaleOrder/PostActions?userId={Useful.userId}", new StringContent($"[{strMasterSalesOrder}]", null, "application/json"));
            if (result_MasterMovement.IsSuccessStatusCode)
            {
                var sucessContent = await result_MasterMovement.Content.ReadFromJsonAsync<WebApiResponse<List<PostResponse>>>();
                IsSuccess = (sucessContent?.data![0] is ({ insertedRows: 1 } or { updatedRows: 1 }));
                if (IsSuccess)
                {
                    var result = await DialogService.ShowDialog(Useful.OkSavedMessage, "Generar", "OK", Color.Info, Icons.Material.Filled.Commit);
                    if (!result!.Canceled)
                        SalesOrderId = null;
                }
            }
            else if (result_MasterMovement.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                var conflictContent = await result_MasterMovement.Content.ReadFromJsonAsync<WebApiResponse<Object?>>();
                await DialogService.ShowDialog(conflictContent?.message!, "Error", "OK", Color.Error, Icons.Material.Filled.Error);
            }
            else
            {
                var errorMessage = await result_MasterMovement.Content.ReadAsStringAsync();
                throw new Exception(errorMessage);
            }
        }

        if (!IsSuccess)
        {
            return;
        }


        var strMovementActions = System.Text.Json.JsonSerializer.Serialize(SelectedActions);
        var result_PostMovementActions = (SelectedActions is not null) ? await Http.PostAsync($"api/Movements/PostMovementActions?userId={SelectedActions.UserId}", new StringContent($"[{strMovementActions}]", null, "application/json")) : null;
        if ((result_PostMovementActions?.IsSuccessStatusCode ?? false))
        {
            var rest = result_PostMovementActions.Content.ReadAsStringAsync();
            await DialogService.ShowDialog(Useful.OkSavedMessage, "Accion", "OK", Color.Info, Icons.Material.Filled.Commit);
            SalesOrderId = null;
        }
    }

    private async Task DeleteSalesOrderDetailAction(List<SalesOrderItem>? actions)
    {
        var result_Post_Actions = (actions?.Count > 0) ? await Http.PostAsync($"api/SaleOrder/DeleteDetails?userId={Useful.userId}", new StringContent(System.Text.Json.JsonSerializer.Serialize(actions), null, "application/json")) : null;
        if ((result_Post_Actions?.IsSuccessStatusCode ?? false))
        {
            //var rest = result_Post_Actions.Content.ReadAsStringAsync();
            await DialogService.ShowDialog(Useful.OkSavedMessage, "Remover", "OK", Color.Info, Icons.Material.Filled.Commit);
            await SalesOrderDetailsMudDataGrid!.ReloadServerData();
        }
        else if (result_Post_Actions?.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            var conflictContent = await result_Post_Actions.Content.ReadFromJsonAsync<WebApiResponse<Object?>>();
            await DialogService.ShowDialog(conflictContent?.message!, "Error", "OK", Color.Error, Icons.Material.Filled.Error);
        }
        else
        {
            var errorMessage = await result_Post_Actions!.Content.ReadAsStringAsync() ?? "";
            throw new Exception(errorMessage);
        }
    }
        
    private async Task OnSaleOrderTypeValueChanged(SaleOrderType selectedSaleOrderType)
    {
        SaleOrderTypeSelected = selectedSaleOrderType;
        MasterSalesOrder!.TypeId = selectedSaleOrderType.Id;
        MasterSalesOrder.TypeName = selectedSaleOrderType.Name;
        await Task.CompletedTask;
    }
}
