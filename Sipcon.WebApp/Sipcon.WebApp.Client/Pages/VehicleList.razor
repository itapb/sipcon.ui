@page "/vehicles"


@using Sipcon.WebApp.Client.Models
@using Sipcon.WebApp.Client.Services
@using Sipcon.WebApp.Client.Utils
@using Sipcon.WebApp.Client.Enum


@inject IVehicleService VehicleService
@inject IDialogService DialogService
@inject UtilModuleActions ModuleActionsService



<PageTitle>Vehiculos</PageTitle>


<MudBreadcrumbs Items="_itemsNavigate"></MudBreadcrumbs>
<MudText Typo="Typo.h5" GutterBottom="true">Vehiculos</MudText>
<MudText Typo="Typo.body1" Class="mb-8">Administrar Vehiculos.</MudText>

@if (_errorMessage == string.Empty)
{
    <MudDataGrid T="Vehicle"
    MultiSelection="true" 
    Items="@_Vehicles"
    SelectedItems="@_selectedVehicles"

    SortMode="SortMode.Multiple"
    Filterable="true"
    Hideable="true"
    Loading="_loading"
    ReadOnly="@_readOnly"
    EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    Bordered="true"
    Dense="true"
    EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">

        <ToolBarContent>
            <MudIconButton Icon="@Icons.Material.Filled.AddCard" OnClick="() => ClickAddVehicle()"></MudIconButton>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" OnKeyDown="HandleKeyDownSearch"></MudTextField>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Success" OnClick="() => HandleOnClickRefresh()" />
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu">
                @foreach (var module in _itemsModules)
                {
                    <MudMenuItem Icon="@(module.Icon ?? "")" IconColor="@module.Color"
                    Label="@module.Text"

                    OnClick="() => HandleMenuClick(module)" />

                }
            </MudMenu>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="Vehicle" />

            <TemplateColumn T="Vehicle" Title="Marca">
                <CellTemplate>
                    @if (context.Item.BrandId == 1)
                    {
                        <div class="d-flex justify-center" style="height: 45px;">

                            <MudTooltip Text="@context.Item.BrandName">
                                <MudImage Src="Images/changan_marca.jpeg" ObjectFit="ObjectFit.ScaleDown" Class="rounded-lg " FallbackSrc="Images/changan_emblema.png" Height="45" Width="55"></MudImage>
                            </MudTooltip>
                        </div>


                    }
                    else
                    {
                        <div class="d-flex justify-center" style="height: 45px;">
                            <MudTooltip Text="@context.Item.BrandName">
                                <MudImage Src="Images/foton_marca.jpeg " ObjectFit="ObjectFit.ScaleDown" Class="rounded-lg " FallbackSrc="Images/foton_emblema.jpeg" Height="45" Width="35"></MudImage>
                            </MudTooltip>
                        </div>

                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Vehicle" Title="VIN">
                <CellTemplate>

                    <MudStack Row="false">
                        <MudText Typo="Typo.caption" ><b>VIN :</b> <MudText Typo="Typo.caption" Inline="true" Color="Color.Primary">@context.Item.Vin</MudText></MudText>
                        <MudText Typo="Typo.caption" Align="Align.Start"><b>Placa :</b> @context.Item.Plate</MudText>
                    </MudStack>

                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Year" Title="Año" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.ColorName" Title="Color" Sortable="false" Filterable="false" />
            @* <PropertyColumn Property="x => x.ModelName" Title="Modelo" Sortable="false" Filterable="false" /> *@
            <TemplateColumn T="Vehicle" Title="Modelo">
                <CellTemplate>
                    <MudChip T="string" Variant="Variant.Text">
                        <AvatarContent>
                            <MudAvatar Size="Size.Small">
                                <MudImage Src="Images/changan_rojo_1.png"></MudImage>
                            </MudAvatar>
                        </AvatarContent>
                        <ChildContent>@context.Item.ModelName</ChildContent>
                    </MudChip>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.SupplierName" Title="Planta" Sortable="false" Filterable="false" />


            <TemplateColumn T="Vehicle" Title="Estatus">
                <CellTemplate>
                    @if (context.Item.IsActive == true)
                    {
                        <MudChip T="string" Icon="@Icons.Material.Filled.VerifiedUser" Color="Color.Success" Size="Size.Small">Activo</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Icon="@Icons.Material.Filled.Dangerous" IconColor="Color.Error" Size="Size.Small">Inactivo</MudChip>
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text" Color="Color.Default" Size="Size.Small" OnClick="() => ClickEditVehicle(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Model" />
        </PagerContent>
    </MudDataGrid>

    <MudDialog @bind-Visible="_nestedVisible">
        <DialogContent>

            @if (_success)
            {
                <MudText Class="nested" >@_nestedErrorMessage</MudText>
            }
            else
            {
                <MudText Class="nested" Color="Color.Warning">@_nestedErrorMessage!</MudText>
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CloseNested">Cerrar</MudButton>
        </DialogActions>
    </MudDialog>



}
else
{
    <p class="text-danger">@_errorMessage</p>

}


@code {
    private IEnumerable<Vehicle> _Vehicles = new List<Vehicle>();
    private string _errorMessage = string.Empty;
    private string _nestedErrorMessage = string.Empty;
    private bool _nestedVisible;
    bool _success = false;

    private int _rowCount = 0;
    private int _pageSize = 100;
    private int _pageNumber = 1;
    private int _iduser = 1; // Cambia esto por el ID del usuario que estás utilizando
    private string _filter = string.Empty; // Cambia esto
    private int _rowsTotal = 0; 

    private bool _readOnly = false;
    private bool _isCellEditMode = false;
    private bool _editTriggerRowClick = false;
    private string _searchString = string.Empty;
    private bool _loading = true;
    private string _moduleName = "VEHICULOS-VEHICULOS";


    private HashSet<Vehicle> _selectedVehicles = new([]);
    private IEnumerable<Module> _Modules { get; set; } = new List<Module>();
    private List<ModuleAction> _itemsModules = new List<ModuleAction>([]);

    private List<BreadcrumbItem> _itemsNavigate =
    [
        new("Home",href: "#", icon: Icons.Material.Filled.Home),
        new("Vehicles",  href: null, disabled: true, icon: Icons.Material.Filled.CardTravel),
    ];


    protected override async Task OnInitializedAsync()
    {

        await GetVehicles();

    }

    private async Task GetVehicles()
    {
        _filter = _searchString;
        var serviceResponse = await VehicleService.GetVehicles(_iduser, _rowCount, _filter);
        if (serviceResponse.Processed)
        {
            _Vehicles = serviceResponse.Data;

            _rowsTotal = serviceResponse.Total;
            _loading = false;

            if (_Vehicles.Count() > 0)
            {
                _itemsModules = await ModuleActionsService.GetModuleActions(_iduser, _moduleName);
            }
            else { _itemsModules = new List<ModuleAction>([]); }


        }
        else
        {
            Console.WriteLine(serviceResponse.Message);
            _errorMessage = "No se encontraron Vehiculos.";
        }

    }

    private async Task HandleKeyDownSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (_searchString.Length > 4 || _searchString == string.Empty)
            {
                Console.WriteLine($"Buscando: {_searchString}");
                _filter = _searchString;
                await GetVehicles();
            }

        }
    }

    private async Task HandleOnClickRefresh()
    {

        Console.WriteLine($"Buscando: {_searchString}");
        _filter = string.Empty;
        _searchString = string.Empty;
        await GetVehicles();

    }


    private async Task ClickEditVehicle(Vehicle item)
    {

        DialogOptions options = new() { BackdropClick = false, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = false };
        var parameters = new DialogParameters<VehicleDialog> { { x => x.IdVehicle, item.Id }, { x => x.ActionsModal, ActionsEnum.Edit } };
        var dialog = await DialogService.ShowAsync<VehicleDialog>("simple dialog", parameters, options);
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            await GetVehicles();
            StateHasChanged();
        }

        await Task.CompletedTask;
    }


    private async Task ClickAddVehicle()
    {

        DialogOptions options = new() { BackdropClick = false, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = false };
        var parameters = new DialogParameters<VehicleDialog> { { x => x.IdVehicle, 0 }, { x => x.ActionsModal, ActionsEnum.Create } };
        var dialog = await DialogService.ShowAsync<VehicleDialog>("simple dialog", parameters, options);
        var result = await dialog.Result;
        if (!result!.Canceled)
        {

            await GetVehicles();
            StateHasChanged();

        }

        await Task.CompletedTask;
    }


    private void OpenNested() => _nestedVisible = true;

    private void CloseNested() => _nestedVisible = false;

     

    private async Task HandleMenuClick(ModuleAction module)
    {
        switch (module.ActionName)
        {
            case "IMPORT":
                await ImportItemsAsync();
                break;
            case "EXPORT":
                await ExportItemsAsync();
                break;
            case "ACTIVATE":
                await ActivateItemsAsync(module.IdAction, module.ActionName);
                break;
            case "DEACTIVATE":
                await DesactivateItemsAsync(module.IdAction, module.ActionName);
                break;
            case "ASSIGN":
                await AssignItemsAsync(module.IdAction, module.ActionName);
                break;
            case "UNASSIGN":
                await UnassignItemsAsync(module.IdAction, module.ActionName);
                break;
            case "AVAILABLE":
                await AvailableItemsAsync(module.IdAction, module.ActionName);
                break;
            case "UNAVAILABLE":
                await UnavailableItemsAsync(module.IdAction, module.ActionName);
                break;
            default:
                Console.WriteLine($"Acción no reconocida: {module.ActionName}");
                break;
        }
    }

    private async Task ImportItemsAsync()
    {
        // Lógica para importar elementos
        Console.WriteLine("Importando elementos...");
    }

    private async Task ExportItemsAsync()
    {
        // Lógica para exportar elementos
        Console.WriteLine("Exportando elementos...");
    }

    private async Task ActivateItemsAsync(int moduleId, string moduleActionName )
    {
        Console.WriteLine("Activate Vehiculos...");
        if (_selectedVehicles.Any())
        {
            var option = new DialogOptions
                {
                    CloseButton = false,
                    MaxWidth = MaxWidth.Small,
                    FullWidth = true,
                    BackdropClick = false
                };
            bool? result = await DialogService.ShowMessageBox(
                "Confirmar Activación",
                $"Seguro de Activar Vehiculos seleccionados? ",
                yesText: "Si", noText: "No", "", option);

            if (result == true)
            {
                List<PostAction> ActionList = ([]);

                foreach (var vehicle in _selectedVehicles)
                {
                    var VehicleAction = new PostAction
                        {
                            RecordId = vehicle.Id,
                            ModuleId = moduleId,
                            ActionName = moduleActionName
                        };
                    ActionList.Add(VehicleAction);
                }

                _errorMessage = "";
                var serviceResponse = await VehicleService.ActionsVehicle(ActionList, _iduser);

                if (serviceResponse.Processed)
                {
                    _success = true;
                    _nestedErrorMessage = "Vehiculo(s) activados...";

                    OpenNested();
                    await GetVehicles();
                    StateHasChanged();

                }
                else
                {
                    _success = false;
                    _nestedErrorMessage = "!Problemas al activar Vehiculos...";
                    Console.WriteLine(serviceResponse.Message);
                    OpenNested();

                }                
            }
           
        }
       
        _selectedVehicles = new([]);
        await Task.CompletedTask;
    }

    private async Task DesactivateItemsAsync(int moduleId, string moduleActionName)
    {
        Console.WriteLine("Inactivar Vehiculos...");
        if (_selectedVehicles.Any())
        {
            var option = new DialogOptions
                {
                    CloseButton = false,
                    MaxWidth = MaxWidth.Small,
                    FullWidth = true,
                    BackdropClick = false
                };
            bool? result = await DialogService.ShowMessageBox(
                "Confirmar Inactivar Vehiculo(s)",
                $"Seguro de Inactivar Vehiculo(s) seleccionado(s)? ",
                yesText: "Si", noText: "No", "", option);

            if (result == true)
            {
                List<PostAction> ActionList = ([]);

                foreach (var vehicle in _selectedVehicles)
                {
                    var VehicleAction = new PostAction
                        {
                            RecordId = vehicle.Id,
                            ModuleId = moduleId,
                            ActionName = moduleActionName
                        };
                    ActionList.Add(VehicleAction);
                }

                _errorMessage = "";
                var serviceResponse = await VehicleService.ActionsVehicle(ActionList, _iduser);

                if (serviceResponse.Processed)
                {
                    _success = true;
                    _nestedErrorMessage = "Vehiculo(s) Inactivado(s)...";

                    OpenNested();
                    await GetVehicles();
                    StateHasChanged();

                }
                else
                {
                    _success = false;
                    _nestedErrorMessage = "!Problemas al Inactivar Vehiculo(s)...";
                    Console.WriteLine(serviceResponse.Message);
                    OpenNested();

                }
            }

        }

        _selectedVehicles = new([]);
        await Task.CompletedTask;
    }

    private async Task AssignItemsAsync(int moduleId, string moduleActionName)
    {
        Console.WriteLine("Asignar concesionario Vehiculo(s)...");
        if (_selectedVehicles.Any())
        {
            var _DealerList = await ModuleActionsService.GetDealerOption(_iduser);

            DialogOptions options = new() { BackdropClick = false, MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = false };
            var parameters = new DialogParameters<SelectItemDialog> { { x => x.SelectList, _DealerList }, { x => x.Title, "Asignar Concesionario Vehiculo(s)..." } };
            var dialog = await DialogService.ShowAsync<SelectItemDialog>("simple dialog", parameters, options);
            
            StateHasChanged();

            var result = await dialog.Result;
            if (!result!.Canceled)
            {
                var _selectedDealer = (int)(result.Data ?? 0);
                List<PostAction> ActionList = ([]);

                foreach (var vehicle in _selectedVehicles)
                {
                    var VehicleAction = new PostAction
                        {
                            RecordId = vehicle.Id,
                            ModuleId = moduleId,
                            ActionName = moduleActionName,
                            RelatedId = _selectedDealer 
                        };
                    ActionList.Add(VehicleAction);
                }

                _errorMessage = "";
                var serviceResponse = await VehicleService.ActionsVehicle(ActionList, _iduser);

                if (serviceResponse.Processed)
                {
                    _success = true;
                    _nestedErrorMessage = "Vehiculo(s) Asignados...";

                    OpenNested();
                    await GetVehicles();
                    StateHasChanged();
                    
                }
                else
                {
                    _success = false;
                    _nestedErrorMessage = "!Problemas al Asignar Concecionarios...";
                    Console.WriteLine(serviceResponse.Message);
                    OpenNested();

                }
               
            }

        }

        _selectedVehicles = new([]);
        await Task.CompletedTask;
    }

    private async Task UnassignItemsAsync(int moduleId, string moduleActionName)
    {
        Console.WriteLine("Desasignar Concesionario a Vehiculos...");
        if (_selectedVehicles.Any())
        {

            DialogOptions options = new() { BackdropClick = false, MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = false };
            var parameters = new DialogParameters<TextItemDialog> { { x => x.Title, "Desasignar concesionario a Vehiculo(s)..." } };
            var dialog = await DialogService.ShowAsync<TextItemDialog>("simple dialog", parameters, options);

            StateHasChanged();

            var result = await dialog.Result;
            if (!result!.Canceled)
            {
                var _Observacion = (string)(result.Data ?? string.Empty);
                List<PostAction> ActionList = ([]);

                foreach (var vehicle in _selectedVehicles)
                {
                    var VehicleAction = new PostAction
                        {
                            RecordId = vehicle.Id,
                            ModuleId = moduleId,
                            ActionName = moduleActionName,
                            ActionComment = _Observacion
                        };
                    ActionList.Add(VehicleAction);
                }

                _errorMessage = "";
                var serviceResponse = await VehicleService.ActionsVehicle(ActionList, _iduser);

                if (serviceResponse.Processed)
                {
                    _success = true;
                    _nestedErrorMessage = "Concesionario Desasignado a Vehiculo(s)...";

                    OpenNested();
                    await GetVehicles();
                    StateHasChanged();

                }
                else
                {
                    _success = false;
                    _nestedErrorMessage = "!Problemas al Desasignar Concecionario...";
                    Console.WriteLine(serviceResponse.Message);
                    OpenNested();

                }

            }

        }

        _selectedVehicles = new([]);
        await Task.CompletedTask;
    }

    private async Task AvailableItemsAsync(int moduleId, string moduleActionName)
    {
        Console.WriteLine("Vehiculos Disponibles...");
        if (_selectedVehicles.Any())
        {
            var option = new DialogOptions
                {
                    CloseButton = false,
                    MaxWidth = MaxWidth.Small,
                    FullWidth = true,
                    BackdropClick = false
                };
            bool? result = await DialogService.ShowMessageBox(
                "Confirmar Vehiculo(s) Disponibles",
                $"Seguro de Habilitar Vehiculos seleccionados? ",
                yesText: "Si", noText: "No", "", option);

            if (result == true)
            {
                List<PostAction> ActionList = ([]);

                foreach (var vehicle in _selectedVehicles)
                {
                    var VehicleAction = new PostAction
                        {
                            RecordId = vehicle.Id,
                            ModuleId = moduleId,
                            ActionName = moduleActionName
                        };
                    ActionList.Add(VehicleAction);
                }

                _errorMessage = "";
                var serviceResponse = await VehicleService.ActionsVehicle(ActionList, _iduser);

                if (serviceResponse.Processed)
                {
                    _success = true;
                    _nestedErrorMessage = "Vehiculo(s) Habilitado(s)...";

                    OpenNested();
                    await GetVehicles();
                    StateHasChanged();

                }
                else
                {
                    _success = false;
                    _nestedErrorMessage = "!Problemas al Habilitar Vehiculo(s)...";
                    Console.WriteLine(serviceResponse.Message);
                    OpenNested();

                }
            }

        }

        _selectedVehicles = new([]);
        await Task.CompletedTask;
    }

    private async Task UnavailableItemsAsync(int moduleId, string moduleActionName)
    {
        Console.WriteLine("Vehiculos No Disponibles...");
        
        if (_selectedVehicles.Any())
        {

            DialogOptions options = new() { BackdropClick = false, MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = false };
            var parameters = new DialogParameters<TextItemDialog> { { x => x.Title, "Vehiculo(s) No Disponible(s)..." } };
            var dialog = await DialogService.ShowAsync<TextItemDialog>("simple dialog", parameters, options);

            StateHasChanged();

            var result = await dialog.Result;
            if (!result!.Canceled)
            {
                var _Observacion = (string)(result.Data ?? string.Empty);
                List<PostAction> ActionList = ([]);

                foreach (var vehicle in _selectedVehicles)
                {
                    var VehicleAction = new PostAction
                        {
                            RecordId = vehicle.Id,
                            ModuleId = moduleId,
                            ActionName = moduleActionName,
                            ActionComment = _Observacion
                        };
                    ActionList.Add(VehicleAction);
                }

                _errorMessage = "";
                var serviceResponse = await VehicleService.ActionsVehicle(ActionList, _iduser);

                if (serviceResponse.Processed)
                {
                    _success = true;
                    _nestedErrorMessage = "Vehiculo(s) no Disponibles...";

                    OpenNested();
                    await GetVehicles();
                    StateHasChanged();

                }
                else
                {
                    _success = false;
                    _nestedErrorMessage = "!Problemas al Inhabilitar Vehiculo(s)...";
                    Console.WriteLine(serviceResponse.Message);
                    OpenNested();

                }

            }

        }

        _selectedVehicles = new([]);
        await Task.CompletedTask;
    }
}
