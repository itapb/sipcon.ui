<InputFile OnChange="OnInputFileChange" accept=".xlsx" style="display:none" />
<div id="scrollableGridContentStyled" style="overflow-y: auto;  padding: 8px; background-color: #f0f0f0;">
    <MudGrid Spacing="2">
        <MudItem xs="12" sm="9">
            <MudStack>
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center">
                    <MudStack Row="true" Spacing="2">
                        <MudFab StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" Label="Guardar" OnClick="SaveClick" Disabled="@(!((IsProcessedDispatch && MasterMovement!.Reference.Length == 0) || IsCreatedMovement))"></MudFab>
                        <MudButton OnClick="CloseClick">Cerrar</MudButton>
                    </MudStack>
                </MudPaper>
                <MudPaper Elevation="2" Style="height: 100%;">
                        <MudDataGrid @ref="MovementDetailsMudDataGrid" T="MovementDetails" ServerData="ServerReload" Filterable="false" FixedHeader Height="calc(100vh - 262px)" Loading="Loading" @bind-CurrentPage="PartCurrentPage">
                        <ToolBarContent>
                            <MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd" Size="Size.Medium" OnClick="ClickAddMovementDetail" Color="Color.Info" Disabled="@(!IsCreatedMovement)"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.PlaylistRemove" Size="Size.Medium" OnClick="ClickRemoveMovementDetails" Color="Color.Info" Disabled="@(!IsCreatedMovement)"></MudIconButton>
                            <MudSpacer />
                            <MudIconButton Icon="@Icons.Material.Filled.Upload" Size="Size.Medium" OnClick="ClickImportReceptionDetail" Color="Color.Info" Disabled="@(!IsCreatedMovement)"></MudIconButton>
                        </ToolBarContent>
                        <Columns>
                            <TemplateColumn>
                                <HeaderTemplate>
                                    <MudCheckBox @bind-Value="IsAllCheckBoxSelected" @bind-Value:after="AfterAsyncAllCheck" />
                                </HeaderTemplate>
                                <CellTemplate>
                                    <MudCheckBox @bind-Value="context.Item.IsSelected" />
                                </CellTemplate>
                            </TemplateColumn>
                            <PropertyColumn Property="x => x.PartInnerCode" Title="Cod Respuesto" />
                            <PropertyColumn Property="x => x.PartDescription" Title="Descripcion" />
                            <PropertyColumn Property="x => x.LocationName" Title="Ubicacion" />
                            <PropertyColumn Property="x => x.RequiredQty" Title="Teorica" />
                            <PropertyColumn Property="x => x.RealQty" Title="Real" />
                            <PropertyColumn Property="x => x.TypeName" Title="Tipo" />

                            <TemplateColumn Title="Status">
                                <CellTemplate>
                                    <span>@((context.Item.Processed ?? false) ? "Procesado":"No Procesado")</span>
                                 </CellTemplate>
                             </TemplateColumn>


                            <TemplateColumn StickyRight="true">
                                <CellTemplate>
                                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="() => ClickEditReceptionDetail(context.Item)" Disabled="@(!@IsCreatedMovement)" />
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </MudPaper>
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="3">
            <MudStack Style="height: 100%; ">
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center flex-grow-1"> <MudForm @ref="form">
                    <MudGrid Spacing="2">
                        <MudItem xs="12"><MudText Typo="Typo.h6" Color="Color.Info">Datos Generales:</MudText></MudItem>
                        @if (MasterMovement == null)
                        {
                            <MudItem xs="12"><MudTextField T="string" ReadOnly="true" Value="@("Cargando..")" Variant="Variant.Text" /></MudItem>
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudTextField ReadOnly="true" @bind-Value="MasterMovement.ContactName" Label="@(MasterMovement!.TypeId == "R" && IsCreatedMovement ? "Contacto :" : "")" AdornmentText="@(MasterMovement!.TypeId == "R" && IsCreatedMovement ? "" : "Contacto :")" Adornment=" Adornment.Start" AdornmentIcon="@(MasterMovement!.TypeId == "R" ? Icons.Material.Filled.Search : "")" Variant="Variant.Text" OnAdornmentClick="ContactClick" Class="align-right-input"></MudTextField>
                            </MudItem>
                            <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterMovement.Id" Adornment="Adornment.Start" AdornmentText="Nro Doc :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                            <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterMovement.Created" Adornment="Adornment.Start" AdornmentText="Fecha :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                            <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterMovement.CreatedBy" Adornment="Adornment.Start" AdornmentText="Usuario :" Variant="Variant.Text"  Class="align-right-input" /></MudItem>
                            <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterMovement.StatusName" Adornment="Adornment.Start" AdornmentText="Estatus :" Variant="Variant.Text"  Class="align-right-input" /></MudItem>
                            <MudItem xs="12"><MudTextField ReadOnly="@(!((IsProcessedDispatch && MasterMovement!.Reference.Length == 0) || IsCreatedMovement))" @bind-Value="MasterMovement.Reference" Label="Referencia" Variant="Variant.Text" RequiredError="Campo requerido" Required="@((IsCreatedReception || IsProcessedDispatch))" MaxLength="10" /></MudItem>
                            <MudItem xs="12"><MudTextField ReadOnly="@(!IsCreatedMovement)" @bind-Value="MasterMovement.Comment" Label="Observacion" Variant="Variant.Text" /></MudItem>
                        }

                    </MudGrid></MudForm>
                </MudPaper>
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center flex-grow-1">
                    <MudGrid Spacing="2">
                        <MudItem xs="12"><MudText Typo="Typo.h6" Color="Color.Info">Totales:</MudText></MudItem>
                        <MudItem xs="12"><MudTextField ReadOnly="true" Adornment="Adornment.Start" @bind-Value="UnitValue" AdornmentText="Unidad :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                        <MudItem xs="12"><MudTextField ReadOnly="true" Adornment="Adornment.Start" @bind-Value="ProductValue" AdornmentText="Productos :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                        <MudItem xs="12"><MudTextField ReadOnly="true" Adornment="Adornment.Start" @bind-Value="CostValue" AdornmentText="Costo :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                    </MudGrid>
                </MudPaper>
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center flex-grow-0">
                    <MudStack Row="true" Spacing="2" Justify="Justify.FlexEnd" StretchItems="StretchItems.Start">
                        <MudFab StartIcon="@Icons.Material.Filled.CheckCircleOutline" Color="Color.Info" Size="Size.Small" Label="Generar" OnClick="GenerateClick" Disabled="@(!IsCreatedMovement)" />
                    </MudStack>
                </MudPaper>
            </MudStack>
        </MudItem>
    </MudGrid>
    </div>

<style>
    .align-right-input input {
        text-align: right;
    }
</style>
@code {
    [Inject] private HttpClient Http { get; set; } = default!;   
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Parameter] public int? Value { get; set; }
    [Parameter] public EventCallback<int?> ValueChanged { get; set; }
    DialogOptions options = new DialogOptions { MaxWidth = MaxWidth.Large, BackdropClick = false, NoHeader = true };

    string TempReference = "";
    int PartCurrentPage = 0;
    bool IsCreatedMovement = false;    
    bool IsProcessedDispatch = false;
    bool IsCreatedReception = false;
    //bool IsReferenceValid => MasterMovement!.TypeId == "T" || (MasterMovement!.TypeId == "R" && IsCreatedMovement && TempReference.Length > 0);
    string GetContactLabel => MasterMovement!.TypeId == "R" ? "Contacto :" : "";

    private int? MovementId
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                ValueChanged.InvokeAsync(Value);
            }
        }
    }
    private int UnitValue = 0;
    private int ProductValue = 0;
    private decimal CostValue = 0;


    private bool IsAllCheckBoxSelected = false;
    bool Loading = false;
    private Movement? MasterMovement;
    private MudDataGrid<MovementDetails>? MovementDetailsMudDataGrid = new();
    private MudForm? form;
    private async Task AfterAsyncAllCheck()
    {
        MovementDetailsMudDataGrid?.FilteredItems.ToList().ForEach(item => item.IsSelected = IsAllCheckBoxSelected);
        await Task.CompletedTask;
    }
    private async Task ClickEditReceptionDetail(MovementDetails item)
    {
        Type tipoCatalogo = MasterMovement?.TypeId == "R" ? typeof(PartToMovementDetail) : typeof(InventoryToMovementDetail);
        NewMovementDetail AnewMovementDetail = new NewMovementDetail
        {
            Id = item.Id,
            PartId = item.PartId,
            MovementId = item.MovementId,
            LocationId = item.LocationId,
            DestinationId = item.DestinationId,
            RequiredQty = item.RequiredQty,
            Stock = item.Stock,

        };
        var dialogReference = await DialogService.ShowAsync(tipoCatalogo,"", new DialogParameters { ["newMovementDetail"] = AnewMovementDetail }, options);
        if (!((await dialogReference.Result)!.Canceled))
            await MovementDetailsMudDataGrid!.ReloadServerData();       
    }

    private void getTotals(IEnumerable<MovementDetails> data)
    {
        var filteredData = data.Where(x => x.TypeId == "P");
        UnitValue = filteredData.Sum(x => x.RequiredQty) ?? 0;
        ProductValue = filteredData.Count();
        CostValue = filteredData.Sum(x => x.SubTotal);
    }
    Func<MovementDetails, object> GetSortKeySelector(string sortByPropertyName) => sortByPropertyName switch
    {
        nameof(MovementDetails.PartInnerCode) => o => o.PartInnerCode ?? "",
        nameof(MovementDetails.PartDescription) => o => o.PartDescription ?? "",
        nameof(MovementDetails.LocationName) => o => o.LocationName ?? "",
        nameof(MovementDetails.RequiredQty) => o => o.RequiredQty ?? 0,
        nameof(MovementDetails.RealQty) => o => o.RealQty ?? 0,
        nameof(MovementDetails.TypeName) => o => o.TypeName,
        _ => null! //o => o.Id ?? 0 // Criterio de ordenación por defecto
    };

    private async Task<GridData<MovementDetails>> ServerReload(GridState<MovementDetails> state)
    {
        IsAllCheckBoxSelected = false;
        Loading = true;
        var totalItems = 0;
        var mOffset = state.Page * state.PageSize;
        IEnumerable<MovementDetails> data;
        HttpResponseMessage response = await Http.GetAsync($"api/Inventory/GetMovementWithContext?userId={Useful.userId}&movementId={MovementId}");
        if (response.IsSuccessStatusCode)
        {
            var content2 = await response.Content.ReadFromJsonAsync<WebApiResponse<MasterMovementDetails>>();
            totalItems = content2!.total ?? 0;
            var masterMovementDetails = content2!.data ?? new MasterMovementDetails();
            MasterMovement = masterMovementDetails.Movement;
            data = masterMovementDetails.Details!;
            IsCreatedMovement = (MasterMovement!.StatusName.ToUpper() == "CREADO"); 
            IsProcessedDispatch = (MasterMovement.TypeId == "D" && MasterMovement.StatusName.ToUpper() == "PROCESADO" );
            IsCreatedReception = (MasterMovement!.TypeId == "R" && MasterMovement.StatusName.ToUpper() == "CREADO" );
            TempReference = MasterMovement!.Reference ?? "";
            getTotals(data);           
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }
        if (state.SortDefinitions.FirstOrDefault() is SortDefinition<MovementDetails> sortDefinition)
        {
            data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, GetSortKeySelector(sortDefinition.SortBy));
        }
        Loading = false;
        StateHasChanged();
        return new GridData<MovementDetails> { TotalItems = totalItems, Items = data };
    }

    private void CloseClick() => MovementId = null; 

    private async Task ClickAddMovementDetail(MouseEventArgs ev)
    {         
        Type tipoCatalogo = MasterMovement?.TypeId == "R" ? typeof(PartsCatalog) : typeof(InventoryCatalog);
        var dialogReference = await DialogService.ShowAsync(tipoCatalogo,"", new DialogParameters { ["MovementId"] = MasterMovement!.Id }, options);        
        if ((await dialogReference.Result) is DialogResult dialogResult && !dialogResult.Canceled)
            await MovementDetailsMudDataGrid!.ReloadServerData();
    }

    private async Task ClickRemoveMovementDetails(MouseEventArgs ev)
    {
        var mActions = MovementDetailsMudDataGrid?.FilteredItems.Where(item => item.IsSelected)
                                                     .Select(item => new Client.Models.Action
                                                     {
                                                         UserId = Useful.userId,
                                                         RecordId = item.Id,
                                                         ModuleId = 0,
                                                         actionName = "DECLINE",
                                                         ActionComment = "",
                                                         RelatedId = 0
                                                     }).ToList();
        if (mActions?.Count > 0)
            await DeleteMovementDetailAction(mActions);      
    }

    private async Task SaveClick(MouseEventArgs args)
    {
        await form!.Validate();
        if (form.IsValid)
        {
            var strMasterMovement = System.Text.Json.JsonSerializer.Serialize(MasterMovement);
            var result_MasterMovement = await Http.PostAsync($"api/Inventory/PostMovements?userId={Useful.userId}", new StringContent($"[{strMasterMovement}]", null, "application/json"));
            if (result_MasterMovement.IsSuccessStatusCode)
            {
                var sucessContent = await result_MasterMovement.Content.ReadFromJsonAsync<WebApiResponse<List<PostResponse>>>();
                if (sucessContent?.data![0] is ({insertedRows: 1 } or {updatedRows: 1 }))
                {                
                    var result = await DialogService.ShowDialog(Useful.OkSavedMessage, "Guardar", "OK", Color.Info, Icons.Material.Filled.Commit);
                    if (!result!.Canceled)
                        MovementId =null;
                    TempReference = MasterMovement!.Reference;                    
                }
            }
            else if (result_MasterMovement.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                var conflictContent = await result_MasterMovement.Content.ReadFromJsonAsync<WebApiResponse<Object?>>();
                await DialogService.ShowDialog(conflictContent?.message!, "Error", "OK", Color.Error, Icons.Material.Filled.Error);
            }
            else
            {
                var errorMessage = await result_MasterMovement.Content.ReadAsStringAsync();
                throw new Exception(errorMessage);
            }
        }
    }
    private async Task GenerateClick(MouseEventArgs args)
    {
        var SelectedActions = MovementDetailsMudDataGrid?.FilteredItems.Count() > 0 ?
                              new Client.Models.Action{
                                  UserId = Useful.userId,
                                  RecordId = MovementId,
                                  ModuleId = 15,
                                  actionName = "GENERATE",
                                  ActionComment = "",
                                  RelatedId = 0
                              }
                              : null;

        if (SelectedActions is null)
        {
            await DialogService.ShowDialog("No hay detalles para generar el movimiento.", "Error", "OK", Color.Error, Icons.Material.Filled.Error);
            return;
        }

        if (MasterMovement?.TypeId == "R" && TempReference.Length == 0)
        {
            await form!.Validate();
            var IsSuccess = false;
            if (form.IsValid)
            {
                var strMasterMovement = System.Text.Json.JsonSerializer.Serialize(MasterMovement);
                var result_MasterMovement = await Http.PostAsync($"api/Inventory/PostMovements?userId={Useful.userId}", new StringContent($"[{strMasterMovement}]", null, "application/json"));
                if (result_MasterMovement.IsSuccessStatusCode)
                {
                    var sucessContent = await result_MasterMovement.Content.ReadFromJsonAsync<WebApiResponse<List<PostResponse>>>();
                    IsSuccess = (sucessContent?.data![0] is ({ insertedRows: 1 } or { updatedRows: 1 }));
                }
                else if (result_MasterMovement.StatusCode == System.Net.HttpStatusCode.Conflict)
                {
                    var conflictContent = await result_MasterMovement.Content.ReadFromJsonAsync<WebApiResponse<Object?>>();
                    await DialogService.ShowDialog(conflictContent?.message!, "Error", "OK", Color.Error, Icons.Material.Filled.Error);
                }
                else
                {
                    var errorMessage = await result_MasterMovement.Content.ReadAsStringAsync();
                    throw new Exception(errorMessage);
                }
            }

            if (!IsSuccess)
            {
                return;
            }
        }

        var strMovementActions = System.Text.Json.JsonSerializer.Serialize(SelectedActions);
        var result_PostMovementActions = (SelectedActions is not null) ? await Http.PostAsync($"api/Inventory/PostMovementActions?userId={SelectedActions.UserId}", new StringContent($"[{strMovementActions}]", null, "application/json")) : null;
        if ((result_PostMovementActions?.IsSuccessStatusCode ?? false))
        {
            var rest = result_PostMovementActions.Content.ReadAsStringAsync();
            await DialogService.ShowDialog(Useful.OkSavedMessage, "Accion", "OK", Color.Info, Icons.Material.Filled.Commit);
            MovementId = null;
        }
    }

    private async Task DeleteMovementDetailAction(List<Models.Action>? actions)
    {        
        var result_Post_Actions = (actions?.Count > 0) ? await Http.PostAsync($"api/Inventory/DeleteMovementDetail?userId={Useful.userId}", new StringContent(System.Text.Json.JsonSerializer.Serialize(actions), null, "application/json")) : null;
        if ((result_Post_Actions?.IsSuccessStatusCode ?? false))
        {
            //var rest = result_Post_Actions.Content.ReadAsStringAsync();
            await DialogService.ShowDialog(Useful.OkSavedMessage, "Remover", "OK", Color.Info, Icons.Material.Filled.Commit);
            await MovementDetailsMudDataGrid!.ReloadServerData();
        }
        else if (result_Post_Actions?.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            var conflictContent = await result_Post_Actions.Content.ReadFromJsonAsync<WebApiResponse<Object?>>();
            await DialogService.ShowDialog(conflictContent?.message!, "Error", "OK", Color.Error, Icons.Material.Filled.Error);
        }
        else
        {
            var errorMessage = await result_Post_Actions!.Content.ReadAsStringAsync() ?? "";
            throw new Exception(errorMessage);
        }
    }
    private async Task ClickImportReceptionDetail(MouseEventArgs args)
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('[type=file]').click()");
        return;
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 1)
        {
            var file = e.File;
            const long maxAllowedSize = 10 * 1024 * 1024; // 10MB
            if (file.Size == 0)
            {
                await DialogService.ShowDialog("Archivo esta vacio", "Error de Archivo", "OK", Color.Error, Icons.Material.Filled.Error);
            }
            else if (file.Size > maxAllowedSize)
            {
                await DialogService.ShowDialog("Tamaño del archivo excede el limite maximo permitido de 10MB.", "Error de Archivo", "OK", Color.Error, Icons.Material.Filled.Error);
            }
            else
            {
                using var stream = file.OpenReadStream(maxAllowedSize: maxAllowedSize);

                var content = new StreamContent(stream);
                content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

                // Create a multipart form data content
                var formData = new MultipartFormDataContent();
                formData.Add(content, "file", file.Name);
                Loading = true;

                var response = await Http.PostAsync($"api/Inventory/ImportMovementDetail?userId={Useful.userId}&movementId={MovementId}", formData);
                if (response.IsSuccessStatusCode)
                {
                    await DialogService.ShowDialog("Archivo cargado con exito!.", "Importar", "OK", Color.Info, Icons.Material.Filled.Commit);
                    await MovementDetailsMudDataGrid!.ReloadServerData();
                }
                else
                {
                    await DialogService.ShowDialog("Carga de archivo fallo!", "Error al cargar", "OK", Color.Error, Icons.Material.Filled.Error);
                    Loading = false;
                }
            }
        }
        await Task.CompletedTask;
    }
    private async Task ContactClick(MouseEventArgs args)
    {
        DialogOptions options2 = new DialogOptions { MaxWidth = MaxWidth.Medium, BackdropClick = false, NoHeader = true };
        var dialogReference = await DialogService.ShowAsync<ContactsCatalog>("", new DialogParameters { ["ContactId"] = MasterMovement!.ContactId, ["ContactName"] = MasterMovement!.ContactName, ["ContactType"] = "P" }, options2);
        if ((await dialogReference.Result) is DialogResult dialogResult && !dialogResult.Canceled && dialogResult.Data is not null)
        {
            dynamic contactData = dialogResult.Data;
            MasterMovement!.ContactId = contactData.ContactId;
            MasterMovement!.ContactName = contactData.ContactName;
        }
        
    }
}