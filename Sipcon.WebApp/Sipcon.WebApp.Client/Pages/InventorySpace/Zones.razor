@page "/zones"
@using Sipcon.WebApp.Client.Repository.Auth
@inject HubEventsService hubEventsService
@implements IDisposable

<CustomBreadcrumbs mItems="ItemsNavigate"></CustomBreadcrumbs>
<InputFile OnChange="masterComp.OnInputFileChange" accept=".xlsx" style="display:none" />
@if(ZoneId==null){
<MudDataGrid @ref="masterComp.EntityMudDataGrid" T="Zone" ServerData="ServerReload" Filterable="false" FixedHeader Height="calc(100vh - 260px)" Loading="masterComp.loading" @bind-CurrentPage="masterComp.CurrentPage">
    <ToolBarContent>
            <MudIconButton Icon="@Icons.Material.Filled.AddCard" OnClick="masterComp.ClickAdd" Color="Color.Info"></MudIconButton>
        <MudTextField T="string" Placeholder="Buscar" Adornment="Adornment.Start" ValueChanged="@(s => masterComp.OnSearch(s))" Value="masterComp.searchString" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Info" OnClick="masterComp.ClickRefresh"></MudIconButton>
        <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu">
                @foreach (var strmodulo in masterComp.Modules!)
                {
                    <MudMenuItem Label="@strmodulo.ActionDisplay" Icon="@(strmodulo.ActionDisplay.ToActionIcon())" IconColor="@Color.Info" OnClick="@(() => masterComp.ClickMenu(strmodulo.ActionName))" />
                }
            </MudMenu>
        </ToolBarContent>
        <Columns>
            <TemplateColumn>
                <HeaderTemplate>
                    <MudCheckBox @bind-Value="masterComp.IsAllCheckBoxSelected" @bind-Value:after="masterComp.AfterAsyncAllCheck" />
                </HeaderTemplate>
                <CellTemplate>
                    <MudCheckBox @bind-Value="@context.Item.IsSelected" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Name" title="ZONA" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.WarehouseName" title="ALMACEN" />
            <PropertyColumn Property="x => x.Size" title="TAMAÑO" />
            <TemplateColumn>
                <HeaderTemplate>
                    <MudText>ACTIVO</MudText>
                </HeaderTemplate>
                <CellTemplate>                    
                    <MudIcon Icon="@(context.Item.IsActive ?? false ? Icons.Material.Filled.VerifiedUser : Icons.Material.Filled.Dangerous)" Color="@(context.Item.IsActive ?? false ? Color.Success : Color.Error)" Size="Size.Medium" />
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="() => masterComp.ClickEdit(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Zone" PageSizeOptions="new int[] { 100 }" InfoFormat="{first_item}-{last_item} de {all_items}" RowsPerPageString="Registros por Pagina" />
        </PagerContent>
    </MudDataGrid>
}
else{
    <ZoneForm @bind-Value="ZoneId" />
}
@code {    
    [Inject] private AuthenticationProviderJWT AuthenticationStateProvider { get; set; } = null!;
    [Inject] private MasterComp<Zone, ZoneForm> masterComp { get; set; } = default!;
    private int? ZoneId;
    List<BreadcrumbItem> ItemsNavigate = [new("Home", href: "", icon: Icons.Material.Filled.Home), new("Inventario", href: "zones", icon: Icons.Material.Filled.Inventory), new("Zona", href: "zones", icon: Icons.Material.Filled.Map)];



    protected override async Task OnInitializedAsync()
    { 
        await AuthenticationStateProvider.RefreshStaticVariables();
        await masterComp.FillModules();
        hubEventsService.OnSupplierChanged += ReloadZonesGrid;
    }
    private async Task<GridData<Zone>> ServerReload(GridState<Zone> state)
    {
         await AuthenticationStateProvider.RefreshStaticVariables();

        masterComp.IsAllCheckBoxSelected = false;
        masterComp.loading = true;
        var mOffset = state.Page * state.PageSize;
        var totalItems = 0;
        IEnumerable<Zone> data;
        HttpResponseMessage response = await masterComp.Http.GetAsync($"api/Zone/GetAll?userId={Useful.userId}&supplierId={Useful.supplierId}&rowFrom={mOffset}&filter={masterComp.searchString}");

        if (response.IsSuccessStatusCode)
        {
            var content2 = await response.Content.ReadFromJsonAsync<WebApiResponse<List<Zone>>>();
            totalItems = content2!.total ?? 0;
            data = content2!.data ?? new List<Zone>();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }
        masterComp.loading = false;

        return new GridData<Zone> { TotalItems = totalItems, Items = data };
    }
    private async Task ReloadZonesGrid()
    {
        if (masterComp.EntityMudDataGrid != null)
        {
            await masterComp.EntityMudDataGrid.ReloadServerData();
        }
    }
    public void Dispose()
    {
        Useful.IsNewOrEdit = false;
        hubEventsService.OnSupplierChanged -= ReloadZonesGrid;
    }

    // private async Task ClickAddZone(MouseEventArgs ev)
    // {
    //     ZoneId = 0;
    //     await Task.CompletedTask;
    // }
    // private async Task ClickEditZone(Zone item)
    // {
    //     ZoneId = item.Id;
    //     await Task.CompletedTask;
    // }

}