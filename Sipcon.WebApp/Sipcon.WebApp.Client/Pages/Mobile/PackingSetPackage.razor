@* @page "/mobile-setpackage" *@
@using Sipcon.WebApp.Client.Layout
@layout MobileLayout
<div style="flex-shrink: 0;" class="pa-3 jpv1-dialog-body-background">
    <MudPaper Elevation="2" Class="pa-3">
        <MudGrid Spacing="2">
            <MudItem xs="12">
                <MudStack Row="false" Class="pa-2 mud-theme-info mud-typography-h6" Spacing="1" style="line-height:1.1;">
                    <div>CLIENTE : @currentPacking?.CustomerName</div>
                    <MudStack Row="true" StretchItems="StretchItems.Start" Justify="Justify.FlexEnd">                      
                        <div>BULTO: @currentPacking?.PackageId</div>
                    </MudStack>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="string" ReadOnly="true" Label="REPUESTO" Value="currentPacking!.PartName" Class="d-flex align-center justify-center"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="int?" ReadOnly="true" Label="PENDIENTE" Value="currentPacking!.Pending" Class="d-flex align-center justify-center"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudFocusTrap Disabled="false" DefaultFocus="DefaultFocus.LastChild"><MudTextField T="int?" @ref="PackageInput" Label="CANTIDAD" HelperText="@mHelpText" @bind-Value="currentPacking!.Quantity" Class="d-flex align-center justify-center"></MudTextField></MudFocusTrap>
            </MudItem>

            <MudItem xs="12">
                <MudStack Row="true" Justify="Justify.Center">
                    <MudStack Row="true" Spacing="5">
                        <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Check" Size="Size.Medium" OnClick="ClickSetPackageCheck" />
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Close" Size="Size.Medium" OnClick="ClickSetPackageClose" />
                    </MudStack>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>
@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;

    [Parameter] public Models.Packing? currentPacking { get; set; }
    [Parameter] public Models.PackingStep Value { get; set; }
    [Parameter] public EventCallback<Models.PackingStep> ValueChanged { get; set; }
    private MudTextField<int?>? PackageInput;
    string mHelpText = "";
    private MudForm? form;

    private Models.PackingStep CurrentStep
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                ValueChanged.InvokeAsync(Value);
            }
        }
    }
    private async Task PackageCheck()
    {
        var CustomerPackageDetail = new {PackageId = currentPacking!.PackageId, PartId = currentPacking!.PartId, Quantity = currentPacking!.Quantity };
        var strJsonCustomerPackageDetail = System.Text.Json.JsonSerializer.Serialize(CustomerPackageDetail);
        var result_Post_Zone = await Http.PostAsync($"api/Packing/PostPackageDetail", new StringContent(strJsonCustomerPackageDetail, null, "application/json"));
        if (result_Post_Zone.IsSuccessStatusCode)
        {
            var result = await DialogService.ShowDialog(Useful.OkSavedMessage, "Bulto", "OK", Color.Info, Icons.Material.Filled.Commit);
            if (!result!.Canceled)
            {
                CurrentStep = Models.PackingStep.Package;
            }

        }
    }
    private async Task ClickSetPackageCheck(MouseEventArgs args)
    {
        if (IsQuantityValid())
        {
            await PackageCheck();
        }
        else
            await PackageInput!.FocusAsync();

        await Task.CompletedTask;
    }
    private async Task ClickSetPackageClose(MouseEventArgs args)
    {
        if (Packing.PreviousStep == Models.PackingStep.Package)
            CurrentStep = Models.PackingStep.Package;
        else
            CurrentStep = Models.PackingStep.Pending;

        await Task.CompletedTask;
    }
    bool IsQuantityValid()
    {
        mHelpText = "";
        var result = true;
        if (currentPacking is { Quantity: null } or { Quantity: 0 })
        {
            mHelpText = $"Requiere cantidad valida";
            result = false;
        }
        else if (currentPacking!.Quantity > currentPacking.Pending)
        {
            mHelpText = $"Debe ser menor o igual a Pendiente";
            return false;
        }

        return result;
    }
}