@page "/mobile-guides"
@using Sipcon.WebApp.Client.Layout
@layout MobileLayout
<div style="flex-shrink: 0;" class="pa-3 jpv1-dialog-body-background">
    <MudPaper Elevation="2" Class="pa-3">
        <MudGrid Spacing="2">
            <MudItem xs="12">
                <MudStack Row="true" StretchItems="StretchItems.Start" Justify="Justify.FlexEnd">
                    <MudPaper Class="pa-2 mud-theme-info mud-typography-h6">Guias</MudPaper>
                    <MudPaper Class="pa-2"><MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" /></MudPaper>                   
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudText>
                    <MudDataGrid @ref="GuidesMudDataGrid" T="Guide" ServerData="ServerReload" Dense="false" Striped="true" Hover="true" Filterable="false" FixedHeader SelectedItemChanged="ClickSelectGuide" @bind-CurrentPage="GuideCurrentPage">
                        <ToolBarContent>
                            <MudTextField T="string" Placeholder="Buscar" Adornment="Adornment.Start" ValueChanged="@(s => OnSearch(s))" Value="searchString" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            <MudSpacer />
                            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Info" OnClick="ClickRefreshGuides"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Secondary" Href="process-list"></MudIconButton>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.NumberGuide" Title="GUIA" />
                  
                        </Columns>
                        <PagerContent>
                            <MudDataGridPager T="Guide" PageSizeOptions="new int[] { 100 }" InfoFormat="{first_item}-{last_item} de {all_items}" RowsPerPageString="Registros por Pagina" />
                        </PagerContent>
                    </MudDataGrid>
                </MudText>
            </MudItem>            
        </MudGrid>
    </MudPaper>
</div>
@code {
    bool _loading = true;
    string searchString = "";
    private int GuideCurrentPage = 0;
    record Guide(string NumberGuide);

    private MudDataGrid<Guide>? GuidesMudDataGrid;
    private static readonly List<Guide> TestGuides = new()
    {
        new Guide("14764"),
        new Guide("14762"),
        new Guide("14763")
    };

    Func<Guide, object> GetSortKeySelector(string sortByPropertyName) => sortByPropertyName switch
    {
        nameof(Guide.NumberGuide) => o => o.NumberGuide ?? "",
        _ => null!
    };

    private async Task<GridData<Guide>> ServerReload(GridState<Guide> state)
    {
        _loading = true;
        var totalItems = 0;
        var mOffset = state.Page * state.PageSize;
        IEnumerable<Guide> data = TestGuides;
        await Task.CompletedTask;
        // Filter by search string
        if (!string.IsNullOrWhiteSpace(searchString))
        {
            data = data.Where(g => g.NumberGuide.Contains(searchString, StringComparison.OrdinalIgnoreCase));
        }

        totalItems = data.Count();

        // Sorting
        if (state.SortDefinitions.FirstOrDefault() is SortDefinition<Guide> sortDefinition)
        {
            data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, GetSortKeySelector(sortDefinition.SortBy));
        }

        // Paging
        data = data.Skip(mOffset).Take(state.PageSize);
        
        _loading = false;
        return new GridData<Guide> { TotalItems = totalItems, Items = data };
        
    }

    private async Task ClickRefreshGuides(MouseEventArgs ev)
    {
        await GuidesMudDataGrid!.ReloadServerData();
    }
    private async Task OnSearch(string text)
    {
        if (text.Length == 0 || text.Length >= 3)
        {
            _loading = true;
            searchString = text;
            await GuidesMudDataGrid!.ReloadServerData();
        }
    }
    private async Task ClickSelectGuide(Guide item)
    {
        await Task.CompletedTask;
    }
}