@* @page "/mobile-guides" *@
@using Sipcon.WebApp.Client.Layout
@layout MobileLayout
<div style="flex-shrink: 0;" class="pa-3 jpv1-dialog-body-background">
    <MudPaper Elevation="2" Class="pa-3">
        <MudGrid Spacing="2">
            <MudItem xs="12">
                <MudStack Row="false" Class="pa-2 mud-theme-info mud-typography-h6" Spacing="1" style="line-height:1.1;">
                    <div>CLIENTE : @currentDispatch?.CustomerName</div>
                    <div>GUIAS</div>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudText>
                    <MudDataGrid @ref="GuidesMudDataGrid" T="Models.Guide" ServerData="ServerReload" Striped="true" Hover="true" Filterable="false" Loading="_loading" SelectedItemChanged="ClickSelectGuide" @bind-CurrentPage="GuideCurrentPage" ShowColumnOptions="false" Class="hide-datagrid-headers">
                        <Columns>
                            <PropertyColumn Property="x => x.Id" Title="" CellClass="d-flex justify-center align-center" />
                        </Columns>
                        <PagerContent>
                            <MudStack Row="false" Spacing="2">
                                <MudPaper Class="pa-3">
                                    <MudTextField T="string" Placeholder="Buscar" Adornment="Adornment.Start" ValueChanged="@(s => OnSearch(s))" Value="searchString" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="height:40px;" />
                                </MudPaper>
                            </MudStack>   
                        </PagerContent>
                    </MudDataGrid>
                </MudText>
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="true" Justify="Justify.Center">
                    <MudStack Row="true" Spacing="5">
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" />
                        <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="ClickRefreshGuides" />                        
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Close" Size="Size.Medium" OnClick="ClickCloseGuides" />
                    </MudStack>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>
<style>
    .hide-datagrid-headers .mud-table-head {
        display: none !important;
    }
</style>
@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Parameter] public Models.Dispatch? currentDispatch { get; set; }
    [Parameter] public Models.DispatchStep Value { get; set; }
    [Parameter] public EventCallback<Models.DispatchStep> ValueChanged { get; set; }
    private Models.DispatchStep CurrentStep
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                ValueChanged.InvokeAsync(Value);
            }
        }
    }
   

    bool _loading = true;
    string searchString = "";
    private int GuideCurrentPage = 0;    
    private MudDataGrid<Models.Guide>? GuidesMudDataGrid;


    Func<Models.Guide, object> GetSortKeySelector(string sortByPropertyName) => sortByPropertyName switch
    {
        nameof(Models.Guide.Id) => o => o.Id ?? 0,
        _ => null!
    };

    private async Task<GridData<Models.Guide>> ServerReload(GridState<Models.Guide> state)
    {
        _loading = true;
        var totalItems = 0;
        var mOffset = state.Page * state.PageSize;
        IEnumerable < Models.Guide> data;
        HttpResponseMessage response = await Http.GetAsync($"api/Inventory/GetGuides?supplierId={currentDispatch!.SupplierId}&customerId={currentDispatch.CustomerId}&userId={currentDispatch.UserId}");
        if (response.IsSuccessStatusCode)
        {
            var content2 = await response.Content.ReadFromJsonAsync<WebApiResponse<List<Models.Guide>>>();
            totalItems = content2!.total ?? 0;
            data = content2!.data ?? new List<Models.Guide>();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }
        if (state.SortDefinitions.FirstOrDefault() is SortDefinition<Models.Guide> sortDefinition)
        {
            data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, GetSortKeySelector(sortDefinition.SortBy));
        }
        _loading = false;
        return new GridData<Models.Guide> { TotalItems = totalItems, Items = data };
    }

    private async Task ClickRefreshGuides(MouseEventArgs ev)
    {
        await GuidesMudDataGrid!.ReloadServerData();
    }
    private async Task OnSearch(string text)
    {
        if (text.Length == 0 || text.Length >= 3)
        {
            _loading = true;
            searchString = text;
            await GuidesMudDataGrid!.ReloadServerData();
        }
    }
    private async Task ClickSelectGuide(Models.Guide item)
    {
        currentDispatch!.GuideId = item.Id ?? 0;
        CurrentStep = Models.DispatchStep.GuideDetails;
        await Task.CompletedTask;
    }
    private async Task ClickCloseGuides(MouseEventArgs args)
    {
        CurrentStep  = Models.DispatchStep.Customer;
        await Task.CompletedTask;
    }
}