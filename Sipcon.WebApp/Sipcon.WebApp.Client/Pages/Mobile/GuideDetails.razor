@page "/mobile-guidedetail"
@using Sipcon.WebApp.Client.Layout
@layout MobileLayout

<div style="flex-shrink: 0;" class="pa-3 jpv1-dialog-body-background">
    <MudPaper Elevation="2" Class="pa-3">
        <MudGrid Spacing="2">
            <MudItem xs="12">
                <MudStack Row="true" StretchItems="StretchItems.Start" Justify="Justify.FlexEnd">
                    <MudPaper Class="pa-2 mud-theme-info mud-typography-h6 d-flex flex-column justify-center align-center" style="line-height:1.1;">
                        <span>CLIENTE : DEMO</span>
                        <span>BULTOS GUIA : 14764</span>
                    </MudPaper>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudText>
                    <MudDataGrid @ref="GuidesMudDataGrid" T="GuideItem" ServerData="ServerReload" Striped="true" Hover="true" Filterable="false" Loading="_loading" FixedHeader SelectedItemChanged="ClickSelectGuide" @bind-CurrentPage="GuideCurrentPage" ShowColumnOptions="false" Class="hide-datagrid-headers">
                        <Columns>
                            <TemplateColumn CellClass="d-flex justify-center align-center">
                                <CellTemplate>
                                    <MudStack Row>
                                        <MudText Class="mr-2">@context.Item.NumberGuide</MudText>
                                        <MudText Class="mr-2">@context.Item.Weight.ToString("F2") Kg</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <PagerContent>
                            <MudStack Row="false" Spacing="2" >
                                <MudPaper Class="pa-3">
                                    <MudTextField T="string" Placeholder="Buscar" Adornment="Adornment.Start" ValueChanged="@(s => OnSearch(s))" Value="searchString" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="height:40px;" />
                                </MudPaper>
                            </MudStack>
                        </PagerContent>
                    </MudDataGrid>
                </MudText>
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="true" Justify="Justify.Center">
                    <MudStack Row="true" Spacing="5">
                        <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" />
                        <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Check" Size="Size.Medium" Href="process-list" />
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="ClickRefreshGuides" />
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Close" Href="process-list" Size="Size.Medium" />
                    </MudStack>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>
<style>
    .hide-datagrid-headers .mud-table-head {
        display: none !important;
    }
</style>
@code {
    bool _loading = true;
    string searchString = "";
    private int GuideCurrentPage = 0;
    record GuideItem(string NumberGuide, double Weight);

    private MudDataGrid<GuideItem>? GuidesMudDataGrid;
    private List<GuideItem> TestGuides = new()
    {
        new GuideItem("14764-1",35.2),
        new GuideItem("14764-2",45),
        new GuideItem("14764-3",80.5),
    };

    Func<GuideItem, object> GetSortKeySelector(string sortByPropertyName) => sortByPropertyName switch
    {
        nameof(GuideItem.NumberGuide) => o => o.NumberGuide ?? "",
        nameof(GuideItem.Weight) => o => o.Weight,
        _ => null!
    };

    private async Task<GridData<GuideItem>> ServerReload(GridState<GuideItem> state)
    {        
        _loading = true;
        var totalItems = 0;
        var mOffset = state.Page * state.PageSize;
        IEnumerable<GuideItem> data = TestGuides;
      
        // Filter by search string
        // if (!string.IsNullOrWhiteSpace(searchString))
        // {
        //     data = data.Where(g => g.NumberGuide.Contains(searchString, StringComparison.OrdinalIgnoreCase));
        // }

        totalItems = data.Count();

        // Sorting
        if (state.SortDefinitions.FirstOrDefault() is SortDefinition<GuideItem> sortDefinition)
        {
            data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, GetSortKeySelector(sortDefinition.SortBy));
        }

        // Paging
        //data = data.Skip(mOffset).Take(state.PageSize);

        _loading = false;
        await Task.CompletedTask;
        return new GridData<GuideItem> { TotalItems = totalItems, Items = data };

    }

    private async Task ClickRefreshGuides(MouseEventArgs ev)
    {
        await GuidesMudDataGrid!.ReloadServerData();
    }
    private async Task OnSearch(string text)
    {
        if (text.Length == 0 || text.Length >= 3)
        {
            _loading = true;
            searchString = text;
            await GuidesMudDataGrid!.ReloadServerData();
        }
    }
    private async Task ClickSelectGuide(GuideItem item)
    {
        await Task.CompletedTask;
    }
}