@page "/process-form"
@using Sipcon.WebApp.Client.Layout
@layout MobileLayout
<div style="flex-shrink: 0;" class="pa-3 jpv1-dialog-body-background">
    <MudPaper Elevation="2" Class="pa-3">      
        <MudGrid Spacing="2">
            <MudItem xs="12">              
                <MudStack Row="true" StretchItems="StretchItems.Start" Justify="Justify.FlexEnd">                   
                    <MudPaper Class="pa-2 mud-theme-info mud-typography-h6">@processName : @TypeName</MudPaper>
                    <MudPaper Class="pa-2"><MudSwitch @bind-Value="ModeValue" Color="Color.Success" Label="@ModeText" @bind-Value:after="AfterAsyncMode" /></MudPaper>
                </MudStack>
             </MudItem>
            @if (movementDetails != null) {
            <MudItem xs="12">
                <MudTextField T="string" ReadOnly="true" Label="Ubicacion" @bind-Value="movementDetails.LocationName"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="string" ReadOnly="true" Label="Repuestos" @bind-Value="movementDetails.PartDescription"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="string" ReadOnly="true" Label="Serial" @bind-Value="movementDetails.SerialCode"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="int?" ReadOnly="true" Label="Cantidad Teorica" @bind-Value="movementDetails.RequiredQty"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="int?" ReadOnly="true" Label="Cantidad Real" @bind-Value="InputRealQty"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                 <MudFocusTrap Disabled="false" DefaultFocus="DefaultFocus.LastChild"><MudTextField @ref="bardCodeField" T="string" OnKeyUp="CodeFieldOnKeyUp" @bind-Value="InputCode" HelperText="@mHelpText" Variant="Variant.Filled"></MudTextField> </MudFocusTrap>
            </MudItem>                
            }
            <MudItem xs="12">
                <MudStack Row="true" Justify="Justify.Center">
                    <MudStack Row="true" Spacing="4">
                        <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Search" Size="Size.Medium" OnClick="OnClickSearch" />
                        <MudFab Color="Color.Surface" StartIcon="@Icons.Material.Filled.NavigateNext" Size="Size.Medium" OnClick="OnClickNavigateNext" />
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Check" Size="Size.Medium" OnClick="OnClickCheck" />
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Close" Href="process-list" Size="Size.Medium" />
                    </MudStack>
                </MudStack>
            </MudItem>
        </MudGrid>
   
    </MudPaper>
</div>

@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;   
    [Parameter] public string? MovementType { get; set; } = string.Empty;
    MovementDetails? movementDetails;
    int UserId = 1;//5077;

    string mHelpText = "";
    bool ModeValue = true;
    string ModeText = "Picking";
    string ModeParameter = "P"; 

    string processName = "Proceso";
    string? TypeName = "En Espera..";
    string? locationName;
    int? locationId;
    string? partDescription;
    string? serialNumber;    
    int? RequiredQty;
    int? InputRealQty;

    string InputCode = "";
    string InputSerial = "";
    bool IsValidLocation = false;
    bool IsValidPart = false;
    bool IsValidSerial = false;
    bool IsValidReal = false;
    int mStepId = 1;
    private MudTextField<string>? bardCodeField;


    protected override async Task OnInitializedAsync()
    {
        await NextStep();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && bardCodeField is not null)
        {
            await bardCodeField.FocusAsync();
        }
    }
    private async Task NextStep(){
        switch (mStepId)
        {
            case 1: //OBTENER SOLICITUD POR USUARIO Y TIPO DE MOVIMIENTO
                await GetMovementDetailsByUser();

                mStepId = locationId != movementDetails?.LocationId ?  2 : 3;
                if (mStepId == 3) mHelpText = "Escanee el repuesto o codigo de barras";
                break;
            case 2: //VALIDAR UBICACIÓN DEL MOVIMIENTO EN CURSO                
                IsValidLocation = await GetValidLocation(InputCode.ToUpper());
                if (IsValidLocation)
                {
                    mStepId = 3;
                    mHelpText = "Escanee el repuesto o codigo de barras";
                }
                else
                    mHelpText = "Invalida ubicación, escanee nuevamente.";

                break;
            case 3: // VALIDAR REPUESTO DEL MOVIMIENTO EN CURSO                

                IsValidPart = ValidPart(MovementType, InputCode.ToUpper());
                if (IsValidPart)
                {
                    if ((MovementType == "T" || MovementType == "P") && InputCode == "0")
                    {
                        await PostMovemmentDetailMobile();
                    } 
                    else
                    {
                        partDescription = movementDetails!.PartDescription;
                        RequiredQty = movementDetails!.RequiredQty;
                        if ((movementDetails!.Serializable ?? false) && MovementType == "P" && movementDetails?.TypeId!.ToUpper() == "P" )
                        {
                            mStepId = 4; mHelpText = "Escanee el Serial";
                        }
                        else
                        {
                            mStepId = 5; mHelpText = "Escanee la cantidad";
                        }
                        IsValidSerial = true;
                    }

                }
                else
                {
                    mHelpText = "Invalido repuesto, escanee nuevamente.";
                }

                break;
            case 4: //VALIDAR SERIAL.
                if (InputCode.Length > 0)            
                {                     
                    InputSerial = InputCode; // Store the scanned serial
                    mStepId = 5; 
                    mHelpText = "Escanee la cantidad";
                }
                break;
            case 5: //VALIDAR CANTIDAD REAL DEL MOVIMIENTO
                IsValidReal =  ValidReal(MovementType, movementDetails!.TypeId!, int.Parse(InputCode));
                if (IsValidReal) { mStepId = 6; InputRealQty = int.Parse(InputCode); mHelpText = "Listo, Puede Procesar!"; } else mHelpText = "Invalido cantidad, escanee nuevamente.";
                break;           
        }
        InputCode = string.Empty; // Reset input code
        if (bardCodeField is not null) {await bardCodeField.SetText(string.Empty); await bardCodeField.FocusAsync(); }
    }
    //private bool ValidSerial(string inputSerial) => (movementDetails!.SerialCode!.Equals(inputSerial));

    private bool ValidPart(string? movementType, string inputCode)    
    {
        bool isvalidPart = (((movementType == "T" || movementType == "P") && inputCode == "0") ||
        (movementDetails!.PartBarcode!.ToUpper() == inputCode || movementDetails!.PartInnerCode!.ToUpper() == inputCode));
        return isvalidPart;
    }   
    private bool ValidReal(string? movementType, string typeId ,int realQty)
    {
        bool isValid = ((movementType == "R" && typeId == "P" && realQty == movementDetails!.RequiredQty) ||
        ((movementType == "T" || movementType == "P") && typeId == "P" && realQty >= 0 && realQty <= movementDetails!.RequiredQty && realQty <= movementDetails!.Stock) ||        
        (typeId == "D" && realQty > 0));
        return isValid;
    } 

    private record movementMobile(int? Id, int? MovementId, int? PartId, int? LocationId, int? RealQty, string? SerialCode);

    private async Task<bool> GetValidLocation(string InputlocationName)
    {
        bool isValidLocation = false;
        HttpResponseMessage response = await Http.GetAsync($"api/Inventory/GetValidLocation?movementDetailId={movementDetails!.Id}&locationName={InputlocationName}");
        isValidLocation = response.IsSuccessStatusCode;
        if (isValidLocation)
        {
            var content = await response.Content.ReadFromJsonAsync<WebApiResponse<Location>>();
            locationName = content!.data!.Name! ;
            locationId = content.data.Id;
            InputSerial = string.Empty; // Reset serial input                           ;
        }

        return isValidLocation;
    }
    private async Task PostMovemmentDetailMobile()
    {
        var AnMovementMobile = new movementMobile(Id: movementDetails!.Id, MovementId: movementDetails!.MovementId, PartId: movementDetails.PartId, LocationId: locationId, RealQty: InputRealQty, SerialCode: InputSerial);
        var strJsonMovementMobile = System.Text.Json.JsonSerializer.Serialize(AnMovementMobile);
        var result_Post_Zone = await Http.PostAsync($"api/Inventory/PostMovementDetailMobile?userId={UserId}", new StringContent($"{strJsonMovementMobile}", null, "application/json"));
        if (result_Post_Zone.IsSuccessStatusCode)
        {
            await DialogService.ShowDialog("Movimiento Procesado!", "Procesado", "OK", Color.Success, Icons.Material.Filled.Check);
            await StepOne(); // Reset to step one after processing
            StateHasChanged();
        }
    }
    private async Task StepOne()
    {
        mStepId = 1;
        await NextStep();
    }
    private async Task GetMovementDetailsByUser()
    {
        InitializeFormFields();
        HttpResponseMessage response = await Http.GetAsync($"api/Inventory/GetMovementDetailsByUser?userId={UserId}&movementType={MovementType}&mode={ModeParameter}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadFromJsonAsync<WebApiResponse<List<MovementDetails>>>();
            if (content is { data: var movementdetails } && movementdetails != null && movementdetails.Count > 0)
            {
                processName = MovementType switch { "R" => "Recepcion", "T" => "Traslado", "P" => "Recoleccion", "D" => "Despacho", _ => "Recepcion" };
                movementDetails = movementdetails.FirstOrDefault();
                TypeName = movementDetails?.TypeName; 
            }
        } 

    }
    private async Task OnClickSearch(MouseEventArgs args)
    {
        await StepOne();
    }
    private async Task OnClickNavigateNext(MouseEventArgs args)
    {
        await Task.CompletedTask; // Placeholder for future functionality
    }
    private void InitializeFormFields()
    {
        mHelpText = "Aqui escanee ubicacion...";
        processName = "Proceso";       
        TypeName = "En Espera..";
        movementDetails = null;
        //locationName = null;
        //locationId = null;
        partDescription = null;
        serialNumber = null;
        RequiredQty = null;
        InputRealQty = null;
        InputCode = string.Empty;
        InputSerial = string.Empty;
        IsValidLocation = false;
        IsValidPart = false;
        IsValidSerial = false;
        IsValidReal = false;
    }

    private async Task CodeFieldOnKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && InputCode.Length > 0)
        { 
            await NextStep();
        }       
    }
    private async Task OnClickCheck(MouseEventArgs args)
    {
        if (IsValidPart && IsValidSerial && IsValidReal && mStepId == 6) await PostMovemmentDetailMobile();
    }
    private async Task AfterAsyncMode()
    {
        ModeText = ModeValue ? "Picking" : "Entrega";
        ModeParameter = ModeValue ? "P" : "D";
        await StepOne();       
    }
}
