@* @page "/mobile-package" *@
@using Sipcon.WebApp.Client.Layout
@layout MobileLayout

<div style="flex-shrink: 0;" class="pa-3 jpv1-dialog-body-background">
    <MudPaper Elevation="2" Class="pa-3">
        <MudGrid Spacing="2">
            <MudItem xs="12">
                <MudStack Row="false" StretchItems="StretchItems.Start" Justify="Justify.FlexEnd">    
                    <MudPaper Class="pa-2 mud-theme-info mud-typography-h6 d-flex flex-column justify-center align-center" style="line-height:1.1;">
                        <span>CLIENTE : @currentDispatch?.CustomerName</span>
                        <span>BULTO: @currentDispatch?.PackageId</span>
                    </MudPaper>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudText>
                    <MudDataGrid @ref="PackageDetailMudDataGrid" T="Models.PackageDetail" ServerData="ServerReload" Striped="true" Hover="true" Filterable="false" Loading="_loading" FixedHeader SelectedItemChanged="ClickSelectPackage" @bind-CurrentPage="PackageCurrentPage" ShowColumnOptions="false" Class="hide-datagrid-headers">
                        <Columns>
                            <TemplateColumn CellClass="d-flex justify-center align-center">
                                <CellTemplate>
                                    <MudStack Row>
                                        <MudText Class="mr-2">@context.Item.PartName</MudText>
                                        <MudText Class="mr-2">@context.Item.Quantity</MudText>
                                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Close" OnClick="() => ClickRemovePart(context.Item)" />
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>                           
                        </Columns>
                        <PagerContent>
                            <MudStack Row="false" Spacing="2">
                                <MudPaper Class="pa-3">
                                    <MudTextField T="string" Placeholder="Buscar" Adornment="Adornment.Start" ValueChanged="@(s => OnSearch(s))" Value="searchString" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="height:40px;" />
                                </MudPaper>
                            </MudStack>
                        </PagerContent>
                    </MudDataGrid>
                </MudText>
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="true" Justify="Justify.Center">
                    <MudStack Row="true" Spacing="5">                        
                        <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Check" Size="Size.Medium" OnClick="ClickCheckPackage" />
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search" Size="Size.Medium" OnClick="ClickSearchPackage" />
                        <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="ClickRefreshPackage" />
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Close" Size="Size.Medium" OnClick="ClickClosePackage" />
                    </MudStack>
                </MudStack>
            </MudItem>        
        </MudGrid>
    </MudPaper>
</div>
<style>
    .hide-datagrid-headers .mud-table-head {
        display: none !important;
    }
</style>
@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;

    [Parameter] public Models.Dispatch? currentDispatch { get; set; }
    [Parameter] public Models.DispatchStep Value { get; set; }
    [Parameter] public EventCallback<Models.DispatchStep> ValueChanged { get; set; }
    private Models.DispatchStep CurrentStep
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                ValueChanged.InvokeAsync(Value);
            }
        }
    }

    bool _loading = true;
    string searchString = "";
    private int PackageCurrentPage = 0;


    private MudDataGrid<Models.PackageDetail>? PackageDetailMudDataGrid;


    Func<Models.PackageDetail, object> GetSortKeySelector(string sortByPropertyName) => sortByPropertyName switch
    {
        nameof(Models.PackageDetail.PartName) => o => o.PartName ?? "",
        nameof(Models.PackageDetail.Quantity) => o => o.Quantity ?? 0,
        _ => null!
    };

    private async Task<GridData<Models.PackageDetail>> ServerReload(GridState<Models.PackageDetail> state)
    {
        _loading = true;
        var totalItems = 0;
        var mOffset = state.Page * state.PageSize;
        IEnumerable<Models.PackageDetail> data;
        HttpResponseMessage response = await Http.GetAsync($"api/Inventory/GetPackageDetails?packageId={currentDispatch?.PackageId}");
        if (response.IsSuccessStatusCode)
        {
            var content2 = await response.Content.ReadFromJsonAsync<WebApiResponse<List<Models.PackageDetail>>>();
            totalItems = content2!.total ?? 0;
            data = content2!.data ?? new List<Models.PackageDetail>();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }
        if (state.SortDefinitions.FirstOrDefault() is SortDefinition<Models.PackageDetail> sortDefinition)
        {
            data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, GetSortKeySelector(sortDefinition.SortBy));
        }
        _loading = false;
        return new GridData<Models.PackageDetail> { TotalItems = totalItems, Items = data };

    }

    private async Task ClickRefreshPackage(MouseEventArgs ev)
    {
        await PackageDetailMudDataGrid!.ReloadServerData();
    }
    private async Task OnSearch(string text)
    {
        if (text.Length >= 3 && (await GetPackageDetailByPart(currentDispatch!.PackageId, text) is Models.PackageDetail MyPackageDetail))
        {       
                currentDispatch.PartId = MyPackageDetail.PartId;
                currentDispatch.PartName = MyPackageDetail.PartName;
                currentDispatch.Pending = MyPackageDetail.Pending;
                currentDispatch.Quantity = null;
                Dispatch.PreviousStep = Models.DispatchStep.Package;
                CurrentStep = Models.DispatchStep.SetPackage;
                await Task.CompletedTask;
            //await PackageMudDataGrid!.ReloadServerData();
        }
    }
    private async Task<Models.PackageDetail?> GetPackageDetailByPart(int? PackageId, string ScanCode)
    {
        Models.PackageDetail? PackageDetailResut = null;
        HttpResponseMessage response = await Http.GetAsync($"api/Inventory/GetPackageDetailByPart?packageId={PackageId}&scanCode={ScanCode}");
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {           
            var Resut = await response.Content.ReadFromJsonAsync<WebApiResponse<List<Models.PackageDetail>>>();
            PackageDetailResut = Resut!.data?.FirstOrDefault();
        }
        else if (response.StatusCode  == System.Net.HttpStatusCode.Conflict)
        {
            var conflictContent = await response.Content.ReadFromJsonAsync<WebApiResponse<Object?>>();
            await DialogService.ShowDialog(conflictContent?.message!, "Error Repuesto", "OK", Color.Error, Icons.Material.Filled.Error);
        }
        return await Task.FromResult(PackageDetailResut);
    }
    private async Task ClickSelectPackage(Models.PackageDetail item)
    {
        currentDispatch!.PackageId = item.PackageId;
        currentDispatch.PartName = item.PartName;
        currentDispatch.PartId = item.PartId;

        Dispatch.PreviousStep = Models.DispatchStep.Package;
        CurrentStep = Models.DispatchStep.SetPackage;
        
        await Task.CompletedTask;
    }
    private async Task ClickRemovePart(Models.PackageDetail item)
    {
        await Task.CompletedTask;
    }
    private async Task ClickClosePackage(MouseEventArgs args)
    {
        CurrentStep = Models.DispatchStep.GuideDetails;
        await Task.CompletedTask;
    }
    private async Task ClickSearchPackage(MouseEventArgs args)
    {
        CurrentStep = Models.DispatchStep.Pending;
        await Task.CompletedTask;
    }
    private async Task ClickCheckPackage(MouseEventArgs args)
    {
        DialogOptions options2 = new DialogOptions { MaxWidth = MaxWidth.Medium, BackdropClick = false, NoHeader = true };
        var dialogReference = await DialogService.ShowAsync<PackageWeightConfirm>("", new DialogParameters { ["currentDispatch"] = currentDispatch}, options2);
        var result = await dialogReference.Result;

        if (!result!.Canceled)
        {
            CurrentStep = Models.DispatchStep.GuideDetails; // && dialogResult.Data is not null
        }
        // {
        // dynamic contactData = dialogResult.Data;
        // SelectedContact!.AgentId = contactData.ContactId;
        // SelectedContact!.AgentName = contactData.ContactName;
        // }
        await Task.CompletedTask; ;
    }
}