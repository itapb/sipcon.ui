@* @page "/mobile-setpackage" *@
@using Sipcon.WebApp.Client.Layout
@layout MobileLayout
<div style="flex-shrink: 0;" class="pa-3 jpv1-dialog-body-background">
    <MudPaper Elevation="2" Class="pa-3">

        <MudGrid Spacing="2">
            <MudItem xs="12">           
                <MudPaper Class="pa-2 mud-theme-info mud-typography-h6 d-flex flex-column justify-center align-center" style="line-height:1.1;">
                    <span>CLIENTE : DEMO</span>
                    <span>BULTO: 14765-2</span>
                </MudPaper>
            </MudItem>
                <MudItem xs="12" >
                <MudTextField T="string" ReadOnly="true" Label="REPUESTO" @bind-Value="strRepuesto" Class="d-flex align-center justify-center"></MudTextField>
                </MudItem>
                <MudItem xs="12" >
                <MudTextField T="int" ReadOnly="true" Label="PENDIENTE" @bind-Value="QTYPending" Class="d-flex align-center justify-center"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                <MudTextField T="int" Label="BULTO" @bind-Value="QTYPackage" Class="d-flex align-center justify-center" ></MudTextField>
                </MudItem>               
      
            <MudItem xs="12">
                <MudStack Row="true" Justify="Justify.Center">
                    <MudStack Row="true" Spacing="5"> 
                        <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Check" Size="Size.Medium" OnClick="ClickSetPackageCheck" />
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Close" Size="Size.Medium" OnClick="ClickSetPackageClose" />
                    </MudStack>
                </MudStack>
            </MudItem>
        </MudGrid>

    </MudPaper>
</div>
@code {
    [Parameter] public Models.Dispatch? currentDispatch { get; set; }
    [Parameter] public Models.DispatchStep Value { get; set; }
    [Parameter] public EventCallback<Models.DispatchStep> ValueChanged { get; set; }
    private Models.DispatchStep CurrentStep
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                ValueChanged.InvokeAsync(Value);
            }
        }
    }
    private async Task ClickSetPackageCheck(MouseEventArgs args)
    {
        CurrentStep = Models.DispatchStep.Package;
        await Task.CompletedTask;
    }
    private async Task ClickSetPackageClose(MouseEventArgs args)
    {
       if (Dispatch.PreviousStep ==  Models.DispatchStep.Package) 
            CurrentStep = Models.DispatchStep.Package;
       else
           CurrentStep = Models.DispatchStep.Pending;

        await Task.CompletedTask;
    }
    string strRepuesto = "Repuesto 1";
    int QTYPending = 100;
    int QTYPackage = 70;
}