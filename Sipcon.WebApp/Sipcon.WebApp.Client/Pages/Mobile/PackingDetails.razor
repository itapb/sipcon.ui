@* @page "/mobile-guidedetail" *@
@using Sipcon.WebApp.Client.Layout
@layout MobileLayout

<div style="flex-shrink: 0;" class="pa-3 jpv1-dialog-body-background">
    <MudPaper Elevation="2" Class="pa-3">
        <MudGrid Spacing="2">
            <MudItem xs="12">
                <MudStack Row="false" Class="pa-2 mud-theme-info mud-typography-h6" Spacing="1" style="line-height:1.1;">
                    <div>CLIENTE : @currentPacking?.CustomerName</div>
                    <MudStack Row="true" StretchItems="StretchItems.Start" Justify="Justify.FlexEnd">
                        <div>BULTOS</div>                      
                    </MudStack>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudText>
                    <MudDataGrid @ref="PackagesMudDataGrid" T="Models.Package" ServerData="ServerReload" Striped="true" Hover="true" Filterable="false" Loading="_loading" FixedHeader SelectedItemChanged="ClickSelectPackage" @bind-CurrentPage="GuideCurrentPage" ShowColumnOptions="false" Class="hide-datagrid-headers">
                        <Columns>
                            <TemplateColumn CellClass="d-flex justify-center align-center">
                                <CellTemplate>
                                    <MudStack Row>
                                        <MudText Class="mr-2" Color="@((context.Item.Closed ?? false) ? Color.Success : Color.Inherit)">@context.Item.Code</MudText>
                                        <MudText Class="mr-2" Color="@((context.Item.Closed ?? false) ? Color.Success : Color.Inherit)">@context.Item.Weight Kg</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <PagerContent>
                            <MudStack Row="false" Spacing="2">
                                <MudPaper Class="pa-3">
                                    <MudTextField T="string" Placeholder="Buscar" Adornment="Adornment.Start" ValueChanged="@(s => OnSearch(s))" Value="searchString" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="height:40px;" />
                                </MudPaper>
                            </MudStack>
                        </PagerContent>
                    </MudDataGrid>
                </MudText>
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="true" Justify="Justify.Center">
                    <MudStack Row="true" Spacing="5">
                        <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="ClickAddPackage" />
                        <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Check" Size="Size.Medium" OnClick="ClickDispatchGuide" />
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="ClickRefreshPacking" />
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Close" OnClick="ClickClosePacking" Size="Size.Medium" />
                    </MudStack>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>
<style>
    .hide-datagrid-headers .mud-table-head {
        display: none !important;
    }
</style>
@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Models.Packing? currentPacking { get; set; } = default!;
    [Parameter] public Models.PackingStep Value { get; set; }
    [Parameter] public EventCallback<Models.PackingStep> ValueChanged { get; set; }
    private Models.PackingStep CurrentStep
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                ValueChanged.InvokeAsync(Value);
            }
        }
    }
    bool _loading = true;
    string searchString = "";
    private int GuideCurrentPage = 0;


    private MudDataGrid<Models.Package>? PackagesMudDataGrid;


    Func<Models.Package, object> GetSortKeySelector(string sortByPropertyName) => sortByPropertyName switch
    {
        nameof(Models.Package.Code) => o => o.Code ?? "",
        nameof(Models.Package.Weight) => o => o.Weight ?? 0,
        _ => null!
    };

    private async Task<GridData<Models.Package>> ServerReload(GridState<Models.Package> state)
    {
        _loading = true;
        var totalItems = 0;
        var mOffset = state.Page * state.PageSize;
        IEnumerable<Models.Package> data;
        HttpResponseMessage response = await Http.GetAsync($"api/Packing/GetPackages?supplierId={currentPacking?.SupplierId}&customerId={currentPacking?.CustomerId}&userId={currentPacking?.UserId}");
        if (response.IsSuccessStatusCode)
        {
            var content2 = await response.Content.ReadFromJsonAsync<WebApiResponse<List<Models.Package>>>();
            totalItems = content2!.total ?? 0;
            data = content2!.data ?? new List<Models.Package>();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }
        if (state.SortDefinitions.FirstOrDefault() is SortDefinition<Models.Package> sortDefinition)
        {
            data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, GetSortKeySelector(sortDefinition.SortBy));
        }
        _loading = false;
        return new GridData<Models.Package> { TotalItems = totalItems, Items = data };

    }

    private async Task ClickRefreshPacking(MouseEventArgs ev)
    {
        await PackagesMudDataGrid!.ReloadServerData();
    }
    private async Task OnSearch(string text)
    {
        if (text.Length == 0 || text.Length >= 3)
        {
            _loading = true;
            searchString = text;
            await PackagesMudDataGrid!.ReloadServerData();
        }
    }
    private async Task ClickSelectPackage(Models.Package item)
    {
        currentPacking!.PackageId = item.Id;
        currentPacking!.Code = item.Code;
        currentPacking!.PackageClosed = item.Closed;
        currentPacking!.Number = item.Number;
        CurrentStep = Models.PackingStep.Package;
        await Task.CompletedTask;
    }
    private async Task ClickClosePacking(MouseEventArgs args)
    {
        currentPacking!.PackageId = 0;
        CurrentStep = Models.PackingStep.Customer;
        await Task.CompletedTask;
    }

    private async Task ClickDispatchGuide(MouseEventArgs args)
    {

        if (await  IsValidAnyPackages()) CurrentStep = Models.PackingStep.DispatchGuide;
        await Task.CompletedTask;

    }
    private async Task<bool> IsValidGuide(Models.Packing? packing)
    {
        string msgresult = "";
        if (PackagesMudDataGrid!.FilteredItems.Count() == 0) msgresult = "No hay bultos para confirmar";
        else if (PackagesMudDataGrid!.FilteredItems.Any(r => r.Closed == false)) msgresult = "Algun bulto esta abierto!";
        if (msgresult.Length > 0) await DialogService.ShowDialog(msgresult, "Error GUIA", "OK", Color.Error, Icons.Material.Filled.Error);

        return (msgresult.Length == 0);
    }
    private async Task ClickAddPackage(MouseEventArgs args)
    {
        var result_NewPackage = await Http.PostAsync($"api/Packing/NewPackage?supplierId={currentPacking?.SupplierId}&customerId={currentPacking?.CustomerId}", null);
        if (result_NewPackage.IsSuccessStatusCode)
        {
            var result = await DialogService.ShowDialog(Useful.OkSavedMessage, "Nuevo Bulto", "OK", Color.Info, Icons.Material.Filled.Commit);
            if (!result!.Canceled)
            {
                await PackagesMudDataGrid!.ReloadServerData();
            }

        }
    }
    private async Task<bool> IsValidAnyPackages()
    {
        string msgresult = "";
        if (PackagesMudDataGrid!.FilteredItems.Count(r => r.Closed == true) == 0) msgresult = "No hay algun bulto cerrado!";        
        if (msgresult.Length > 0) await DialogService.ShowDialog(msgresult, "Error GUIA", "OK", Color.Error, Icons.Material.Filled.Error);

        return (msgresult.Length == 0);
    }
}