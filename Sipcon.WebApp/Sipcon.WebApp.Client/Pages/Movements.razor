<CustomBreadcrumbs mItems="ItemsNavigate"></CustomBreadcrumbs>
@if (MovementId != null)
{
    <MovementForm @bind-Value="MovementId" />
}
else
{
    <MudDataGrid @ref="MovementMudDataGrid" T="Movement" ServerData="ServerReload" Striped="true" Hover="true" Filterable="false" FixedHeader Height="calc(100vh - 240px)" Loading="Loading" @bind-CurrentPage="ReceptionCurrentPage">
        <ToolBarContent>
            <MudIconButton Icon="@Icons.Material.Filled.AddCard" Color="Color.Info" OnClick="ClickNewMovement"></MudIconButton>
            <MudTextField T="string" Placeholder="Buscar" Adornment="Adornment.Start" ValueChanged="@(s => OnSearch(s))" Value="searchString" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Info" OnClick="ClickRefreshMovement"></MudIconButton>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu">
                @foreach (var strmodulo in Modules!)
                {
                    <MudMenuItem Label="@strmodulo.ActionDisplay" Icon="@(strmodulo.ActionDisplay.ToActionIcon())" IconColor="@Color.Info" OnClick="@(() => ClickMenuMovement(strmodulo.ActionName))" />
                }
            </MudMenu>
        </ToolBarContent>
        <Columns>
            <TemplateColumn>
                <HeaderTemplate>
                    <MudCheckBox @bind-Value="IsAllCheckBoxSelected" @bind-Value:after="AfterAsyncAllCheck" />
                </HeaderTemplate>
                <CellTemplate>
                    <MudCheckBox @bind-Value="context.Item.IsSelected" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Id" Title="Nro" />
            <PropertyColumn Property="x => x.Created" Title="Fecha" />
            <PropertyColumn Property="x => x.TypeName" Title="Tipo" />
            <PropertyColumn Property="x => x.Reference" Title="Referencia" />
            <PropertyColumn Property="x => x.StatusName" Title="Status" />
            <PropertyColumn Property="x => x.AssignTo" Title="Usuario" />
            <TemplateColumn StickyRight="true">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="() => ClickEditMovement(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Movement" PageSizeOptions="new int[] { 100 }" InfoFormat="{first_item}-{last_item} de {all_items}" RowsPerPageString="Registros por Pagina" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    List<BreadcrumbItem> ItemsNavigate = new();    

    [Parameter]   
    public string? TypeId { get; set; } 
    private int? MovementId = null;    //4

    private bool IsAllCheckBoxSelected = false;
    int ReceptionCurrentPage = 0;
    bool Loading = false;
    private MudDataGrid<Movement>? MovementMudDataGrid;
    private List<Module>? Modules;
    DialogOptions options = new DialogOptions { MaxWidth = MaxWidth.Large, BackdropClick = false, NoHeader = true };
    private string searchString = string.Empty;
    // protected override async Task OnParametersSetAsync()
    // {

    // }        

    private async Task OnSearch(string text)
    {
        if (text.Length == 0 || text.Length >= 3)
        {
            Loading = true;
            searchString = text;
            await MovementMudDataGrid!.ReloadServerData();
        }
    }
    private async Task ClickRefreshMovement(MouseEventArgs args) => await MovementMudDataGrid!.ReloadServerData();
    private async Task ClickNewMovement(MouseEventArgs ev)
    {        
        HttpResponseMessage response = await Http.GetAsync($"api/Inventory/NewMovementWithContext?userId={Useful.userId}&supplierId={Useful.supplierId}&typeId={TypeId!.ToUpper()}");
        if (response.IsSuccessStatusCode)
        {
            var content2 = await response.Content.ReadFromJsonAsync<WebApiResponse<MasterMovementDetails>>();
            var data = content2!.data ?? new MasterMovementDetails();
            MovementId = data.Movement?.Id;
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }
        await Task.CompletedTask;
    }
    private async Task AfterAsyncAllCheck()
    {
        MovementMudDataGrid?.FilteredItems.ToList().ForEach(item => item.IsSelected = IsAllCheckBoxSelected);
        await Task.CompletedTask;
    }
    private async Task ClickEditMovement(Movement item) => await Task.FromResult(MovementId = item.Id);
    protected override async Task OnInitializedAsync() => await LoadDataAsync();

    private async Task LoadDataAsync()
    {      
        string MovementTitle = TypeId switch { "r" => "Recepcion", "t" => "Traslado", "d" => "Despacho", _ => "Recepcion" };
        $"Home,Inventario,Procesos,{MovementTitle}".Split(',').ToList().ForEach(s => ItemsNavigate.Add(new BreadcrumbItem(s, href: (s == "Home" ? "" : $"movements/{TypeId}"), icon: s.ToActionIcon())));
        Modules = await Http.GetFromJsonAsync<List<Module>>($"api/Module/GetAll?moduleName=INVENTARIO-PROCESOS-{MovementTitle.ToUpper()}&userId={Useful.userId}");
    }
    Func<Movement, object> GetSortKeySelector(string sortByPropertyName) => sortByPropertyName switch
    {         
        nameof(Movement.Id) => o => o.Id ?? 0,
        nameof(Movement.Created) => o => o.Created,
        nameof(Movement.TypeName) => o => o.TypeName,
        nameof(Movement.Reference) => o => o.Reference,
        nameof(Movement.StatusName) => o => o.StatusName,
        nameof(Movement.AssignTo) => o => o.AssignTo,
        _ => null! //o => o.Id ?? 0 // Criterio de ordenación por defecto        
    };

    private async Task<GridData<Movement>> ServerReload(GridState<Movement> state)
    {
        IsAllCheckBoxSelected = false;
        Loading = true;
        var totalItems = 0;
        var mOffset = state.Page * state.PageSize;
        IEnumerable<Movement> data;       
        HttpResponseMessage response = await Http.GetAsync($"api/Inventory/GetMovements?userId={Useful.userId}&supplierId={Useful.supplierId}&typeId={TypeId!.ToUpper()}&rowfrom={mOffset}&filter={searchString}");
        if (response.IsSuccessStatusCode)
        {
            var content2 = await response.Content.ReadFromJsonAsync<WebApiResponse<List<Movement>>>();
            totalItems = content2!.total ?? 0;
            data = content2!.data ?? new List<Movement>();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }

        if (state.SortDefinitions.FirstOrDefault() is SortDefinition<Movement> sortDefinition)
        {
            data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, GetSortKeySelector(sortDefinition.SortBy));
        }
        Loading = false;
        return new GridData<Movement> { TotalItems = totalItems, Items = data };
    }
    //private async Task<bool> AsyncDialogResultIsOk(IDialogReference? dialogReference) => ((await dialogReference!.Result is DialogResult dialogResult) && (!dialogResult.Canceled));
   
    
    private async Task ClickMenuMovement(string? actionName)
    {
        var strDictionary = new Dictionary<string, string> {{ "ASSIGN", "GENERADO" }, { "UNASSIGN", "ASIGNADO" }, { "GENERATE", "CREADO" }, { "DECLINE", "CREADO,GENERADO" }};
        var mActions = MovementMudDataGrid?.FilteredItems.Where(item => item.IsSelected && strDictionary[actionName!].Contains(item.StatusName.ToUpper()))
                                                         .Select(item => new Client.Models.Action
                                                                 {
                                                                     UserId = Useful.userId,
                                                                     RecordId = item.Id,
                                                                     ModuleId = Modules!.FirstOrDefault()?.Id,
                                                                     actionName = actionName,
                                                                     ActionComment = "",
                                                                     RelatedId = 0
                                                                 }).ToList();
        if (mActions?.Count > 0)
        {
            if (actionName == "ASSIGN")
            {
                string ModuleName = TypeId switch { "r" => "INVENTARIO-MOVIL-RECEPCION", "t" => "INVENTARIO-MOVIL-TRASLADO", "d" => "INVENTARIO-MOVIL-DESPACHO", _ => "INVENTARIO-MOVIL-RECEPCION" };
                var dialogReference = await DialogService.ShowAsync<AssignUserToMovement>("", new DialogParameters { ["SelectedActions"] = mActions, ["moduleName"] = ModuleName }, options);
                //var dialogResult = await dialogReference.Result;
                //if ((await dialogReference.Result is DialogResult dialogResult) && (!dialogResult.Canceled)) await MovementMudDataGrid!.ReloadServerData();
                if (await Useful.AsyncDialogResultIsOk(dialogReference)) await MovementMudDataGrid!.ReloadServerData();
               
            }
            else
            {
                await PostActionAndReload(mActions, $"api/Inventory/PostMovementActions?userId={Useful.userId}");
            }

        } 
    }
    private async Task PostActionAndReload(List<Models.Action>? actions, string requesturi)
    {        
        var result_Post_Actions = (actions?.Count > 0) ? await Http.PostAsync(requesturi, new StringContent(System.Text.Json.JsonSerializer.Serialize(actions), null, "application/json")) : null;
        if ((result_Post_Actions?.IsSuccessStatusCode ?? false))
        {            
            var rest = result_Post_Actions.Content.ReadAsStringAsync();
            await DialogService.ShowDialog(Useful.OkSavedMessage, "Accion", "OK", Color.Info, Icons.Material.Filled.Commit);
            await MovementMudDataGrid!.ReloadServerData();
        }
        else if (result_Post_Actions?.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            var conflictContent = await result_Post_Actions.Content.ReadFromJsonAsync<WebApiResponse<Object?>>();
            await DialogService.ShowDialog(conflictContent?.message!, "Error", "OK", Color.Error, Icons.Material.Filled.Error);
        }
        else
        {
            var errorMessage = await result_Post_Actions!.Content.ReadAsStringAsync() ?? "";
            throw new Exception(errorMessage);
        }
    }
}
