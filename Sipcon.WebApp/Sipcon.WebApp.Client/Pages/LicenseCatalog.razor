@using Sipcon.WebApp.Client.Models
@using Sipcon.WebApp.Client.Enum
@using Sipcon.WebApp.Client.Services

@inject ILicenseService LicenseService
@inject IDialogService DialogService

<MudGrid Spacing="0">
    <MudItem xs="12">
        <MudPaper Elevation="2" Class="jpv1-dialog-background-title pa-3" Square="true">
        <MudPaper Elevation="2" Class="pa-2 mud-text-align-center">
            <MudStack Row="true" StretchItems="StretchItems.Start" Justify="Justify.FlexEnd">
                <MudStack Row="true">
                    <MudText Typo="Typo.h6" Color="Color.Info">@(Title ?? "Licencias")</MudText>
                </MudStack>
                <MudStack>
                    <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="CloseClick" />
                </MudStack>
            </MudStack>
        </MudPaper></MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudDataGrid @ref="LicenseDetailGrid" 
            T="LicenseDetail" 
            ServerData="ServerReload" 
            Striped="true" 
            Hover="true" 
            Filterable="false" 
            FixedHeader Height="calc(100vh - 400px)" 
            @bind-CurrentPage="_CurrentPage">
        <ToolBarContent>
            <MudTextField T="string" Placeholder="Buscar" Adornment="Adornment.Start" ValueChanged="@(s => OnSearch(s))" Value="_searchString" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Info" OnClick="ClickRefreshCatalog"></MudIconButton>
        </ToolBarContent>
        <Columns>
            <TemplateColumn T="LicenseDetail" Title="VIN">
                <CellTemplate>
                    <MudText Typo="Typo.caption" Inline="true" Color="Color.Primary" Style="font-weight:bold;">@context.Item.VIN.ToUpper()</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="LicenseDetail" Title="LICENCIA">
                <CellTemplate>
                    <MudText Typo="Typo.caption" Inline="true" Style="font-weight:bold;">@context.Item.LicenseName.ToUpper()</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="LicenseDetail" Title="ESTATUS">
                <CellTemplate>
                    <div class="d-flex justify-center">
                        @if (context.Item.EstatusDetail != null)
                        {
                            string style = "";

                            if (context.Item.EstatusDetail.ToUpper() == "CREADO")
                                style += "";
                            else if (context.Item.EstatusDetail.ToUpper() == "ACTIVADO")
                            {
                                style += "color:#fff";
                                style += ";background-color:#0099F3";
                            }
                            else if (context.Item.EstatusDetail.ToUpper() == "APROBADO")
                            {
                                style += "color:#fff";
                                style += ";background-color:#0099F3";
                            }
                            else if (context.Item.EstatusDetail.ToUpper() == "PROCESADO")
                            {
                                style += "color:#fff";
                                style += ";background-color:#757575";
                            }
                            else
                            {
                                style += "color:#fff";
                                style += ";background-color:#FF7043";
                            }
                            style += ";font-size: 11px";
                            style += ";font-style:italic";

                            <MudChip T="string" Style="@style" Label="true" Disabled="true">
                                @(context.Item.EstatusDetail.ToUpper())
                            </MudChip>
                        }
                   
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.NextPlan" OnClick="() => ClickSelect(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="LicenseDetail" PageSizeOptions="new int[] { 100 }" InfoFormat="{first_item}-{last_item} de {all_items}" RowsPerPageString="Registros por Pagina" />
        </PagerContent>
    </MudDataGrid>
    </MudItem>
</MudGrid>


@code {

    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;   
    [Parameter] public string VIN { get; set; } = string.Empty;
    [Parameter] public string? Title { get; set; }
    
    private MudDataGrid<LicenseDetail>? LicenseDetailGrid;

    private string _searchString = string.Empty;
    private int _CurrentPage = 0;
    private int _rowCount = 0;
    private int _iduser = 1; // Cambia esto por el ID del usuario que estás utilizando
    private int _rowsTotal = 0;

    private async Task OnSearch(string text)
    {
        if (text.Length == 0 || text.Length >= 3)
        {
            _searchString = VIN;
            await LicenseDetailGrid!.ReloadServerData();
        }
    }

    Func<LicenseDetail, object> GetSortKeySelector(string sortByPropertyName) => sortByPropertyName switch
    {
        nameof(LicenseDetail.VIN) => o => o.VIN ?? "",
        nameof(LicenseDetail.LicenseName) => o => o.LicenseName ?? "",
        _ => null! //o => o.Id ?? 0 // Criterio de ordenación por defecto
    };


    private async Task<GridData<LicenseDetail>> ServerReload(GridState<LicenseDetail> state)
    {
         _searchString = VIN;
        _rowCount = state.Page * state.PageSize;
        IEnumerable<LicenseDetail> _LicenseDetails = new List<LicenseDetail>();
        var serviceResponse = await LicenseService.GetLicenseDetailsBy(Useful.userId, _searchString);

        if (serviceResponse.Processed)
        {
            _LicenseDetails = serviceResponse.Data;
            _rowsTotal = serviceResponse.Total;
           
        }
        else
        {
            _LicenseDetails = new List<LicenseDetail>();
            _rowsTotal = 0;
        }

        return new GridData<LicenseDetail> { TotalItems = _rowsTotal, Items = _LicenseDetails };

    }


    private async Task ClickRefreshCatalog(MouseEventArgs ev)
    {
        await LicenseDetailGrid!.ReloadServerData();
    }


    private async Task ClickSelect(LicenseDetail item)  
    {  
        MudDialog?.Close(DialogResult.Ok(item));
        await Task.CompletedTask;  
    }  
   

    private void CloseClick(MouseEventArgs args)
    {
        MudDialog?.Close();
    }
}
