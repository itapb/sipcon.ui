@using Sipcon.WebApp.Client.Models
@using Sipcon.WebApp.Client.Services
@using Sipcon.WebApp.Client.Utils
@using Sipcon.WebApp.Client.Enum
@using FluentValidation


@inject IDialogService DialogService
@inject IVehicleService VehicleService
@inject UtilModuleActions ModuleActionsService

<MudForm Model="@_model" @ref="@form" Validation="@(_modelValidator.ValidateValue)" ValidationDelay="0">
    <MudDialog Class="blur dialog-background " ActionsClass="dialog-background-surface">

        <DialogContent >

            <MudContainer Class="blur dialog-background-title py-2 pt-2 pa-2">

                <MudCard>

                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudGrid Spacing="0" Justify="Justify.Center">
                                <MudItem xs="12" sm="4">
                                    <div class="d-flex justify-left">

                                        <MudSwitch @bind-Value="_model.IsActive" Label="Activo" LabelPlacement="Placement.End" Color="Color.Success" Disabled="@(ActionsModal == ActionsEnum.Create ? true : false)" />
                                        <MudHidden @bind-Value="IdVehicle" />
                                    </div>
                                </MudItem>
                                <MudItem xs="12" sm="2">

                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <div class="d-flex justify-right" style="justify-content: end;">

                                        <MudButton OnClick="Cancel">Cancelar</MudButton>
                                        <MudFab StartIcon="@Icons.Material.Filled.Save" Label="Aceptar" OnClick="@(async () => await OnValidSubmit())" Color="Color.Info" Size="Size.Small" />

                                    </div>
                                </MudItem>
                            </MudGrid>


                        </CardHeaderContent>

                    </MudCardHeader>

                </MudCard>

            </MudContainer>

            <MudContainer Class="dialog-background-surface py-2 pt-2 pa-2">
                <MudGrid Spacing="1" Justify="Justify.Center">


                    <MudItem xs="12" sm="4">
                        <MudCard>

                            <MudCardContent Style="padding-top: 0px;">
                                <div class="d-flex justify-center">

                                    <MudTooltip Text="Imagen Veiculo">
                                        <MudImage ObjectFit="ObjectFit.Cover" Width="172" Height="156" Src="images/changan_rojo_1.png" Alt="Model Card" Elevation="25" Class="" />
                                    </MudTooltip>
                                </div>


                                <MudSelect Typo="Typo.caption" @bind-Value="@_model.ColorId" Label="Color" AdornmentColor="Color.Default" 
                                Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                For="@(() => _model.ColorId)"
                                Immediate="true">
                                    @foreach (var model in _VehicleColorList)
                                    {
                                        <MudSelectItem Value="@model.Value">@model.Text</MudSelectItem>
                                    }
                                </MudSelect>

                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="8">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>

                                    <MudGrid Spacing="0" Justify="Justify.Center">
                                        <MudItem xs="12" sm="8">

                                            <div class="d-flex justify-left">

                                                <MudStack Row="true">
                                                    <MudIcon Icon="@Icons.Material.Filled.CarRental" Color="Color.Default" Style="font-size: 2rem;"></MudIcon>
                                                    <MudText Typo="Typo.h6">Datos del Vehiculo</MudText>

                                                </MudStack>
                                            </div>
                                        </MudItem>

                                        <MudItem xs="12" sm="4">


                                            <MudText Typo="Typo.button" Align="Align.Center" Color="Color.Primary">@_model.EstatusName</MudText>


                                        </MudItem>
                                    </MudGrid>



                                </CardHeaderContent>

                            </MudCardHeader>
                            <MudCardContent Style="padding-top: 0px;">
                                <MudHidden @bind-Value="_model.Id" />
                                <MudStack Row="true">
                                    <MudNumericField Typo="Typo.caption" @bind-Value="_model.Year" Label="Año" Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                    MaxLength="4"
                                    HideSpinButtons="true" 
                                    For="@(() => _model.Year)"
                                    Immediate="true"></MudNumericField>
                                    <MudTextField Typo="Typo.caption" @bind-Value="_model.Plate" Label="Placa" Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                    MaxLength="12"              
                                    For="@(() => _model.Plate)"
                                    Immediate="true" />
                                </MudStack>
                                <MudStack Row="true">
                                    <MudTextField Typo="Typo.caption" @bind-Value="_model.Vin" Label="VIN" Margin="Margin.Dense" Disabled="@(!_model.IsActive)" 
                                    MaxLength="20" 
                                    For="@(() => _model.Vin)"
                                    Immediate="true"/>
                                    <MudTextField Typo="Typo.caption" @bind-Value="_model.EngineSerial" Label="Serial Motor" 
                                    MaxLength="14"
                                    Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                    For="@(() => _model.EngineSerial)"
                                    Immediate="true" />
                                </MudStack>
                                <MudStack Row="true">

                                    <MudSelect Typo="Typo.caption" @bind-Value="@_model.ModelId" Label="Modelo" AdornmentColor="Color.Default" 
                                    Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                    For="@(() => _model.ModelId)"
                                    Immediate="true">
                                        @foreach (var model in _VehicleModelList)
                                        {
                                            <MudSelectItem Value="@model.Value">@model.Text</MudSelectItem>
                                        }
                                    </MudSelect>

                                    <MudHidden @bind-Value="_model.BrandId" />
                                    <MudTextField Typo="Typo.caption" @bind-Value="_model.BrandName" Label="Marca" Variant="Variant.Filled" Margin="Margin.Dense" Disabled="true" />
                                </MudStack>



                            </MudCardContent>

                        </MudCard>
                    </MudItem>


                    <MudItem xs="12" sm="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.Settings" Color="Color.Default" Style="font-size: 1.5rem;"></MudIcon>
                                        <MudText Typo="Typo.subtitle2">Opciones</MudText>
                                    </MudStack>

                                </CardHeaderContent>
                                <CardHeaderActions>

                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent Style="padding-top: 3px;">
                                <MudStack Row="true">

                                    <MudSelect Typo="Typo.caption" @bind-Value="@_model.SupplierId" Label="Planta" AdornmentColor="Color.Default" 
                                    Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                    For="@(() => _model.SupplierId)"
                                    Immediate="true">
                                        @foreach (var model in _VehicleSupplierList)
                                        {
                                            <MudSelectItem Value="@model.Value">@model.Text</MudSelectItem>
                                        }
                                    </MudSelect>


                                    <MudSelect Typo="Typo.caption" @bind-Value="@_model.DealerId" Label="Concecionario" AdornmentColor="Color.Default" 
                                    Margin="Margin.Dense" Disabled="@(!_model.IsActive)"
                                    For="@(() => _model.DealerId)"
                                    Immediate="true">
                                        @foreach (var model in _VehicleDealerList)
                                        {
                                            <MudSelectItem Value="@model.Value">@model.Text</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudStack>


                            </MudCardContent>
                        </MudCard>


                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.SupervisedUserCircle" Color="Color.Default" Style="font-size: 1.5rem;"></MudIcon>
                                        <MudText Typo="Typo.subtitle2">Cliente</MudText>
                                    </MudStack>

                                </CardHeaderContent>
                                <CardHeaderActions>

                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent Style="padding-top: 0px;">
                                <MudHidden @bind-Value="_model.CustomerId" />
                                <MudTextField Typo="Typo.caption" @bind-Value="_model.CustomerName" Label="Cliente" Variant="Variant.Filled" Margin="Margin.Dense" Disabled="true"  />

                            </MudCardContent>

                        </MudCard>
                    </MudItem>

                </MudGrid>
            </MudContainer>


            <MudDialog @bind-Visible="_nestedModalVisible">
                <TitleContent>
                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Filled.CarRental" Color="@(_successModal ? Color.Default : Color.Error)" Style="font-size: 2rem;"></MudIcon>
                        <MudText Typo="Typo.h6">Vehiculo</MudText>
                    </MudStack>
                </TitleContent>
                <DialogContent>
                    <MudStack Row="true">
                        @* <MudIcon Icon="@(_successModal ? Icons.Material.Filled.VerifiedUser : Icons.Material.Filled.Dangerous)" Color="@(_successModal ? Color.Success : Color.Error)" Size="Size.Medium" /> *@
                        <MudText Class="nested"><p>@_errorModalMessage!</p> </MudText>
                    </MudStack>
                </DialogContent>
                <DialogActions>
                    <MudButton Color="Color.Info" OnClick="CloseNestedModal" Variant="Variant.Filled" Class="px-10">Ok</MudButton>
                </DialogActions>
            </MudDialog>

        </DialogContent>

    </MudDialog>
</MudForm>
<style>
    .blur {
    backdrop-filter: blur(10px);
    }

    .dialog-background {
    background-color: transparent;
    }

    .dialog-background-title {
    background: rgb(from var(--mud-palette-info-lighten) r g b / 50%);
    color: var(--mud-palette-white);
    }

    .dialog-background-surface {
    background: rgb(from var(--mud-palette-surface) r g b / 75%);
    }
</style>

@code {


    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public int IdVehicle { get; set; }
    [Parameter]
    public ActionsEnum ActionsModal { get; set; }

    private MudForm form;
    private Vehicle _model { get; set; } = new Vehicle();

    private string _errorModalMessage = string.Empty;
    private bool _nestedModalVisible;
    bool _successModal = false;

    private int _iduser = 1; // Cambia esto por el ID del usuario que estás utilizando

    private IEnumerable<SelectOption> _VehicleColorList { get; set; } = new List<SelectOption>();
    private IEnumerable<SelectOption> _VehicleModelList { get; set; } = new List<SelectOption>();
    private IEnumerable<SelectOption> _VehicleSupplierList { get; set; } = new List<SelectOption>();
    private IEnumerable<SelectOption> _VehicleDealerList { get; set; } = new List<SelectOption>();

    ModelValidator _modelValidator = new ModelValidator();


    protected override async Task OnInitializedAsync()
    {
        if (ActionsModal == ActionsEnum.Create)
        {
            _model = new Vehicle();

            _VehicleColorList = await ModuleActionsService.GetColorOption(_iduser);
            _VehicleModelList = await ModuleActionsService.GetModelOption(_iduser);
            _VehicleSupplierList = await ModuleActionsService.GetSupplierOption(_iduser);
            _VehicleDealerList = await ModuleActionsService.GetDealerOption(_iduser);

            await Task.Delay(100);
           
        }
        else
        {
            await GetVehicle();

        }
        await Task.CompletedTask;
    }

    private async Task GetVehicle()
    {
        var serviceResponse = await VehicleService.GetVehicle(IdVehicle, _iduser);
        if (serviceResponse.Processed)
        {
            _model = serviceResponse.Data ?? new Vehicle();

            _VehicleColorList = await ModuleActionsService.GetColorOption(_iduser);

            _VehicleModelList = await ModuleActionsService.GetModelOption(_iduser);

            _VehicleSupplierList = await ModuleActionsService.GetSupplierOption(_iduser);

            _VehicleDealerList = await ModuleActionsService.GetDealerOption(_iduser);


            await Task.Delay(100);
            StateHasChanged();
        }
        else
        {
            _model = new Vehicle();
          
            _errorModalMessage = "(Problemas al cargar Vehiculo) Vehiculo no encontrado...";
            Console.WriteLine(serviceResponse.Message);
            OpenNestedModal();
        }


        await Task.CompletedTask;

    }


    // private async Task OnSwitchValueChanged(bool newValue)
    // {
    //     // !_model.IsActive = _model.IsActive ? false : true;
    //     _model.IsActive = newValue; // Actualiza el modelo con el nuevo valor del switch.
    //     await Task.CompletedTask;
    // }



    private async Task OnValidSubmit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            _errorModalMessage = "";

            var serviceResponse = await VehicleService.UpdateVehicle(_model, _iduser);
            if (serviceResponse.Processed)
            {
                if (ActionsModal == ActionsEnum.Create)
                {
                    ActionsModal = ActionsEnum.Edit;
                    var _results = serviceResponse.Data ?? new List<ActionResult>();
                    var _result = _results.FirstOrDefault();
                    if (_result is not null)
                    {
                        IdVehicle = _result.LastId;
                        await GetVehicle();
                    }

                }
                _errorModalMessage = "Vehiculo guardado Satisfactoriamente...";
                _successModal = true;

            }
            else
            {
                _successModal = false;
                _errorModalMessage = "!Problemas al guardar Vehiculo...";
                Console.WriteLine(serviceResponse.Message);            
            }

            OpenNestedModal();
        }

        StateHasChanged();
        await Task.CompletedTask;

    }


    private void Cancel()
    {
        if (_successModal)
            MudDialog.Close(DialogResult.Ok(true));
        else
        {
            MudDialog!.Cancel();
        }
    } 

    private void OpenNestedModal() => _nestedModalVisible = true;

    private async Task CloseNestedModal()
    {
        _nestedModalVisible = false;

        await Task.Delay(50);
        MudDialog.Close(DialogResult.Ok(true));
        await Task.CompletedTask;

    }



    /// <summary>
    /// Validacion del formulario
    /// </summary>
    /// <typeparam name="Vehicle"></typeparam>
    public class ModelValidator : AbstractValidator<Vehicle>
    {
        public ModelValidator()
        {
            RuleFor(x => x.ColorId)
                .NotNull().WithMessage("Campo requerido")
                .GreaterThan(0).WithMessage("Seleccione un Color.");

            RuleFor(x => x.Year)
                .NotNull().WithMessage("Campo requerido")
                .NotEmpty().WithMessage("Campo requerido")
            .Custom((value, context) =>
                {
                    if ( value > DateTime.Now.Year + 5)
                    {
                        context.AddFailure($"Campo requerido entre {(DateTime.Now.Year - 20).ToString() + "-" + (DateTime.Now.Year +5)}");
                    }
                });
               

            RuleFor(x => x.Plate)
                .NotNull().WithMessage("Campo requerido")
                .NotEmpty().WithMessage("Campo requerido")
                .Length(1, 12).WithMessage("Campo requerido entre 1-12 carácteres");

            RuleFor(x => x.Vin)
                .NotNull().WithMessage("Campo requerido")
                .NotEmpty().WithMessage("Campo requerido")
                .Length(1, 20).WithMessage("Campo requerido entre 1-20 carácteres");

            RuleFor(x => x.EngineSerial)
                .NotNull().WithMessage("Campo requerido")
                .NotEmpty().WithMessage("Campo requerido")
                .Length(1, 14).WithMessage("Campo requerido entre 1-14 carácteres");

            RuleFor(x => x.ModelId)
                .NotNull().WithMessage("Campo requerido")
                .GreaterThan(0).WithMessage("Seleccione un Modelo.");


            RuleFor(x => x.SupplierId)
                 .NotNull().WithMessage("Campo requerido")
                 .GreaterThan(0).WithMessage("Seleccione una Planta.");

            // RuleFor(x => x.DealerId)
            //     .NotNull().WithMessage("Campo requerido")
            //     .GreaterThan(0).WithMessage("Seleccione un Concesionario.");

        }


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Vehicle>.CreateWithOptions((Vehicle)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };

    }
}
