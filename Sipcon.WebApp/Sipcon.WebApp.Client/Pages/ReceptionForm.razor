 <div id="scrollableGridContentStyled" style="overflow-y: auto;  padding: 8px; background-color: #f0f0f0;">
    <MudGrid Spacing="2">
        <MudItem xs="12" sm="9">
            <MudStack>
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center">
                    <MudStack Row="true" Spacing="2">
                        <MudFab StartIcon="@Icons.Material.Filled.Update" Color="Color.Info" Size="Size.Small" Label="Guardar" OnClick="GuardarClick" Disabled="@IsGenerated"></MudFab>
                        <MudButton OnClick="CerrarClick">Cerrar</MudButton>
                    </MudStack>
                </MudPaper>
                <MudPaper Elevation="2">
                        <MudDataGrid @ref="MovementDetailsMudDataGrid" T="MovementDetails" ServerData="ServerReload" Filterable="false" FixedHeader Height="calc(100vh - 230px)" Loading="Loading" @bind-CurrentPage="PartCurrentPage">
                        <ToolBarContent>
                            <MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd" Size="Size.Large" OnClick="ClickAddReceptionDetail" Color="Color.Info" Disabled="@IsGenerated"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.PlaylistRemove" Size="Size.Large" OnClick="ClickRemoveReceptionDetail" Color="Color.Info" Disabled="@IsGenerated"></MudIconButton>
                        </ToolBarContent>
                        <Columns>
                            <TemplateColumn>
                                <HeaderTemplate>
                                    <MudCheckBox @bind-Value="IsAllCheckBoxSelected" @bind-Value:after="AfterAsyncAllCheck" />
                                </HeaderTemplate>
                                <CellTemplate>
                                    <MudCheckBox @bind-Value="context.Item.IsSelected" />
                                </CellTemplate>
                            </TemplateColumn>
                            <PropertyColumn Property="x => x.PartInnerCode" Title="Cod Respuesto" />
                            <PropertyColumn Property="x => x.PartDescription" Title="Descripcion" />
                            <PropertyColumn Property="x => x.LocationName" Title="Ubicacion" />
                            <PropertyColumn Property="x => x.RequiredQty" Title="Teorica" />
                            <PropertyColumn Property="x => x.RealQty" Title="Real" />
                            <PropertyColumn Property="x => x.TypeName" Title="Tipo" />
                            <PropertyColumn Property="x => x.Processed" Title="Status" />
                            <TemplateColumn StickyRight="true">
                                <CellTemplate>
                                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="() => ClickEditReceptionDetail(context.Item)" Disabled="@IsGenerated" />
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </MudPaper>
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="3">
            <MudStack Style="height: 100%; flex: 1 1 auto;">
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center flex-grow-1">
                    <MudGrid Spacing="2">
                        <MudItem xs="12"><MudText Typo="Typo.h6" Color="Color.Info">Datos Generales:</MudText></MudItem>
                        @if (MasterMovement == null)
                        {
                            <MudItem xs="12"><MudTextField T="string" ReadOnly="true" Value="@("Cargando..")" Variant="Variant.Text" Margin="Margin.Dense" /></MudItem>
                        }
                        else
                        {
                            <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterMovement.TypeName" Adornment="Adornment.Start" AdornmentText="Tipo :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                            <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterMovement.Id" Adornment="Adornment.Start" AdornmentText="Nro Doc :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                            <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterMovement.Created" Adornment="Adornment.Start" AdornmentText="Fecha :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                            <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterMovement.CreatedBy" Adornment="Adornment.Start" AdornmentText="Usuario :" Variant="Variant.Text" Margin="Margin.Dense" Class="align-right-input" /></MudItem>
                            <MudItem xs="12"><MudTextField ReadOnly="true" @bind-Value="MasterMovement.StatusName" Adornment="Adornment.Start" AdornmentText="Estatus :" Variant="Variant.Text" Margin="Margin.Dense" Class="align-right-input" /></MudItem>
                            <MudItem xs="12"><MudTextField ReadOnly="@IsGenerated" @bind-Value="MasterMovement.Reference" Label="Referencia" Variant="Variant.Text" Margin="Margin.Dense" /></MudItem>
                            <MudItem xs="12"><MudTextField ReadOnly="@IsGenerated" @bind-Value="MasterMovement.Comment" Label="Observacion" Variant="Variant.Text" Margin="Margin.Dense" /></MudItem>
                        }

                    </MudGrid>
                </MudPaper>
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center flex-grow-1">
                    <MudGrid Spacing="2">
                        <MudItem xs="12"><MudText Typo="Typo.h6" Color="Color.Info">Totales:</MudText></MudItem>
                        <MudItem xs="12"><MudTextField ReadOnly="true" Adornment="Adornment.Start" Margin="Margin.Dense" @bind-Value="UnitValue" AdornmentText="Unidad :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                        <MudItem xs="12"><MudTextField ReadOnly="true" Adornment="Adornment.Start" Margin="Margin.Dense" @bind-Value="ProductValue" AdornmentText="Productos :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                        <MudItem xs="12"><MudTextField ReadOnly="true" Adornment="Adornment.Start" Margin="Margin.Dense" @bind-Value="CostValue" AdornmentText="Costo :" Variant="Variant.Text" Class="align-right-input" /></MudItem>
                    </MudGrid>
                </MudPaper>
                <MudPaper Elevation="2" Class="pa-2 mud-text-align-center">
                    <MudStack Row="true" Spacing="2" Justify="Justify.FlexEnd" StretchItems="StretchItems.Start">
                        <MudFab StartIcon="@Icons.Material.Filled.CheckCircleOutline" Color="Color.Info" Size="Size.Small" Label="Generar" OnClick="GenerateClick" Disabled="@IsGenerated">

                        </MudFab>
                    </MudStack>
                </MudPaper>
            </MudStack>
        </MudItem>
    </MudGrid>
    </div>

<style>
    .align-right-input input {
        text-align: right;
    }
</style>
@code {
    [Inject] private HttpClient Http { get; set; } = default!;   
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Parameter] public int? Value { get; set; }
    [Parameter] public EventCallback<int?> ValueChanged { get; set; }
    DialogOptions options = new DialogOptions { MaxWidth = MaxWidth.Large, BackdropClick = false, NoHeader = true };
    int PartCurrentPage = 0;
    bool IsGenerated = false;
    private int? MovementId
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                ValueChanged.InvokeAsync(Value);
            }
        }
    }
    private int UnitValue = 0;
    private int ProductValue = 0;
    private decimal CostValue = 0;

    private bool IsSelected = false;
    private bool IsAllCheckBoxSelected = false;

    bool Loading = false;
    private Movement? MasterMovement;
    private MudDataGrid<MovementDetails>? MovementDetailsMudDataGrid = new();

    private async Task AfterAsyncAllCheck()
    {
        if (MovementDetailsMudDataGrid != null)
            MovementDetailsMudDataGrid.FilteredItems.ToList().ForEach(item => item.IsSelected = IsAllCheckBoxSelected);
        //StateHasChanged();
        await Task.CompletedTask;
    }
    private async Task ClickEditReceptionDetail(MovementDetails item)
    {
        NewMovementDetail AnewMovementDetail = new NewMovementDetail
        {
            Id = item.Id,
            PartId = item.PartId,
            MovementId = item.MovementId,
            LocationId = item.LocationId,
            DestinationId = item.DestinationId,
            RequiredQty = item.RequiredQty
        };
        var dialogReference = await DialogService.ShowAsync<PartToReception>("", new DialogParameters { ["newMovementDetail"] = AnewMovementDetail }, options);
        var dialogResult = await dialogReference.Result;
        if (!dialogResult!.Canceled)
        {
            await MovementDetailsMudDataGrid!.ReloadServerData();
        }

    }

    private void getTotals(IEnumerable<MovementDetails> data)
    {
        var filteredData = data.Where(x => x.TypeId == "P");
        UnitValue = filteredData.Sum(x => x.RequiredQty) ?? 0;
        ProductValue = filteredData.Count();
        CostValue = filteredData.Sum(x => x.SubTotal);
    }

    private async Task<GridData<MovementDetails>> ServerReload(GridState<MovementDetails> state)
    {
        IsAllCheckBoxSelected = false;
        Loading = true;
        var totalItems = 0;
        var mOffset = state.Page * state.PageSize;
        IEnumerable<MovementDetails> data;
        HttpResponseMessage response = await Http.GetAsync($"api/Inventory/GetMovementWithContext?userId={Useful.userId}&movementId={MovementId}");
        if (response.IsSuccessStatusCode)
        {
            var content2 = await response.Content.ReadFromJsonAsync<WebApiResponse<MasterMovementDetails>>();
            totalItems = content2!.total ?? 0;
            var masterMovementDetails = content2!.data ?? new MasterMovementDetails();
            MasterMovement = masterMovementDetails.Movement;
            data = masterMovementDetails.Details!;
            IsGenerated = MasterMovement!.StatusName.ToUpper() == "GENERADO";
            getTotals(data);
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }
        if (state.SortDefinitions.FirstOrDefault() is SortDefinition<MovementDetails> sortDefinition)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(MovementDetails.PartInnerCode):
                    data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, o => o.PartInnerCode);
                    break;
                case nameof(MovementDetails.PartDescription):
                    data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, o => o.PartDescription);
                    break;
                case nameof(MovementDetails.LocationName):
                    data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, o => o.LocationName);
                    break;
                case nameof(MovementDetails.RequiredQty):
                    data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, o => o.RequiredQty);
                    break;
                case nameof(MovementDetails.RealQty):
                    data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, o => o.RealQty);
                    break;
                case nameof(MovementDetails.TypeName):
                    data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, o => o.TypeName);
                    break;
            }
        }
        Loading = false;
        StateHasChanged();
        return new GridData<MovementDetails> { TotalItems = totalItems, Items = data };
    }

    private void CerrarClick()
    {
        MovementId = null; 
    }
    private async Task ClickAddReceptionDetail(MouseEventArgs ev)
    {       
        var dialogReference = await DialogService.ShowAsync<PartsCatalog>("", new DialogParameters { ["MovementId"] = MasterMovement!.Id }, options);
        var dialogResult = await dialogReference.Result;
        if (!dialogResult!.Canceled)
        {
            await MovementDetailsMudDataGrid!.ReloadServerData();
        }
        await Task.CompletedTask;
    }
    private async Task ClickRemoveReceptionDetail(MouseEventArgs ev)
    {       
        await Task.CompletedTask;
    }
    private async Task GuardarClick(MouseEventArgs args)
    {
        var strMasterMovement = System.Text.Json.JsonSerializer.Serialize(MasterMovement);
        var result_MasterMovement = await Http.PostAsync($"api/Inventory/PostMovements?userId={Useful.userId}", new StringContent($"[{strMasterMovement}]", null, "application/json"));
        if (result_MasterMovement.IsSuccessStatusCode)
        {
            var sucessContent = await result_MasterMovement.Content.ReadFromJsonAsync<WebApiResponse<List<PostResponse>>>();
            if ((sucessContent?.data![0].insertedRows == 1 || sucessContent?.data![0].updatedRows == 1))
            {
                var result = await DialogService.ShowDialog(Useful.OkSavedMessage, "Recepcion", "OK", Color.Info, Icons.Material.Filled.Commit);
                if (!result!.Canceled)
                {
                    MovementId =null;
                }
            }
        }
        else if (result_MasterMovement.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            var conflictContent = await result_MasterMovement.Content.ReadFromJsonAsync<WebApiResponse<Object?>>();
            await DialogService.ShowDialog(conflictContent?.message!, "Error", "OK", Color.Error, Icons.Material.Filled.Error);
        }
        else
        {
            var errorMessage = await result_MasterMovement.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }
    }
    private async Task GenerateClick(MouseEventArgs args)
    {
        var SelectedActions = MovementDetailsMudDataGrid?.FilteredItems.Count() > 0 ?
                              new Client.Models.Action{
                                  UserId = Useful.userId,
                                  RecordId = MovementId,
                                  ModuleId = 15,
                                  actionName = "GENERATE",
                                  ActionComment = "",
                                  RelatedId = 0
                              }
                              : null;

        var strMovementActions = System.Text.Json.JsonSerializer.Serialize(SelectedActions);
        var result_PostMovementActions = (SelectedActions is not null) ? await Http.PostAsync($"api/Inventory/PostMovementActions?userId={SelectedActions.UserId}", new StringContent($"[{strMovementActions}]", null, "application/json")) : null;
        if (result_PostMovementActions is not null && result_PostMovementActions.IsSuccessStatusCode)
        {
            var rest = result_PostMovementActions.Content.ReadAsStringAsync();
            await DialogService.ShowDialog(Useful.OkSavedMessage, "Recepcion", "OK", Color.Info, Icons.Material.Filled.Commit);
            MovementId = null;
        }
    }
}