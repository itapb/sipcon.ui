@page "/resettpassword"


@using FluentValidation


<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-10">
    <MudPaper Class="pa-6 rounded-lg" Elevation="25">
      
        <MudText Typo="Typo.h4" Color="Color.Primary" Class="mx-auto d-block mb-6">SipCon</MudText>
        <MudForm Model="@_model" @ref="@form" Validation="@(_modelValidator.ValidateValue)" ValidationDelay="0">

            <MudIcon Icon="@Icons.Material.Filled.Business" Color="Color.Primary" Size="Size.Large"
                     Class="mx-auto d-block mb-2" />

            <MudText Typo="Typo.h4" Color="Color.Primary" Class="mx-auto d-block mb-6">SipCon</MudText>

            <MudTextField @bind-Value="_model.Login" Label="Usuario" Variant="Variant.Outlined"
                          MaxLength="15"
                          FullWidth="true"
                          Margin="Margin.Dense"
                          HelperText="tu usuario."
                          Disabled = "true"/>

            <MudTextField @bind-Value="_model.Password" Label="Contraseña" Variant="Variant.Outlined"
                          MaxLength="15"
                          FullWidth="true"
                          Margin="Margin.Dense"
                          InputType="@_passwordInput"
                          HelperText="Por favor, ingresa tu contraseña."
                          Class="mt-4"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_passWordInputIcon"
                          OnAdornmentClick="ClickBottonShowPass"
                          AdornmentAriaLabel="Show Password"
                          For="@(() => _model.Password)"
                          Immediate="true" />

            <MudTextField @bind-Value="_model.Password" Label="Confirmar Contraseña" Variant="Variant.Outlined"
                          MaxLength="15"
                          FullWidth="true"
                          Margin="Margin.Dense"
                          InputType="@_passwordInput"
                          HelperText="Por favor, confirma tu contraseña."
                          Class="mt-4"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_passWordInputIcon"
                          OnAdornmentClick="ClickBottonShowPass"
                          AdornmentAriaLabel="Show Password"
                          For="@(() => _model.Password)"
                          Immediate="true" />

            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-6 w-100"
                       OnClick="@(async () => await OnValidSubmit())">Aceptar</MudButton>

            
        </MudForm>
    </MudPaper>
</MudContainer>




@code {

    private LoginRequest _model = new();
    private MudForm? form;

    [Inject] private HttpClient _httpClient { get; set; } = null!;
    [Inject] private ISnackbar _snackbar { get; set; } = null!;
    [Inject] private NavigationManager _navigationManager { get; set; } = null!;


    private bool _isShowPassword { get; set; } = false;
    private InputType _passwordInput { get; set; } = InputType.Password;
    private string _passWordInputIcon { get; set; } = Icons.Material.Filled.VisibilityOff;

    LoginValidator _modelValidator = new LoginValidator();


    protected override void OnInitialized()
    {

        _model = new LoginRequest();


    }

    private void  ClickBottonShowPass()
    {
        if (_isShowPassword)
        {
            _isShowPassword = false;
            _passwordInput = InputType.Password;
            _passWordInputIcon = Icons.Material.Filled.VisibilityOff;

        }
        else
        {
            _isShowPassword = true;
            _passwordInput = InputType.Text;
            _passWordInputIcon = Icons.Material.Filled.Visibility;
        }

    }

    private async Task OnValidSubmit()
    {
        await form!.Validate();
        if (form.IsValid)
        {
            await HandleResetPassword();
        }

        StateHasChanged();
        await Task.CompletedTask;

    }

    private async Task HandleResetPassword()
    {
        try
        {
            var url = "api/Security/Auth_User";
            var response = await _httpClient.PostAsJsonAsync(url, _model);

            if (!response.IsSuccessStatusCode)
            {

                if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    throw new Exception($"Error Auth_User: {response.StatusCode.ToString()} - {response.ReasonPhrase}");
                }

            }

            var result = await response.Content.ReadFromJsonAsync <ApiResponse<LoginResponse>>();
            if (result != null)
            {
                if (result.Processed)
                {
                    _navigationManager.NavigateTo("login");
                }else
                {
                    _snackbar.Add(result.Message, MudBlazor.Severity.Error);
                }

            }
            else
            {
                _snackbar.Add("Error al recuperar contraseña. Inténtelo de nuevo.", MudBlazor.Severity.Error);
            }

        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error resetpassword: {ex.Message}", MudBlazor.Severity.Error);
        }



    }

    /// <summary>
    /// Validacion del formulario
    /// </summary>
    /// <typeparam name="Login"></typeparam>
    public class LoginValidator : AbstractValidator<LoginRequest>
    {
        public LoginValidator()
        {

            RuleFor(x => x.Login)
                .NotEmpty().WithMessage("Campo requerido")
                .Length(2, 30).WithMessage("Campo requerido entre 2-30 carácteres");

            RuleFor(x => x.Password)
                .NotEmpty().WithMessage("Campo requerido")
                .Length(4, 15).WithMessage("Campo requerido entre 4-15 carácteres");

        }


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<LoginRequest>.CreateWithOptions((LoginRequest)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };

    }
}
