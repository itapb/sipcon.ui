@page "/replacepassword"


@using FluentValidation



<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-10">
    <MudPaper Class="pa-6 rounded-lg" Elevation="25" Style="width: 400px">
        <MudText Typo="Typo.h4" Class="mb-4" Style="text-align: center;">Olvido Contraseña</MudText>
@*         <MudIcon Icon="@Icons.Material.Filled.Business" Color="Color.Primary" Size="Size.Large"
                 Class="mx-auto d-block mb-2" />
        <MudText Typo="Typo.h4" Color="Color.Primary" Style="text-align: center;">SipCon</MudText> *@
       
            <MudStepper Vertical  NonLinear="false"  OnPreviewInteraction="OnPreviewInteraction">
                <MudStep Title="Paso 1" SecondaryText="Ingrese Usuario" HasError="@(string.IsNullOrEmpty(_Usuario.Trim()) || !_step1Complete)">
       
                    <MudTextField @bind-Value="_Usuario" Label="Usuario"
                                  Variant="Variant.Outlined"
                                  MaxLength="15"
                                  FullWidth="true"
                                  Margin="Margin.Dense"
                                  HelperText="tu usuario."
                                  Clearable />
                </MudStep>
                <MudStep Title="Paso 2" SecondaryText="Ingrese Código Validador" HasError="@(string.IsNullOrEmpty(_Codigo.Trim()) || !_step1Complete)">
                    <MudTextField @bind-Value="_Codigo" Label="Código Validador"
                                  @bind-Value:after="() => AfterCodigoValueChange()"
                                  Variant="Variant.Filled"
                                  MaxLength="6"
                                  FullWidth="true"
                                  Margin="Margin.Dense"
                                  HelperText="Código 6 digitos enviado a su email"
                                  onkeydown="HandleKeyUpCodigo" 
                                  Clearable />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-6 w-100"
                           FullWidth="true"
                           OnClick="@(async () => await HandleResetUser())" 
                           Disabled="@(string.IsNullOrEmpty(_Usuario.Trim()) || !_isCodigoEmpty)"
                           StartIcon="@Icons.Material.Filled.Send">Reenviar Código</MudButton>
                </MudStep>
                <MudStep Title="Paso 3" SecondaryText="Configure contraseña" HasError="@(!_step2Complete)">

                    <MudForm Model="@_model" @ref="@form" Validation="@(_modelValidator.ValidateValue)" ValidationDelay="0">
                        
                        <MudTextField @bind-Value="_model.Password" Label="Contraseña" Variant="Variant.Outlined"
                                      Style="text-transform: none;"
                                      MaxLength="15"
                                      FullWidth="true"
                                      Margin="Margin.Dense"
                                      InputType="@_passwordInput"
                                      HelperText="Por favor, ingresa tu contraseña."
                                      Class="mt-4"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@_passWordInputIcon"
                                      OnAdornmentClick="ClickBottonShowPass"
                                      AdornmentAriaLabel="Show Password"
                                      For="@(() => _model.Password)"
                                      Immediate="true" />

                        <MudTextField @bind-Value="_model.ConfirmPassword" Label="Confirmar Contraseña" Variant="Variant.Outlined"
                                      Style="text-transform: none;"
                                      MaxLength="15"
                                      FullWidth="true"
                                      Margin="Margin.Dense"
                                      InputType="@_passwordInput"
                                      HelperText="Por favor, confirma tu contraseña."
                                      Class="mt-4"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@_passWordInputIcon"
                                      OnAdornmentClick="ClickBottonShowPass"
                                      AdornmentAriaLabel="Show Password"
                                      For="@(() => _model.ConfirmPassword)"
                                      Immediate="true" />

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-6 w-100"
                               OnClick="@(async () => await HandleResetPassword())">Aceptar</MudButton>


                    </MudForm>
                </MudStep>
            </MudStepper>
        @* </MudPaper> *@

    </MudPaper>
</MudContainer>

<style>
    .blur {
        backdrop-filter: blur(10px);
    }

    .dialog-background {
        background-color: transparent;
    }

    .dialog-background-title {
        background: rgb(from var(--mud-palette-info-lighten) r g b / 50%);
        color: var(--mud-palette-white);
    }

    .dialog-background-surface {
        background: rgb(from var(--mud-palette-surface) r g b / 75%);
    }

    .align-right input {
        text-align: right;
    }

    .uppercase-mud-textfield input.mud-input-slot {
        text-transform: none;
    }

    input.mud-input-slot {
        text-transform: none;
    }
</style>


@code {

    private MudForm? form;
    private UserValidPassword _model = new();

    [Inject] private HttpClient _httpClient { get; set; } = null!;
    [Inject] private ISnackbar _snackbar { get; set; } = null!;
    [Inject] private NavigationManager _navigationManager { get; set; } = null!;
    [Inject] private IDialogService DialogService { get; set; }


    private string _Codigo = string.Empty;
    private string _Usuario = string.Empty;
    bool _step1Complete = false;
    bool _step2Complete = false;
    bool _isCodigoEmpty = true;

    private bool _isShowPassword { get; set; } = false;
    private InputType _passwordInput { get; set; } = InputType.Password;
    private string _passWordInputIcon { get; set; } = Icons.Material.Filled.VisibilityOff;

    LoginValidator _modelValidator = new LoginValidator();


    protected override void OnInitialized()
    {

        _model = new UserValidPassword();


    }

    private void  ClickBottonShowPass()
    {
        if (_isShowPassword)
        {
            _isShowPassword = false;
            _passwordInput = InputType.Password;
            _passWordInputIcon = Icons.Material.Filled.VisibilityOff;

        }
        else
        {
            _isShowPassword = true;
            _passwordInput = InputType.Text;
            _passWordInputIcon = Icons.Material.Filled.Visibility;
        }

    }

    private async Task HandleKeyUpCodigo(KeyboardEventArgs e)
    {
        if ((_Codigo?.Length ?? 0) == 0)
        {
            _isCodigoEmpty = true;
        }
        else
        {
            _isCodigoEmpty = false;
        }

        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task AfterCodigoValueChange()
    {
        if ((_Codigo?.Length ?? 0) == 0)
        {
            _isCodigoEmpty = true;
        }
        else
        {
            _isCodigoEmpty = false;
        }

        StateHasChanged();
        await Task.CompletedTask;


    }
    

    private async Task<bool> HandleResetUser()
    {
        bool SendCode = false;
        try
        {

            var _modelTempory = new TemporyKey
            {
                UserId = 0,
                Login = _Usuario.Trim().ToUpper()
            };
            var url = "api/Security/Post_TemporyKey";
            var response = await _httpClient.PostAsJsonAsync(url, _modelTempory);

            if (!response.IsSuccessStatusCode)
            {

                if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    throw new Exception($"Error Post_TemporyKey: {response.StatusCode.ToString()} - {response.ReasonPhrase}");
                }

            }

            var result = await response.Content.ReadFromJsonAsync<ApiResponse<ActionResult>>();
            if (result != null)
            {
                if (result.Processed)
                {
                    SendCode = true;
                    _snackbar.Add("Código enviado a su correo eléctronico.", MudBlazor.Severity.Info);
                }
                else
                {
                    _snackbar.Add(result.Message, MudBlazor.Severity.Error);
                }

            }
            else
            {
                _snackbar.Add("Error al recuperar clave temporal.", MudBlazor.Severity.Error);
            }

        }
        catch (Exception ex)
        {
            SendCode = false;
            _snackbar.Add($"Error TemporyKey: {ex.Message}", MudBlazor.Severity.Error);
        }

        return await Task.FromResult(SendCode);

    }

    private async Task<bool> HandleResetPassword()
    {
        bool SendCode = false;
        
        await form!.Validate();
        if (form.IsValid)
        {
            try
            {
                var _modelReset = new UserResetPassword
                {
                    Login = _Usuario.Trim().ToUpper(),
                    UserId = 0,
                    Password = _model.Password.Trim(),
                    TemporaryKey = _Codigo.Trim().ToUpper()
                };
                var url = "api/Security/Post_Password";
                var response = await _httpClient.PostAsJsonAsync(url, _modelReset);

                if (!response.IsSuccessStatusCode)
                {

                    if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                    {
                        throw new Exception($"Error Post_Password: {response.StatusCode.ToString()} - {response.ReasonPhrase}");
                    }

                }

                var result = await response.Content.ReadFromJsonAsync<ApiResponse<LoginResponse>>();
                if (result != null)
                {
                    if (result.Processed)
                    {
                        SendCode = true;
                        _snackbar.Add("Contraseña Modificada satisfactoriamente...", MudBlazor.Severity.Info);
                        await Task.Delay(50);
                        _navigationManager.NavigateTo($"login/{_Usuario}");
                    }
                    else
                    {
                        _snackbar.Add(result.Message, MudBlazor.Severity.Error);
                    }

                }
                else
                {
                    _snackbar.Add("Error al recuperar contraseña. Inténtelo de nuevo.", MudBlazor.Severity.Error);
                }

            }
        catch (Exception ex)
        {
            _snackbar.Add($"Error HandleResetPassword: {ex.Message}", MudBlazor.Severity.Error);
        }
        }
            
           

        return await Task.FromResult(SendCode);
    }

    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.Action == StepAction.Complete)
        {
            // occurrs when clicking next
            await ControlStepCompletion(arg);
        }
        else if (arg.Action == StepAction.Activate)
        {
            // occurrs when clicking a step header with the mouse
            await ControlStepNavigation(arg);
        }
    }

    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 0:
                if ((_Usuario?.Length ?? 0) == 0)
                {
                    await DialogService.ShowMessageBox("Error", "Ingrese su Usuario en Paso 1");
                    arg.Cancel = true;
                }
                else
                {
                    var result = await HandleResetUser();
                    if (!result)
                    {
                        arg.Cancel = true;
                        _step1Complete = false;
                    }
                    else{
                        _step1Complete = true;
                    }
                    
                }
                break;
            case 1:
                if ((_Codigo?.Length ?? 0) == 0)
                {
                    await DialogService.ShowMessageBox("Error", "Ingrese Código validador enviado a su Email en Paso 2");
                    arg.Cancel = true;
                }
                break;
            case 2:
                if ((_Usuario?.Length ?? 0) == 0 || (_Codigo?.Length ?? 0) == 0)
                {
                    await DialogService.ShowMessageBox("Error", "Finalice paso 1 y paso 2 previos");
                    arg.Cancel = true;
                }
                else
                {
                    var result = await HandleResetPassword();
                    if (!result)
                    {
                        arg.Cancel = true;
                        _step2Complete = false;
                    }
                    else
                    {
                        _step2Complete = true;
                    }

                }
                break;
        }
    }

    private async Task ControlStepNavigation(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 1:
                if ((_Usuario?.Length ?? 0) == 0)
                {
                    await DialogService.ShowMessageBox("Error", "Finalice paso 1");
                    arg.Cancel = true;
                }
                break;
            case 2:
                if ((_Usuario?.Length ?? 0) == 0 || (_Codigo?.Length ?? 0) == 0)
                {
                    await DialogService.ShowMessageBox("Error", "Finalice paso 1 y paso 2 previos");
                    arg.Cancel = true;
                }
                break;
        }
    }


    /// <summary>
    /// Validacion del formulario
    /// </summary>
    /// <typeparam name="Login"></typeparam>
    public class LoginValidator : AbstractValidator<UserValidPassword>
    {
        public LoginValidator()
        {

            RuleFor(x => x.Password)
                .NotEmpty().WithMessage("Campo requerido")
                .Length(8, 15).WithMessage("Campo requerido entre 8-15 carácteres")
                .Matches("[a-z]+").WithMessage("Debe contener al menos un caracter en minuscula.")
                .Matches("[A-Z]+").WithMessage("Debe contener al menos un caracter en mayuscula.")
                .Matches("[0-9]+").WithMessage("Debe contener al menos un digito [0-9].");

            RuleFor(x => x.ConfirmPassword)
                .NotEmpty().WithMessage("Campo requerido")
                .Length(8, 15).WithMessage("Campo requerido entre 8-15 carácteres")
                .Equal(x => x.Password).WithMessage("Contraseñas no son identicas");

        }


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<UserValidPassword>.CreateWithOptions((UserValidPassword)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };

           
     

    }
}
