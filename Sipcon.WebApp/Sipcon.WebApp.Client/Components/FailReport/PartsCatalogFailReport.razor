<MudGrid Spacing="0">
    <MudItem xs="12">

        <MudPaper Elevation="2" Class="jpv1-dialog-background-title pa-3" Square="true">
            <MudPaper Elevation="2" Class="pa-2 mud-text-align-center">
                <MudStack Row="true" StretchItems="StretchItems.Start" Justify="Justify.FlexEnd">
                    <MudStack Row="true">
                        <MudText Typo="Typo.h6" Color="Color.Info">Catalogo Repuestos</MudText>
                    </MudStack>
                    <MudStack>
                        <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="CloseClick" />
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudPaper>

    </MudItem>

    <MudItem xs="12">

        <MudDataGrid @ref="PartsCatalogMudDataGrid" 
                     T="Part" 
                     ServerData="ServerReload" 
                     Striped="true" 
                     Hover="true" 
                     Filterable="false" 
                     FixedHeader Height="calc(100vh - 280px)" 
                     @bind-CurrentPage="ContactCurrentPage">
            <ToolBarContent>
       
                <MudTextField T="string" Placeholder="Buscar" Adornment="Adornment.Start" ValueChanged="@(s => OnSearch(s))" Value="searchString" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Info" OnClick="ClickRefreshPartsCatalog"></MudIconButton>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.InnerCode" Title="CODIGO PARTE" />
                <PropertyColumn Property="x => x.Description" Title="DESCRIPCION" />
                <PropertyColumn Property="x => x.Price" Title="PRECIO" />
                <PropertyColumn Property="x => x.Stock" Title="EXISTENCIA" />
                <TemplateColumn>
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Add" OnClick="() => ClickAddPart(context.Item)" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="Part" PageSizeOptions="new int[] { 100 }" InfoFormat="{first_item}-{last_item} de {all_items}" RowsPerPageString="Registros por Pagina" />
            </PagerContent>
        </MudDataGrid>

    </MudItem>
</MudGrid>


@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;


    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;   
    [Parameter] public int ModelId { get; set; }
    [Parameter] public string? Title { get; set; }
   
    private MudDataGrid<Part>? PartsCatalogMudDataGrid;

    
    bool _loading = true;
    string searchString = "";
    private int ContactCurrentPage = 0;

    private async Task OnSearch(string text)
    {
        if (text.Length == 0 || text.Length >= 3)
        {
            _loading = true;
            searchString = text;
            await PartsCatalogMudDataGrid!.ReloadServerData();
        }
    }
    
    Func<Part, object> GetSortKeySelector(string sortByPropertyName) => sortByPropertyName switch
    {
        nameof(Part.InnerCode) => o => o.InnerCode ?? "",
        nameof(Part.MasterCode) => o => o.MasterCode ?? "",
        nameof(Part.Description) => o => o.Description ?? "",
        nameof(Part.Price) => o => o.Price ?? 0m,
        nameof(Part.Stock) => o => o.Stock ?? 0,
        _ => null! //o => o.Id ?? 0 // Criterio de ordenación por defecto
    };
    
    private async Task<GridData<Part>> ServerReload(GridState<Part> state)
    {        
        _loading = true;
        var totalItems = 0;
        var mOffset = state.Page * state.PageSize;
        IEnumerable<Part> data;
        
        HttpResponseMessage response = await Http.GetAsync($"api/Part/GetByModel?modelId={ModelId}&userId={Useful.userId}&supplierId={Useful.supplierId}");
        if (response.IsSuccessStatusCode)
        {
            var content2 = await response.Content.ReadFromJsonAsync<WebApiResponse<List<Part>>>();
            totalItems = content2!.total ?? 0;
            data = content2!.data ?? new List<Part>();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception(errorMessage);
        }
        if (state.SortDefinitions.FirstOrDefault() is SortDefinition<Part> sortDefinition)
        {
            data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, GetSortKeySelector(sortDefinition.SortBy));
        }
        _loading = false;
        return new GridData<Part> { TotalItems = totalItems, Items = data };
    }
    
    private async Task ClickRefreshPartsCatalog(MouseEventArgs ev)
    {
        await PartsCatalogMudDataGrid!.ReloadServerData();
    }

    private async Task ClickAddPart(Part item)
    {
        MudDialog?.Close(DialogResult.Ok(item));
        await Task.CompletedTask;
    }

    private void CloseClick(MouseEventArgs args)
    {
        MudDialog?.Close();
    }
}
