
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FluentValidation

@inject ILicenseService LicenseService
@inject IDialogService DialogService
@inject UtilModuleActions ModuleActionsService


<MudForm Model="@_model" @ref="@form" Validation="@(_modelValidator.ValidateValue)" ValidationDelay="0" >
    <MudDialog Class="blur dialog-background"  ActionsClass="dialog-background-surface">
       
        <DialogContent>

            <MudContainer Class="blur dialog-background-title py-2 pt-2 pa-2">

                <MudCard>

                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudGrid Spacing="0" Justify="Justify.Center">
                                <MudItem xs="12" sm="4">
                                    <div class="d-flex justify-left">

                                        <MudSwitch @bind-Value="_model.IsActive" Label="Activo" LabelPlacement="Placement.End" Color="Color.Success" Disabled="@(ActionsModal == ActionsEnum.Create ? true : false)" />
                                        <MudHidden @bind-value="IdLicense" />

                                    </div>
                                </MudItem>

                                <MudItem xs="12" sm="2">

                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <div class="d-flex justify-right" style="justify-content: end;">

                                        <MudButton OnClick="Cancel">Cancelar</MudButton>
                                        <MudFab StartIcon="@Icons.Material.Filled.Save" Label="Aceptar" OnClick="@(async () => await OnValidSubmit())" Color="Color.Info" Size="Size.Small" />


                                    </div>
                                </MudItem>
                            </MudGrid>


                        </CardHeaderContent>

                    </MudCardHeader>

                </MudCard>

            </MudContainer>

            <MudContainer Class="dialog-background-surface py-2 pt-2 pa-2">
                <MudGrid Spacing="1" Justify="Justify.Center">

                    <MudItem xs="12" sm="4">
                        <MudCard>

                            <MudCardContent Style="padding-top: 0px;">
                                <div class="d-flex justify-center" >

                                    <MudTooltip Text="Imagen Licencia">
                                        <MudImage Src="@(_model.SupplierId == 4069 ? "Images/changan_marca.jpeg" : "Images/foton_marca.jpeg")" ObjectFit="ObjectFit.ScaleDown" Class="rounded-lg "
                                                  FallbackSrc="@(_model.SupplierId == 4069 ? "Images/changan_emblema.png": "Images/foton_emblema.jpeg")" Width="125" Height="152"></MudImage>
                                    </MudTooltip>
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="8">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.Settings" Color="Color.Default" Style="font-size: 2rem;"></MudIcon>
                                        <MudText Typo="Typo.subtitle2">Licencia</MudText>
                                    </MudStack>

                                </CardHeaderContent>
                                <CardHeaderActions>
                                    
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent Style="padding-top: 0px;">
                                <MudHidden @bind-value="_model.Id" />
                                <MudHidden @bind-value="_model.SupplierId" />

                                <MudTextField Typo="Typo.caption" @bind-Value="_model.Description" 
                                              Label="Descripci&oacute;n" 
                                              MaxLength="100"
                                              Variant="Variant.Text"
                                              Margin="Margin.Dense" Disabled="@(!_model.IsActive)" 
                                              For="@(() => _model.Description)"
                                              Immediate="true" />
                                

                                <MudStack Row="true">
                                    <MudSelect @bind-Value="_model.TypeId" 
                                               Typo="Typo.caption"
                                               Label="Tipo Licencia" 
                                               AdornmentColor="Color.Default"
                                               Margin="Margin.None"
                                               For="@(() => _model.TypeId)"
                                               Disabled="@(!_model.IsActive)"
                                               Immediate="true">
                                        @foreach (var item in _lisenceTypeList)
                                        {
                                            <MudSelectItem Value="@item.Value">@item.Text</MudSelectItem>
                                        }
                                    </MudSelect>

                                    <MudDatePicker @bind-Date="_model.ExpirationDate"
                                                   style="font-size: 14px;margin-top: 14px;"
                                                   Placeholder="Expiraciòn"
                                                   Variant="Variant.Text"
                                                   PickerVariant="PickerVariant.Inline"
                                                   Margin="Margin.None"
                                                   Modal="false"
                                                   ShowToolbar="false"
                                                   DateFormat="dd/MM/yyyy"
                                                   Mask="@maskDate"
                                                   ReadOnly="@(!_model.IsActive )"
                                                   For="@(() => _model.ExpirationDate)" />


                                </MudStack>



                            </MudCardContent>

                        </MudCard>
                    </MudItem>
                    
                </MudGrid>
            </MudContainer>

            <MudDialog @bind-Visible="_nestedModalVisible">
                <TitleContent>
                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Filled.CarRental" Color="@(_successModal ? Color.Default : Color.Error)" Style="font-size: 2rem;"></MudIcon>
                        <MudText Typo="Typo.h6">Licencia</MudText>
                    </MudStack>
                </TitleContent>
                <DialogContent>
                    <MudStack Row="true">
                        <MudText Class="nested"><p>@_errorModalMessage!</p> </MudText>
                    </MudStack>
                </DialogContent>
                <DialogActions>
                    <MudButton Color="Color.Info" OnClick="CloseNestedModal" Variant="Variant.Filled" Class="px-10">Ok</MudButton>
                </DialogActions>
            </MudDialog>

        </DialogContent>
       
    </MudDialog>
</MudForm>

<style>
    .blur {
    backdrop-filter: blur(10px);
    }

    .dialog-background {
    background-color: transparent;
    }

    .dialog-background-title {
    background: rgb(from var(--mud-palette-info-lighten) r g b / 50%);
    color: var(--mud-palette-white);
    }

    .dialog-background-surface {
    background: rgb(from var(--mud-palette-surface) r g b / 75%);
    }
</style>

@code {


    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public int IdLicense { get; set; } 
    [Parameter] public int IdSupplier { get; set; }
    [Parameter] public ActionsEnum ActionsModal { get; set; }

    private MudForm? form;
    private License _model { get; set; } = new License();

    private string _errorModalMessage = string.Empty;
    private bool _nestedModalVisible;
    bool _successModal = false;

    private IEnumerable<SelectOption> _lisenceTypeList { get; set; } = new List<SelectOption>();
    
    LicenseValidator _modelValidator = new LicenseValidator();
    IMask maskDate = new DateMask("dd/MM/yyyy");



    protected override async Task OnInitializedAsync()
    {

        if (ActionsModal == ActionsEnum.Create)
        {
            _model = new License();
            _model.SupplierId = IdSupplier;

            _lisenceTypeList = await ModuleActionsService.GetLicenseTypeOption(Useful.userId);

            await Task.Delay(50);

        }
        else
        {
            await GetLicense();

        }

        await Task.CompletedTask;
    }


    private async Task GetLicense()
    {
        var serviceResponse = await LicenseService.GetLicense(IdLicense, Useful.userId);
        if (serviceResponse.Processed)
        {
            _model = serviceResponse.Data ?? new License();

            _lisenceTypeList = await ModuleActionsService.GetLicenseTypeOption(Useful.userId);

            await Task.Delay(50);
            StateHasChanged();
        }
        else
        {
            _model = new License();
            _errorModalMessage = serviceResponse.Message ?? MessageEnum.GetError.GetStringValue();
            Console.WriteLine(serviceResponse.Message);
            OpenNested();
        }

        await Task.CompletedTask;

    }

    private async Task OnLicenseTypeValueChanged(int IdType)
    {
        _model.TypeId = IdType;
        
        StateHasChanged();
        form?.ResetValidation();
        await Task.CompletedTask;
    }

    private async Task OnValidSubmit()
    {
        await form!.Validate();

        if (form.IsValid)
        {
            _errorModalMessage = "";

            var serviceResponse = await LicenseService.UpdateLicense(_model, Useful.userId);
            if (serviceResponse.Processed)
            {
                if (ActionsModal == ActionsEnum.Create)
                {
                    ActionsModal = ActionsEnum.Edit;
                    // var _results = serviceResponse.Data ?? new List<ActionResult>();
                    // var _result = _results.FirstOrDefault();
                    var _result = serviceResponse.Data ?? new ActionResult();
                    if (_result is not null)
                    {
                        IdLicense = _result.LastId;
                        await GetLicense();
                    }
                }
                _errorModalMessage = MessageEnum.SaveOK.GetStringValue();
                _successModal = true;

            }
            else
            {
                _successModal = false;
                _errorModalMessage = serviceResponse.Message ?? MessageEnum.SaveNotOK.GetStringValue(); ;
                Console.WriteLine(serviceResponse.Message);

            }
            OpenNested();
        }

        StateHasChanged();
        await Task.CompletedTask;

    }



    private void Cancel()
    {
        if (_successModal)
            MudDialog.Close(DialogResult.Ok(true));
        else
        {
            MudDialog!.Cancel();
        }
    }

    private void OpenNested() => _nestedModalVisible = true;

    private async Task CloseNestedModal()
    {
        _nestedModalVisible = false;
       
        await Task.Delay(50);
        if (_successModal)
            MudDialog.Close(DialogResult.Ok(true));

        await Task.CompletedTask;

    }
    

    /// <summary>
    /// Validacion del formulario 
    /// </summary>
    /// <typeparam name="License"></typeparam>
    public class LicenseValidator : AbstractValidator<License>
    {
        public LicenseValidator()
        {

            RuleFor(x => x.Description)
                .NotEmpty().WithMessage("Campo requerido")
                .Length(5, 150).WithMessage("Campo requerido entre 5-150 carácteres");

            RuleFor(x => x.TypeId)
                .NotNull().WithMessage("Campo requerido")
                .GreaterThan(0).WithMessage("seleccione un Tipo Licencia.");

            RuleFor(x => x.ExpirationDate)
                  .NotEmpty().WithMessage("Campo requerido")
                  .Custom((value, context) =>
                  {
                      if (value < DateTime.Now)
                      {
                          context.AddFailure($"Campo requerido mayor a la fecha actual {(DateTime.Now.ToString("dd-MMM-yyyy"))}");
                      }
                  });

        }


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<License>.CreateWithOptions((License)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };

    }

   
}
