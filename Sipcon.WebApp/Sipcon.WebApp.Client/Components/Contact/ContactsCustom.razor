@using Sipcon.WebApp.Client.Pages
@using Sipcon.WebApp.Client.Repository.Auth

<MudDataGrid @ref="ContactMudDataGrid" T="Contact" ServerData="ServerReload" Filterable="false" FixedHeader Height="calc(100vh - 260px)" Loading="_loading" @bind-CurrentPage="ContactCurrentPage">
    <ToolBarContent>
        <MudIconButton Icon="@Icons.Material.Filled.AddCard" OnClick="ClickAddContact" Color="Color.Info"></MudIconButton>
        <MudTextField T="string" Placeholder="Buscar" Adornment="Adornment.Start" ValueChanged="@(s=>OnSearch(s))" Value="searchString" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Info" OnClick="ClickRefreshContact"></MudIconButton>
        <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu">
            @foreach (var strmodulo in Modules!)
            {
                <MudMenuItem Label="@strmodulo.ActionDisplay" Icon="@(strmodulo.ActionDisplay.ToActionIcon())" IconColor="@Color.Info" OnClick="@(() => ClickMenuContact(strmodulo.ActionName))" />
            }
        </MudMenu>
    </ToolBarContent>
    <Columns>
        <TemplateColumn>
            <HeaderTemplate>
                <MudCheckBox @bind-Value="IsAllCheckBoxSelected" @bind-Value:after="AfterAsyncAllCheck" />
            </HeaderTemplate>
            <CellTemplate>
                <MudCheckBox @bind-Value="@context.Item.IsSelected" />
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Vat" Title="RIF" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.FiscalName" title="RAZON SOCIAL" />
        <PropertyColumn Property="x => x.Phone1" title="TELEFONO" />
        <PropertyColumn Property="x => x.Reference" title="CODIGO" />
        @if (!Modulo.ToUpper().Equals("CONTACTOS-CONTACTOS"))
        {
            <PropertyColumn Property="x => x.Type" title="TIPO"/>
        }
        <TemplateColumn>
            <HeaderTemplate>
                <MudText>ACTIVO</MudText>
            </HeaderTemplate>
            <CellTemplate> 
                <MudIcon Icon="@(context.Item.IsActive ?? false ? Icons.Material.Filled.VerifiedUser : Icons.Material.Filled.Dangerous)" Color="@(context.Item.IsActive ?? false ? Color.Success : Color.Error)" Size="Size.Medium" />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="()=> ClickEditContact(context.Item)" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Contact" PageSizeOptions="new int[] {100}" InfoFormat="{first_item}-{last_item} de {all_items}" RowsPerPageString="Registros por Pagina" />
    </PagerContent>
</MudDataGrid>


@code {
    [Inject] private AuthenticationProviderJWT AuthenticationStateProvider { get; set; } = null!;
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    
    [Parameter] public string Modulo { get; set; } = string.Empty;

    bool _loading = true;   
    bool IsAllCheckBoxSelected = false;

    string searchString = "";
    private int ContactCurrentPage = 0;
    private List<Module>? Modules;
    private MudDataGrid<Contact>? ContactMudDataGrid;    
    private async Task AfterAsyncAllCheck()
    {
        if (ContactMudDataGrid != null)
            ContactMudDataGrid.FilteredItems.ToList().ForEach(item => item.IsSelected = IsAllCheckBoxSelected);
        await Task.CompletedTask;
    }
    protected override async Task OnInitializedAsync()
    { 
        await AuthenticationStateProvider.RefreshStaticVariables();
        Modules = await Http.GetFromJsonAsync<List<Module>>($"api/Module/GetAll?moduleName={Modulo}&userId={Useful.userId}");
    }
    private async Task<GridData<Contact>> ServerReload(GridState<Contact> state)
    { 
        await AuthenticationStateProvider.RefreshStaticVariables();

        IsAllCheckBoxSelected = false;
        _loading = true;
        var mOffset = state.Page * state.PageSize;       
        IEnumerable<Contact> data = await Http.GetFromJsonAsync<List<Contact>>($"api/Contact/GetAll?filter={searchString}&rowFrom={mOffset}&idUser={Useful.userId}&moduleName={Modulo}") ?? new List<Contact>();

        var totalItems = (data.Count()! > 0) ? data.FirstOrDefault()!.Total : 0;
        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(Contact.Vat):
                    data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, o => o.Vat);
                    break;
                case nameof(Contact.FirstName):
                    data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, o => o.FirstName);
                    break;
                case nameof(Contact.LastName):
                    data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, o => o.LastName);
                    break;
                case nameof(Contact.Phone1):
                    data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, o => o.Phone1);
                    break;
                case nameof(Contact.Reference):
                    data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, o => o.Reference);
                    break;
                case nameof(Contact.Type):
                    data = data.OrderByDirection(sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending, o => o.Type);
                    break;
            }
        }
        _loading = false;
        return new GridData<Contact>{TotalItems = totalItems, Items = data};
    }
    private async Task OnSearch(string text)
    {
        if (text.Length == 0 || text.Length >= 3)
        {
            _loading = true;
            searchString = text;
            await ContactMudDataGrid!.ReloadServerData();
        }      
    }
   
    private async Task ClickMenuContact(string? actionName)
    {
        if (actionName == "EXPORT")
        {
            _loading = true;
            var ResultZonas = await Http.GetAsync($"api/Contact/GetExport?_filter={searchString}&userId={Useful.userId}");
            if (ResultZonas.IsSuccessStatusCode)
            {
                var fileContent = await ResultZonas.Content.ReadAsByteArrayAsync();
                var base64File = Convert.ToBase64String(fileContent);
                var fileUrl = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{base64File}";
                await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, "Contactos.xlsx");
            }
            _loading = false;
            return;
        }

        var SelectedActions = (ContactMudDataGrid != null && ("ACTIVATE,DEACTIVATE".IndexOf(actionName!) > -1)) ?
                              (ContactMudDataGrid.FilteredItems.Where(item => item.IsSelected)
                                                               .Select(item => new Client.Models.Action{UserId = Useful.userId, RecordId = item.Id, 
                                                                                                        ModuleId = Modules!.FirstOrDefault()?.Id,actionName = actionName,
                                                                                                        ActionComment = "", RelatedId = 0}).ToList()
                               ) : null;

        var result_Post_Actions = (SelectedActions is not null && SelectedActions.Count > 0) ? await Http.PostAsync("api/Contact/Post_Actions", new StringContent(System.Text.Json.JsonSerializer.Serialize(SelectedActions), null, "application/json")) : null;
        if (result_Post_Actions is not null && result_Post_Actions.IsSuccessStatusCode)
        {
            var rest = result_Post_Actions.Content.ReadAsStringAsync();
            await DialogService.ShowDialog("Contacto(s) Actualizado(s)!", "Contacto", "OK", Color.Info, Icons.Material.Filled.Commit);
            await ContactMudDataGrid!.ReloadServerData();
        }
        await Task.CompletedTask;
    }
    private async Task OpenContactForm(int? mId) => await DialogService.OpenForm<ContactForm, Contact>(mId, ContactMudDataGrid, Modulo);

    private async Task ClickAddContact(MouseEventArgs ev) => await OpenContactForm(0);
    private async Task ClickEditContact(Contact item) => await OpenContactForm(item.Id);

    private async Task ClickRefreshContact(MouseEventArgs ev)
    {        
        await ContactMudDataGrid!.ReloadServerData();       
    }
}